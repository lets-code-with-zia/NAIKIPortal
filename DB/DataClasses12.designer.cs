#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Portal.BL.db
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Serbee8")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertState(State instance);
    partial void UpdateState(State instance);
    partial void DeleteState(State instance);
    partial void InsertAgentExpressService(AgentExpressService instance);
    partial void UpdateAgentExpressService(AgentExpressService instance);
    partial void DeleteAgentExpressService(AgentExpressService instance);
    partial void InsertAgentsData(AgentsData instance);
    partial void UpdateAgentsData(AgentsData instance);
    partial void DeleteAgentsData(AgentsData instance);
    partial void InsertArea(Area instance);
    partial void UpdateArea(Area instance);
    partial void DeleteArea(Area instance);
    partial void InsertBidStatus(BidStatus instance);
    partial void UpdateBidStatus(BidStatus instance);
    partial void DeleteBidStatus(BidStatus instance);
    partial void InsertCardType(CardType instance);
    partial void UpdateCardType(CardType instance);
    partial void DeleteCardType(CardType instance);
    partial void InsertCarMaker(CarMaker instance);
    partial void UpdateCarMaker(CarMaker instance);
    partial void DeleteCarMaker(CarMaker instance);
    partial void InsertCar(Car instance);
    partial void UpdateCar(Car instance);
    partial void DeleteCar(Car instance);
    partial void InsertCarType(CarType instance);
    partial void UpdateCarType(CarType instance);
    partial void DeleteCarType(CarType instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertChat(Chat instance);
    partial void UpdateChat(Chat instance);
    partial void DeleteChat(Chat instance);
    partial void InsertChatMultiMedia(ChatMultiMedia instance);
    partial void UpdateChatMultiMedia(ChatMultiMedia instance);
    partial void DeleteChatMultiMedia(ChatMultiMedia instance);
    partial void InsertChatRoom(ChatRoom instance);
    partial void UpdateChatRoom(ChatRoom instance);
    partial void DeleteChatRoom(ChatRoom instance);
    partial void InsertChatType(ChatType instance);
    partial void UpdateChatType(ChatType instance);
    partial void DeleteChatType(ChatType instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertEmailConfiguration(EmailConfiguration instance);
    partial void UpdateEmailConfiguration(EmailConfiguration instance);
    partial void DeleteEmailConfiguration(EmailConfiguration instance);
    partial void InsertEmailConfigurationOption(EmailConfigurationOption instance);
    partial void UpdateEmailConfigurationOption(EmailConfigurationOption instance);
    partial void DeleteEmailConfigurationOption(EmailConfigurationOption instance);
    partial void InsertEmailTemplate(EmailTemplate instance);
    partial void UpdateEmailTemplate(EmailTemplate instance);
    partial void DeleteEmailTemplate(EmailTemplate instance);
    partial void InsertEmailTemplateType(EmailTemplateType instance);
    partial void UpdateEmailTemplateType(EmailTemplateType instance);
    partial void DeleteEmailTemplateType(EmailTemplateType instance);
    partial void InsertExpressCategory(ExpressCategory instance);
    partial void UpdateExpressCategory(ExpressCategory instance);
    partial void DeleteExpressCategory(ExpressCategory instance);
    partial void InsertExpressJobBid(ExpressJobBid instance);
    partial void UpdateExpressJobBid(ExpressJobBid instance);
    partial void DeleteExpressJobBid(ExpressJobBid instance);
    partial void InsertExpressJob(ExpressJob instance);
    partial void UpdateExpressJob(ExpressJob instance);
    partial void DeleteExpressJob(ExpressJob instance);
    partial void InsertFileType(FileType instance);
    partial void UpdateFileType(FileType instance);
    partial void DeleteFileType(FileType instance);
    partial void InsertFurniture(Furniture instance);
    partial void UpdateFurniture(Furniture instance);
    partial void DeleteFurniture(Furniture instance);
    partial void InsertFurnitureDropDownOption(FurnitureDropDownOption instance);
    partial void UpdateFurnitureDropDownOption(FurnitureDropDownOption instance);
    partial void DeleteFurnitureDropDownOption(FurnitureDropDownOption instance);
    partial void InsertHomeCategory(HomeCategory instance);
    partial void UpdateHomeCategory(HomeCategory instance);
    partial void DeleteHomeCategory(HomeCategory instance);
    partial void InsertJobAttachment(JobAttachment instance);
    partial void UpdateJobAttachment(JobAttachment instance);
    partial void DeleteJobAttachment(JobAttachment instance);
    partial void InsertJobDetail(JobDetail instance);
    partial void UpdateJobDetail(JobDetail instance);
    partial void DeleteJobDetail(JobDetail instance);
    partial void InsertJobDetailArea(JobDetailArea instance);
    partial void UpdateJobDetailArea(JobDetailArea instance);
    partial void DeleteJobDetailArea(JobDetailArea instance);
    partial void InsertJobDetailEvent(JobDetailEvent instance);
    partial void UpdateJobDetailEvent(JobDetailEvent instance);
    partial void DeleteJobDetailEvent(JobDetailEvent instance);
    partial void InsertJobDetailInterior(JobDetailInterior instance);
    partial void UpdateJobDetailInterior(JobDetailInterior instance);
    partial void DeleteJobDetailInterior(JobDetailInterior instance);
    partial void InsertJobDetailsConsulting(JobDetailsConsulting instance);
    partial void UpdateJobDetailsConsulting(JobDetailsConsulting instance);
    partial void DeleteJobDetailsConsulting(JobDetailsConsulting instance);
    partial void InsertJobdetailsFurniture(JobdetailsFurniture instance);
    partial void UpdateJobdetailsFurniture(JobdetailsFurniture instance);
    partial void DeleteJobdetailsFurniture(JobdetailsFurniture instance);
    partial void InsertJobDetailWall(JobDetailWall instance);
    partial void UpdateJobDetailWall(JobDetailWall instance);
    partial void DeleteJobDetailWall(JobDetailWall instance);
    partial void InsertJobDetailWindow(JobDetailWindow instance);
    partial void UpdateJobDetailWindow(JobDetailWindow instance);
    partial void DeleteJobDetailWindow(JobDetailWindow instance);
    partial void InsertJobPaymentType(JobPaymentType instance);
    partial void UpdateJobPaymentType(JobPaymentType instance);
    partial void DeleteJobPaymentType(JobPaymentType instance);
    partial void InsertJob(Job instance);
    partial void UpdateJob(Job instance);
    partial void DeleteJob(Job instance);
    partial void InsertJobStatus(JobStatus instance);
    partial void UpdateJobStatus(JobStatus instance);
    partial void DeleteJobStatus(JobStatus instance);
    partial void InsertNationality(Nationality instance);
    partial void UpdateNationality(Nationality instance);
    partial void DeleteNationality(Nationality instance);
    partial void InsertNotification(Notification instance);
    partial void UpdateNotification(Notification instance);
    partial void DeleteNotification(Notification instance);
    partial void InsertNotificationType(NotificationType instance);
    partial void UpdateNotificationType(NotificationType instance);
    partial void DeleteNotificationType(NotificationType instance);
    partial void InsertPackage(Package instance);
    partial void UpdatePackage(Package instance);
    partial void DeletePackage(Package instance);
    partial void InsertPackageType(PackageType instance);
    partial void UpdatePackageType(PackageType instance);
    partial void DeletePackageType(PackageType instance);
    partial void InsertParentCategory(ParentCategory instance);
    partial void UpdateParentCategory(ParentCategory instance);
    partial void DeleteParentCategory(ParentCategory instance);
    partial void InsertPermissionGroup(PermissionGroup instance);
    partial void UpdatePermissionGroup(PermissionGroup instance);
    partial void DeletePermissionGroup(PermissionGroup instance);
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertPropertyType(PropertyType instance);
    partial void UpdatePropertyType(PropertyType instance);
    partial void DeletePropertyType(PropertyType instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertQuestionReply(QuestionReply instance);
    partial void UpdateQuestionReply(QuestionReply instance);
    partial void DeleteQuestionReply(QuestionReply instance);
    partial void InsertRejectedAgreement(RejectedAgreement instance);
    partial void UpdateRejectedAgreement(RejectedAgreement instance);
    partial void DeleteRejectedAgreement(RejectedAgreement instance);
    partial void InsertReviewAndRating(ReviewAndRating instance);
    partial void UpdateReviewAndRating(ReviewAndRating instance);
    partial void DeleteReviewAndRating(ReviewAndRating instance);
    partial void InsertSpecialityLevel(SpecialityLevel instance);
    partial void UpdateSpecialityLevel(SpecialityLevel instance);
    partial void DeleteSpecialityLevel(SpecialityLevel instance);
    partial void InsertSpokenLanguage(SpokenLanguage instance);
    partial void UpdateSpokenLanguage(SpokenLanguage instance);
    partial void DeleteSpokenLanguage(SpokenLanguage instance);
    partial void InsertState1(State1 instance);
    partial void UpdateState1(State1 instance);
    partial void DeleteState1(State1 instance);
    partial void InsertSubCategory(SubCategory instance);
    partial void UpdateSubCategory(SubCategory instance);
    partial void DeleteSubCategory(SubCategory instance);
    partial void InsertTempExpressJob(TempExpressJob instance);
    partial void UpdateTempExpressJob(TempExpressJob instance);
    partial void DeleteTempExpressJob(TempExpressJob instance);
    partial void InsertTempJob(TempJob instance);
    partial void UpdateTempJob(TempJob instance);
    partial void DeleteTempJob(TempJob instance);
    partial void InsertTransactionType(TransactionType instance);
    partial void UpdateTransactionType(TransactionType instance);
    partial void DeleteTransactionType(TransactionType instance);
    partial void InsertUserBankCard(UserBankCard instance);
    partial void UpdateUserBankCard(UserBankCard instance);
    partial void DeleteUserBankCard(UserBankCard instance);
    partial void InsertUserBid(UserBid instance);
    partial void UpdateUserBid(UserBid instance);
    partial void DeleteUserBid(UserBid instance);
    partial void InsertUserCertificate(UserCertificate instance);
    partial void UpdateUserCertificate(UserCertificate instance);
    partial void DeleteUserCertificate(UserCertificate instance);
    partial void InsertUserEducation(UserEducation instance);
    partial void UpdateUserEducation(UserEducation instance);
    partial void DeleteUserEducation(UserEducation instance);
    partial void InsertUserEmailConfiguration(UserEmailConfiguration instance);
    partial void UpdateUserEmailConfiguration(UserEmailConfiguration instance);
    partial void DeleteUserEmailConfiguration(UserEmailConfiguration instance);
    partial void InsertUserEmployement(UserEmployement instance);
    partial void UpdateUserEmployement(UserEmployement instance);
    partial void DeleteUserEmployement(UserEmployement instance);
    partial void InsertUserJobAgreement(UserJobAgreement instance);
    partial void UpdateUserJobAgreement(UserJobAgreement instance);
    partial void DeleteUserJobAgreement(UserJobAgreement instance);
    partial void InsertUserJobRejection(UserJobRejection instance);
    partial void UpdateUserJobRejection(UserJobRejection instance);
    partial void DeleteUserJobRejection(UserJobRejection instance);
    partial void InsertUserPackage(UserPackage instance);
    partial void UpdateUserPackage(UserPackage instance);
    partial void DeleteUserPackage(UserPackage instance);
    partial void InsertUserPackageToken(UserPackageToken instance);
    partial void UpdateUserPackageToken(UserPackageToken instance);
    partial void DeleteUserPackageToken(UserPackageToken instance);
    partial void InsertUserPermission(UserPermission instance);
    partial void UpdateUserPermission(UserPermission instance);
    partial void DeleteUserPermission(UserPermission instance);
    partial void InsertUserPersonal(UserPersonal instance);
    partial void UpdateUserPersonal(UserPersonal instance);
    partial void DeleteUserPersonal(UserPersonal instance);
    partial void InsertUserPortfolio(UserPortfolio instance);
    partial void UpdateUserPortfolio(UserPortfolio instance);
    partial void DeleteUserPortfolio(UserPortfolio instance);
    partial void InsertUserProfileTracking(UserProfileTracking instance);
    partial void UpdateUserProfileTracking(UserProfileTracking instance);
    partial void DeleteUserProfileTracking(UserProfileTracking instance);
    partial void InsertUserProposal(UserProposal instance);
    partial void UpdateUserProposal(UserProposal instance);
    partial void DeleteUserProposal(UserProposal instance);
    partial void InsertUserProposalStatus(UserProposalStatus instance);
    partial void UpdateUserProposalStatus(UserProposalStatus instance);
    partial void DeleteUserProposalStatus(UserProposalStatus instance);
    partial void InsertUserProposalTemplate(UserProposalTemplate instance);
    partial void UpdateUserProposalTemplate(UserProposalTemplate instance);
    partial void DeleteUserProposalTemplate(UserProposalTemplate instance);
    partial void InsertUsersDefaultPermission(UsersDefaultPermission instance);
    partial void UpdateUsersDefaultPermission(UsersDefaultPermission instance);
    partial void DeleteUsersDefaultPermission(UsersDefaultPermission instance);
    partial void InsertUserSpeciality(UserSpeciality instance);
    partial void UpdateUserSpeciality(UserSpeciality instance);
    partial void DeleteUserSpeciality(UserSpeciality instance);
    partial void InsertUserSpokenLanguage(UserSpokenLanguage instance);
    partial void UpdateUserSpokenLanguage(UserSpokenLanguage instance);
    partial void DeleteUserSpokenLanguage(UserSpokenLanguage instance);
    partial void InsertUserTokenUsage(UserTokenUsage instance);
    partial void UpdateUserTokenUsage(UserTokenUsage instance);
    partial void DeleteUserTokenUsage(UserTokenUsage instance);
    partial void InsertUserTransaction(UserTransaction instance);
    partial void UpdateUserTransaction(UserTransaction instance);
    partial void DeleteUserTransaction(UserTransaction instance);
    partial void InsertUserType(UserType instance);
    partial void UpdateUserType(UserType instance);
    partial void DeleteUserType(UserType instance);
    partial void InsertAggregatedCounter(AggregatedCounter instance);
    partial void UpdateAggregatedCounter(AggregatedCounter instance);
    partial void DeleteAggregatedCounter(AggregatedCounter instance);
    partial void InsertHash(Hash instance);
    partial void UpdateHash(Hash instance);
    partial void DeleteHash(Hash instance);
    partial void InsertJob1(Job1 instance);
    partial void UpdateJob1(Job1 instance);
    partial void DeleteJob1(Job1 instance);
    partial void InsertJobParameter(JobParameter instance);
    partial void UpdateJobParameter(JobParameter instance);
    partial void DeleteJobParameter(JobParameter instance);
    partial void InsertJobQueue(JobQueue instance);
    partial void UpdateJobQueue(JobQueue instance);
    partial void DeleteJobQueue(JobQueue instance);
    partial void InsertList(List instance);
    partial void UpdateList(List instance);
    partial void DeleteList(List instance);
    partial void InsertSchema(Schema instance);
    partial void UpdateSchema(Schema instance);
    partial void DeleteSchema(Schema instance);
    partial void InsertServer(Server instance);
    partial void UpdateServer(Server instance);
    partial void DeleteServer(Server instance);
    partial void InsertSet(Set instance);
    partial void UpdateSet(Set instance);
    partial void DeleteSet(Set instance);
    partial void InsertPestControlPriceList(PestControlPriceList instance);
    partial void UpdatePestControlPriceList(PestControlPriceList instance);
    partial void DeletePestControlPriceList(PestControlPriceList instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertLaundryPriceList(LaundryPriceList instance);
    partial void UpdateLaundryPriceList(LaundryPriceList instance);
    partial void DeleteLaundryPriceList(LaundryPriceList instance);
    #endregion
		
		
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<State> States
		{
			get
			{
				return this.GetTable<State>();
			}
		}
		
		public System.Data.Linq.Table<AgentExpressService> AgentExpressServices
		{
			get
			{
				return this.GetTable<AgentExpressService>();
			}
		}
		
		public System.Data.Linq.Table<AgentsData> AgentsDatas
		{
			get
			{
				return this.GetTable<AgentsData>();
			}
		}
		
		public System.Data.Linq.Table<Area> Areas
		{
			get
			{
				return this.GetTable<Area>();
			}
		}
		
		public System.Data.Linq.Table<BidStatus> BidStatus
		{
			get
			{
				return this.GetTable<BidStatus>();
			}
		}
		
		public System.Data.Linq.Table<CardType> CardTypes
		{
			get
			{
				return this.GetTable<CardType>();
			}
		}
		
		public System.Data.Linq.Table<CarMaker> CarMakers
		{
			get
			{
				return this.GetTable<CarMaker>();
			}
		}
		
		public System.Data.Linq.Table<Car> Cars
		{
			get
			{
				return this.GetTable<Car>();
			}
		}
		
		public System.Data.Linq.Table<CarType> CarTypes
		{
			get
			{
				return this.GetTable<CarType>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Chat> Chats
		{
			get
			{
				return this.GetTable<Chat>();
			}
		}
		
		public System.Data.Linq.Table<ChatMultiMedia> ChatMultiMedias
		{
			get
			{
				return this.GetTable<ChatMultiMedia>();
			}
		}
		
		public System.Data.Linq.Table<ChatRoom> ChatRooms
		{
			get
			{
				return this.GetTable<ChatRoom>();
			}
		}
		
		public System.Data.Linq.Table<ChatType> ChatTypes
		{
			get
			{
				return this.GetTable<ChatType>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<EmailConfiguration> EmailConfigurations
		{
			get
			{
				return this.GetTable<EmailConfiguration>();
			}
		}
		
		public System.Data.Linq.Table<EmailConfigurationOption> EmailConfigurationOptions
		{
			get
			{
				return this.GetTable<EmailConfigurationOption>();
			}
		}
		
		public System.Data.Linq.Table<EmailTemplate> EmailTemplates
		{
			get
			{
				return this.GetTable<EmailTemplate>();
			}
		}
		
		public System.Data.Linq.Table<EmailTemplateType> EmailTemplateTypes
		{
			get
			{
				return this.GetTable<EmailTemplateType>();
			}
		}
		
		public System.Data.Linq.Table<ExpressCategory> ExpressCategories
		{
			get
			{
				return this.GetTable<ExpressCategory>();
			}
		}
		
		public System.Data.Linq.Table<ExpressJobBid> ExpressJobBids
		{
			get
			{
				return this.GetTable<ExpressJobBid>();
			}
		}
		
		public System.Data.Linq.Table<ExpressJob> ExpressJobs
		{
			get
			{
				return this.GetTable<ExpressJob>();
			}
		}
		
		public System.Data.Linq.Table<FileType> FileTypes
		{
			get
			{
				return this.GetTable<FileType>();
			}
		}
		
		public System.Data.Linq.Table<Furniture> Furnitures
		{
			get
			{
				return this.GetTable<Furniture>();
			}
		}
		
		public System.Data.Linq.Table<FurnitureDropDownOption> FurnitureDropDownOptions
		{
			get
			{
				return this.GetTable<FurnitureDropDownOption>();
			}
		}
		
		public System.Data.Linq.Table<HomeCategory> HomeCategories
		{
			get
			{
				return this.GetTable<HomeCategory>();
			}
		}
		
		public System.Data.Linq.Table<ItemKind> ItemKinds
		{
			get
			{
				return this.GetTable<ItemKind>();
			}
		}
		
		public System.Data.Linq.Table<JobAttachment> JobAttachments
		{
			get
			{
				return this.GetTable<JobAttachment>();
			}
		}
		
		public System.Data.Linq.Table<JobDetail> JobDetails
		{
			get
			{
				return this.GetTable<JobDetail>();
			}
		}
		
		public System.Data.Linq.Table<JobDetailArea> JobDetailAreas
		{
			get
			{
				return this.GetTable<JobDetailArea>();
			}
		}
		
		public System.Data.Linq.Table<JobDetailEvent> JobDetailEvents
		{
			get
			{
				return this.GetTable<JobDetailEvent>();
			}
		}
		
		public System.Data.Linq.Table<JobDetailInterior> JobDetailInteriors
		{
			get
			{
				return this.GetTable<JobDetailInterior>();
			}
		}
		
		public System.Data.Linq.Table<JobDetailsConsulting> JobDetailsConsultings
		{
			get
			{
				return this.GetTable<JobDetailsConsulting>();
			}
		}
		
		public System.Data.Linq.Table<JobdetailsFurniture> JobdetailsFurnitures
		{
			get
			{
				return this.GetTable<JobdetailsFurniture>();
			}
		}
		
		public System.Data.Linq.Table<JobDetailWall> JobDetailWalls
		{
			get
			{
				return this.GetTable<JobDetailWall>();
			}
		}
		
		public System.Data.Linq.Table<JobDetailWindow> JobDetailWindows
		{
			get
			{
				return this.GetTable<JobDetailWindow>();
			}
		}
		
		public System.Data.Linq.Table<JobPaymentType> JobPaymentTypes
		{
			get
			{
				return this.GetTable<JobPaymentType>();
			}
		}
		
		public System.Data.Linq.Table<Job> Jobs
		{
			get
			{
				return this.GetTable<Job>();
			}
		}
		
		public System.Data.Linq.Table<JobStatus> JobStatus
		{
			get
			{
				return this.GetTable<JobStatus>();
			}
		}
		
		public System.Data.Linq.Table<Nationality> Nationalities
		{
			get
			{
				return this.GetTable<Nationality>();
			}
		}
		
		public System.Data.Linq.Table<Notification> Notifications
		{
			get
			{
				return this.GetTable<Notification>();
			}
		}
		
		public System.Data.Linq.Table<NotificationType> NotificationTypes
		{
			get
			{
				return this.GetTable<NotificationType>();
			}
		}
		
		public System.Data.Linq.Table<Package> Packages
		{
			get
			{
				return this.GetTable<Package>();
			}
		}
		
		public System.Data.Linq.Table<PackageType> PackageTypes
		{
			get
			{
				return this.GetTable<PackageType>();
			}
		}
		
		public System.Data.Linq.Table<ParentCategory> ParentCategories
		{
			get
			{
				return this.GetTable<ParentCategory>();
			}
		}
		
		public System.Data.Linq.Table<PermissionGroup> PermissionGroups
		{
			get
			{
				return this.GetTable<PermissionGroup>();
			}
		}
		
		public System.Data.Linq.Table<Permission> Permissions
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<PropertyType> PropertyTypes
		{
			get
			{
				return this.GetTable<PropertyType>();
			}
		}
		
		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<QuestionReply> QuestionReplies
		{
			get
			{
				return this.GetTable<QuestionReply>();
			}
		}
		
		public System.Data.Linq.Table<RejectedAgreement> RejectedAgreements
		{
			get
			{
				return this.GetTable<RejectedAgreement>();
			}
		}
		
		public System.Data.Linq.Table<ReviewAndRating> ReviewAndRatings
		{
			get
			{
				return this.GetTable<ReviewAndRating>();
			}
		}
		
		public System.Data.Linq.Table<SpecialityLevel> SpecialityLevels
		{
			get
			{
				return this.GetTable<SpecialityLevel>();
			}
		}
		
		public System.Data.Linq.Table<SpokenLanguage> SpokenLanguages
		{
			get
			{
				return this.GetTable<SpokenLanguage>();
			}
		}
		
		public System.Data.Linq.Table<State1> State1s
		{
			get
			{
				return this.GetTable<State1>();
			}
		}
		
		public System.Data.Linq.Table<SubCategory> SubCategories
		{
			get
			{
				return this.GetTable<SubCategory>();
			}
		}
		
		public System.Data.Linq.Table<TempExpressJob> TempExpressJobs
		{
			get
			{
				return this.GetTable<TempExpressJob>();
			}
		}
		
		public System.Data.Linq.Table<TempJob> TempJobs
		{
			get
			{
				return this.GetTable<TempJob>();
			}
		}
		
		public System.Data.Linq.Table<TransactionType> TransactionTypes
		{
			get
			{
				return this.GetTable<TransactionType>();
			}
		}
		
		public System.Data.Linq.Table<UserBankCard> UserBankCards
		{
			get
			{
				return this.GetTable<UserBankCard>();
			}
		}
		
		public System.Data.Linq.Table<UserBid> UserBids
		{
			get
			{
				return this.GetTable<UserBid>();
			}
		}
		
		public System.Data.Linq.Table<UserCertificate> UserCertificates
		{
			get
			{
				return this.GetTable<UserCertificate>();
			}
		}
		
		public System.Data.Linq.Table<UserEducation> UserEducations
		{
			get
			{
				return this.GetTable<UserEducation>();
			}
		}
		
		public System.Data.Linq.Table<UserEmailConfiguration> UserEmailConfigurations
		{
			get
			{
				return this.GetTable<UserEmailConfiguration>();
			}
		}
		
		public System.Data.Linq.Table<UserEmployement> UserEmployements
		{
			get
			{
				return this.GetTable<UserEmployement>();
			}
		}
		
		public System.Data.Linq.Table<UserJobAgreement> UserJobAgreements
		{
			get
			{
				return this.GetTable<UserJobAgreement>();
			}
		}
		
		public System.Data.Linq.Table<UserJobRejection> UserJobRejections
		{
			get
			{
				return this.GetTable<UserJobRejection>();
			}
		}
		
		public System.Data.Linq.Table<UserPackage> UserPackages
		{
			get
			{
				return this.GetTable<UserPackage>();
			}
		}
		
		public System.Data.Linq.Table<UserPackageToken> UserPackageTokens
		{
			get
			{
				return this.GetTable<UserPackageToken>();
			}
		}
		
		public System.Data.Linq.Table<UserPermission> UserPermissions
		{
			get
			{
				return this.GetTable<UserPermission>();
			}
		}
		
		public System.Data.Linq.Table<UserPersonal> UserPersonals
		{
			get
			{
				return this.GetTable<UserPersonal>();
			}
		}
		
		public System.Data.Linq.Table<UserPortfolio> UserPortfolios
		{
			get
			{
				return this.GetTable<UserPortfolio>();
			}
		}
		
		public System.Data.Linq.Table<UserProfileTracking> UserProfileTrackings
		{
			get
			{
				return this.GetTable<UserProfileTracking>();
			}
		}
		
		public System.Data.Linq.Table<UserProposal> UserProposals
		{
			get
			{
				return this.GetTable<UserProposal>();
			}
		}
		
		public System.Data.Linq.Table<UserProposalStatus> UserProposalStatus
		{
			get
			{
				return this.GetTable<UserProposalStatus>();
			}
		}
		
		public System.Data.Linq.Table<UserProposalTemplate> UserProposalTemplates
		{
			get
			{
				return this.GetTable<UserProposalTemplate>();
			}
		}
		
		public System.Data.Linq.Table<UsersDefaultPermission> UsersDefaultPermissions
		{
			get
			{
				return this.GetTable<UsersDefaultPermission>();
			}
		}
		
		public System.Data.Linq.Table<UserSpeciality> UserSpecialities
		{
			get
			{
				return this.GetTable<UserSpeciality>();
			}
		}
		
		public System.Data.Linq.Table<UserSpokenLanguage> UserSpokenLanguages
		{
			get
			{
				return this.GetTable<UserSpokenLanguage>();
			}
		}
		
		public System.Data.Linq.Table<UserTokenUsage> UserTokenUsages
		{
			get
			{
				return this.GetTable<UserTokenUsage>();
			}
		}
		
		public System.Data.Linq.Table<UserTransaction> UserTransactions
		{
			get
			{
				return this.GetTable<UserTransaction>();
			}
		}
		
		public System.Data.Linq.Table<UserType> UserTypes
		{
			get
			{
				return this.GetTable<UserType>();
			}
		}
		
		public System.Data.Linq.Table<AggregatedCounter> AggregatedCounters
		{
			get
			{
				return this.GetTable<AggregatedCounter>();
			}
		}
		
		public System.Data.Linq.Table<Counter> Counters
		{
			get
			{
				return this.GetTable<Counter>();
			}
		}
		
		public System.Data.Linq.Table<Hash> Hashes
		{
			get
			{
				return this.GetTable<Hash>();
			}
		}
		
		public System.Data.Linq.Table<Job1> Job1s
		{
			get
			{
				return this.GetTable<Job1>();
			}
		}
		
		public System.Data.Linq.Table<JobParameter> JobParameters
		{
			get
			{
				return this.GetTable<JobParameter>();
			}
		}
		
		public System.Data.Linq.Table<JobQueue> JobQueues
		{
			get
			{
				return this.GetTable<JobQueue>();
			}
		}
		
		public System.Data.Linq.Table<List> Lists
		{
			get
			{
				return this.GetTable<List>();
			}
		}
		
		public System.Data.Linq.Table<Schema> Schemas
		{
			get
			{
				return this.GetTable<Schema>();
			}
		}
		
		public System.Data.Linq.Table<Server> Servers
		{
			get
			{
				return this.GetTable<Server>();
			}
		}
		
		public System.Data.Linq.Table<Set> Sets
		{
			get
			{
				return this.GetTable<Set>();
			}
		}
		
		public System.Data.Linq.Table<PestControlPriceList> PestControlPriceLists
		{
			get
			{
				return this.GetTable<PestControlPriceList>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<LaundryPriceList> LaundryPriceLists
		{
			get
			{
				return this.GetTable<LaundryPriceList>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.CloseUserAccount")]
		public int CloseUserAccount([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserId", DbType="Int")] System.Nullable<int> userId, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserTypeId", DbType="Int")] System.Nullable<int> userTypeId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userId, userTypeId);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HangFire.State")]
	public partial class State : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _JobId;
		
		private string _Name;
		
		private string _Reason;
		
		private System.DateTime _CreatedAt;
		
		private string _Data;
		
		private EntityRef<Job1> _Job1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnJobIdChanging(long value);
    partial void OnJobIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    partial void OnCreatedAtChanging(System.DateTime value);
    partial void OnCreatedAtChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    #endregion
		
		public State()
		{
			this._Job1 = default(EntityRef<Job1>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					if (this._Job1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="NVarChar(100)")]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="NVarChar(MAX)")]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job1_State", Storage="_Job1", ThisKey="JobId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Job1 Job1
		{
			get
			{
				return this._Job1.Entity;
			}
			set
			{
				Job1 previousValue = this._Job1.Entity;
				if (((previousValue != value) 
							|| (this._Job1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job1.Entity = null;
						previousValue.States.Remove(this);
					}
					this._Job1.Entity = value;
					if ((value != null))
					{
						value.States.Add(this);
						this._JobId = value.Id;
					}
					else
					{
						this._JobId = default(long);
					}
					this.SendPropertyChanged("Job1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AgentExpressServices")]
	public partial class AgentExpressService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ExpressCategoryId;
		
		private int _AgentId;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private System.Nullable<decimal> _ViitingCharges;
		
		private System.Nullable<decimal> _HourlyRates;
		
		private System.Nullable<decimal> _minimumHours;
		
		private EntityRef<ExpressCategory> _ExpressCategory;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnExpressCategoryIdChanging(int value);
    partial void OnExpressCategoryIdChanged();
    partial void OnAgentIdChanging(int value);
    partial void OnAgentIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnViitingChargesChanging(System.Nullable<decimal> value);
    partial void OnViitingChargesChanged();
    partial void OnHourlyRatesChanging(System.Nullable<decimal> value);
    partial void OnHourlyRatesChanged();
    partial void OnminimumHoursChanging(System.Nullable<decimal> value);
    partial void OnminimumHoursChanged();
    #endregion
		
		public AgentExpressService()
		{
			this._ExpressCategory = default(EntityRef<ExpressCategory>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpressCategoryId", DbType="Int NOT NULL")]
		public int ExpressCategoryId
		{
			get
			{
				return this._ExpressCategoryId;
			}
			set
			{
				if ((this._ExpressCategoryId != value))
				{
					if (this._ExpressCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExpressCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._ExpressCategoryId = value;
					this.SendPropertyChanged("ExpressCategoryId");
					this.OnExpressCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgentId", DbType="Int NOT NULL")]
		public int AgentId
		{
			get
			{
				return this._AgentId;
			}
			set
			{
				if ((this._AgentId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgentIdChanging(value);
					this.SendPropertyChanging();
					this._AgentId = value;
					this.SendPropertyChanged("AgentId");
					this.OnAgentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViitingCharges", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> ViitingCharges
		{
			get
			{
				return this._ViitingCharges;
			}
			set
			{
				if ((this._ViitingCharges != value))
				{
					this.OnViitingChargesChanging(value);
					this.SendPropertyChanging();
					this._ViitingCharges = value;
					this.SendPropertyChanged("ViitingCharges");
					this.OnViitingChargesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HourlyRates", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> HourlyRates
		{
			get
			{
				return this._HourlyRates;
			}
			set
			{
				if ((this._HourlyRates != value))
				{
					this.OnHourlyRatesChanging(value);
					this.SendPropertyChanging();
					this._HourlyRates = value;
					this.SendPropertyChanged("HourlyRates");
					this.OnHourlyRatesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_minimumHours", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> minimumHours
		{
			get
			{
				return this._minimumHours;
			}
			set
			{
				if ((this._minimumHours != value))
				{
					this.OnminimumHoursChanging(value);
					this.SendPropertyChanging();
					this._minimumHours = value;
					this.SendPropertyChanged("minimumHours");
					this.OnminimumHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExpressCategory_AgentExpressService", Storage="_ExpressCategory", ThisKey="ExpressCategoryId", OtherKey="Id", IsForeignKey=true)]
		public ExpressCategory ExpressCategory
		{
			get
			{
				return this._ExpressCategory.Entity;
			}
			set
			{
				ExpressCategory previousValue = this._ExpressCategory.Entity;
				if (((previousValue != value) 
							|| (this._ExpressCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExpressCategory.Entity = null;
						previousValue.AgentExpressServices.Remove(this);
					}
					this._ExpressCategory.Entity = value;
					if ((value != null))
					{
						value.AgentExpressServices.Add(this);
						this._ExpressCategoryId = value.Id;
					}
					else
					{
						this._ExpressCategoryId = default(int);
					}
					this.SendPropertyChanged("ExpressCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AgentExpressService", Storage="_User", ThisKey="AgentId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.AgentExpressServices.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.AgentExpressServices.Add(this);
						this._AgentId = value.Id;
					}
					else
					{
						this._AgentId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AgentsData")]
	public partial class AgentsData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Category;
		
		private string _URL;
		
		private string _Email;
		
		private string _Cell;
		
		private string _WhatApp;
		
		private string _WebSite;
		
		private string _Name;
		
		private System.Nullable<bool> _dataPulled;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnCellChanging(string value);
    partial void OnCellChanged();
    partial void OnWhatAppChanging(string value);
    partial void OnWhatAppChanged();
    partial void OnWebSiteChanging(string value);
    partial void OnWebSiteChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OndataPulledChanging(System.Nullable<bool> value);
    partial void OndataPulledChanged();
    #endregion
		
		public AgentsData()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(1500)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cell", DbType="NVarChar(1500)")]
		public string Cell
		{
			get
			{
				return this._Cell;
			}
			set
			{
				if ((this._Cell != value))
				{
					this.OnCellChanging(value);
					this.SendPropertyChanging();
					this._Cell = value;
					this.SendPropertyChanged("Cell");
					this.OnCellChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WhatApp", DbType="NVarChar(1500)")]
		public string WhatApp
		{
			get
			{
				return this._WhatApp;
			}
			set
			{
				if ((this._WhatApp != value))
				{
					this.OnWhatAppChanging(value);
					this.SendPropertyChanging();
					this._WhatApp = value;
					this.SendPropertyChanged("WhatApp");
					this.OnWhatAppChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebSite", DbType="NVarChar(1500)")]
		public string WebSite
		{
			get
			{
				return this._WebSite;
			}
			set
			{
				if ((this._WebSite != value))
				{
					this.OnWebSiteChanging(value);
					this.SendPropertyChanging();
					this._WebSite = value;
					this.SendPropertyChanged("WebSite");
					this.OnWebSiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(1500)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dataPulled", DbType="Bit")]
		public System.Nullable<bool> dataPulled
		{
			get
			{
				return this._dataPulled;
			}
			set
			{
				if ((this._dataPulled != value))
				{
					this.OndataPulledChanging(value);
					this.SendPropertyChanging();
					this._dataPulled = value;
					this.SendPropertyChanged("dataPulled");
					this.OndataPulledChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Area")]
	public partial class Area : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Cordinates;
		
		private int _CityId;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCordinatesChanging(string value);
    partial void OnCordinatesChanged();
    partial void OnCityIdChanging(int value);
    partial void OnCityIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Area()
		{
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cordinates", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Cordinates
		{
			get
			{
				return this._Cordinates;
			}
			set
			{
				if ((this._Cordinates != value))
				{
					this.OnCordinatesChanging(value);
					this.SendPropertyChanging();
					this._Cordinates = value;
					this.SendPropertyChanged("Cordinates");
					this.OnCordinatesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int NOT NULL")]
		public int CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Area", Storage="_City", ThisKey="CityId", OtherKey="Id", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Areas.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Areas.Add(this);
						this._CityId = value.Id;
					}
					else
					{
						this._CityId = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BidStatus")]
	public partial class BidStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _BidStatusName;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<ExpressJobBid> _ExpressJobBids;
		
		private EntitySet<UserBid> _UserBids;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBidStatusNameChanging(string value);
    partial void OnBidStatusNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public BidStatus()
		{
			this._ExpressJobBids = new EntitySet<ExpressJobBid>(new Action<ExpressJobBid>(this.attach_ExpressJobBids), new Action<ExpressJobBid>(this.detach_ExpressJobBids));
			this._UserBids = new EntitySet<UserBid>(new Action<UserBid>(this.attach_UserBids), new Action<UserBid>(this.detach_UserBids));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BidStatusName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string BidStatusName
		{
			get
			{
				return this._BidStatusName;
			}
			set
			{
				if ((this._BidStatusName != value))
				{
					this.OnBidStatusNameChanging(value);
					this.SendPropertyChanging();
					this._BidStatusName = value;
					this.SendPropertyChanged("BidStatusName");
					this.OnBidStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BidStatus_ExpressJobBid", Storage="_ExpressJobBids", ThisKey="Id", OtherKey="BidStatusId")]
		public EntitySet<ExpressJobBid> ExpressJobBids
		{
			get
			{
				return this._ExpressJobBids;
			}
			set
			{
				this._ExpressJobBids.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BidStatus_UserBid", Storage="_UserBids", ThisKey="Id", OtherKey="BidStatusId")]
		public EntitySet<UserBid> UserBids
		{
			get
			{
				return this._UserBids;
			}
			set
			{
				this._UserBids.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExpressJobBids(ExpressJobBid entity)
		{
			this.SendPropertyChanging();
			entity.BidStatus = this;
		}
		
		private void detach_ExpressJobBids(ExpressJobBid entity)
		{
			this.SendPropertyChanging();
			entity.BidStatus = null;
		}
		
		private void attach_UserBids(UserBid entity)
		{
			this.SendPropertyChanging();
			entity.BidStatus = this;
		}
		
		private void detach_UserBids(UserBid entity)
		{
			this.SendPropertyChanging();
			entity.BidStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CardType")]
	public partial class CardType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _TypeName;
		
		private string _IconURL;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<UserBankCard> _UserBankCards;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnIconURLChanging(string value);
    partial void OnIconURLChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public CardType()
		{
			this._UserBankCards = new EntitySet<UserBankCard>(new Action<UserBankCard>(this.attach_UserBankCards), new Action<UserBankCard>(this.detach_UserBankCards));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IconURL", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string IconURL
		{
			get
			{
				return this._IconURL;
			}
			set
			{
				if ((this._IconURL != value))
				{
					this.OnIconURLChanging(value);
					this.SendPropertyChanging();
					this._IconURL = value;
					this.SendPropertyChanged("IconURL");
					this.OnIconURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CardType_UserBankCard", Storage="_UserBankCards", ThisKey="Id", OtherKey="CardTypeId")]
		public EntitySet<UserBankCard> UserBankCards
		{
			get
			{
				return this._UserBankCards;
			}
			set
			{
				this._UserBankCards.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserBankCards(UserBankCard entity)
		{
			this.SendPropertyChanging();
			entity.CardType = this;
		}
		
		private void detach_UserBankCards(UserBankCard entity)
		{
			this.SendPropertyChanging();
			entity.CardType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarMaker")]
	public partial class CarMaker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _CarMakerName;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<Car> _Cars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCarMakerNameChanging(string value);
    partial void OnCarMakerNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public CarMaker()
		{
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarMakerName", DbType="NVarChar(1600)")]
		public string CarMakerName
		{
			get
			{
				return this._CarMakerName;
			}
			set
			{
				if ((this._CarMakerName != value))
				{
					this.OnCarMakerNameChanging(value);
					this.SendPropertyChanging();
					this._CarMakerName = value;
					this.SendPropertyChanged("CarMakerName");
					this.OnCarMakerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarMaker_Car", Storage="_Cars", ThisKey="Id", OtherKey="CarMakerId")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarMaker = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.CarMaker = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cars")]
	public partial class Car : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _CarName;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private System.Nullable<int> _CarMakerId;
		
		private EntityRef<CarMaker> _CarMaker;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCarNameChanging(string value);
    partial void OnCarNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnCarMakerIdChanging(System.Nullable<int> value);
    partial void OnCarMakerIdChanged();
    #endregion
		
		public Car()
		{
			this._CarMaker = default(EntityRef<CarMaker>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string CarName
		{
			get
			{
				return this._CarName;
			}
			set
			{
				if ((this._CarName != value))
				{
					this.OnCarNameChanging(value);
					this.SendPropertyChanging();
					this._CarName = value;
					this.SendPropertyChanged("CarName");
					this.OnCarNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarMakerId", DbType="Int")]
		public System.Nullable<int> CarMakerId
		{
			get
			{
				return this._CarMakerId;
			}
			set
			{
				if ((this._CarMakerId != value))
				{
					if (this._CarMaker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarMakerIdChanging(value);
					this.SendPropertyChanging();
					this._CarMakerId = value;
					this.SendPropertyChanged("CarMakerId");
					this.OnCarMakerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CarMaker_Car", Storage="_CarMaker", ThisKey="CarMakerId", OtherKey="Id", IsForeignKey=true)]
		public CarMaker CarMaker
		{
			get
			{
				return this._CarMaker.Entity;
			}
			set
			{
				CarMaker previousValue = this._CarMaker.Entity;
				if (((previousValue != value) 
							|| (this._CarMaker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CarMaker.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._CarMaker.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._CarMakerId = value.Id;
					}
					else
					{
						this._CarMakerId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CarMaker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CarTypes")]
	public partial class CarType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _CarTypeName;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCarTypeNameChanging(string value);
    partial void OnCarTypeNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public CarType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarTypeName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string CarTypeName
		{
			get
			{
				return this._CarTypeName;
			}
			set
			{
				if ((this._CarTypeName != value))
				{
					this.OnCarTypeNameChanging(value);
					this.SendPropertyChanging();
					this._CarTypeName = value;
					this.SendPropertyChanged("CarTypeName");
					this.OnCarTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserIdAddedBy;
		
		private string _CategoryName;
		
		private string _IconURL;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private System.Nullable<int> _ParentCategoryId;
		
		private System.Nullable<int> _OrderNumber;
		
		private EntitySet<ExpressCategory> _ExpressCategories;
		
		private EntitySet<Job> _Jobs;
		
		private EntitySet<SubCategory> _SubCategories;
		
		private EntitySet<UserSpeciality> _UserSpecialities;
		
		private EntityRef<ParentCategory> _ParentCategory;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdAddedByChanging(int value);
    partial void OnUserIdAddedByChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnIconURLChanging(string value);
    partial void OnIconURLChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnParentCategoryIdChanging(System.Nullable<int> value);
    partial void OnParentCategoryIdChanged();
    partial void OnOrderNumberChanging(System.Nullable<int> value);
    partial void OnOrderNumberChanged();
    #endregion
		
		public Category()
		{
			this._ExpressCategories = new EntitySet<ExpressCategory>(new Action<ExpressCategory>(this.attach_ExpressCategories), new Action<ExpressCategory>(this.detach_ExpressCategories));
			this._Jobs = new EntitySet<Job>(new Action<Job>(this.attach_Jobs), new Action<Job>(this.detach_Jobs));
			this._SubCategories = new EntitySet<SubCategory>(new Action<SubCategory>(this.attach_SubCategories), new Action<SubCategory>(this.detach_SubCategories));
			this._UserSpecialities = new EntitySet<UserSpeciality>(new Action<UserSpeciality>(this.attach_UserSpecialities), new Action<UserSpeciality>(this.detach_UserSpecialities));
			this._ParentCategory = default(EntityRef<ParentCategory>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIdAddedBy", DbType="Int NOT NULL")]
		public int UserIdAddedBy
		{
			get
			{
				return this._UserIdAddedBy;
			}
			set
			{
				if ((this._UserIdAddedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdAddedByChanging(value);
					this.SendPropertyChanging();
					this._UserIdAddedBy = value;
					this.SendPropertyChanged("UserIdAddedBy");
					this.OnUserIdAddedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IconURL", DbType="NVarChar(1600)")]
		public string IconURL
		{
			get
			{
				return this._IconURL;
			}
			set
			{
				if ((this._IconURL != value))
				{
					this.OnIconURLChanging(value);
					this.SendPropertyChanging();
					this._IconURL = value;
					this.SendPropertyChanged("IconURL");
					this.OnIconURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentCategoryId", DbType="Int")]
		public System.Nullable<int> ParentCategoryId
		{
			get
			{
				return this._ParentCategoryId;
			}
			set
			{
				if ((this._ParentCategoryId != value))
				{
					if (this._ParentCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._ParentCategoryId = value;
					this.SendPropertyChanged("ParentCategoryId");
					this.OnParentCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNumber", DbType="Int")]
		public System.Nullable<int> OrderNumber
		{
			get
			{
				return this._OrderNumber;
			}
			set
			{
				if ((this._OrderNumber != value))
				{
					this.OnOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._OrderNumber = value;
					this.SendPropertyChanged("OrderNumber");
					this.OnOrderNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_ExpressCategory", Storage="_ExpressCategories", ThisKey="Id", OtherKey="CatId")]
		public EntitySet<ExpressCategory> ExpressCategories
		{
			get
			{
				return this._ExpressCategories;
			}
			set
			{
				this._ExpressCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Job", Storage="_Jobs", ThisKey="Id", OtherKey="CategoryId")]
		public EntitySet<Job> Jobs
		{
			get
			{
				return this._Jobs;
			}
			set
			{
				this._Jobs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_SubCategory", Storage="_SubCategories", ThisKey="Id", OtherKey="CategoryId")]
		public EntitySet<SubCategory> SubCategories
		{
			get
			{
				return this._SubCategories;
			}
			set
			{
				this._SubCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_UserSpeciality", Storage="_UserSpecialities", ThisKey="Id", OtherKey="CategoryId")]
		public EntitySet<UserSpeciality> UserSpecialities
		{
			get
			{
				return this._UserSpecialities;
			}
			set
			{
				this._UserSpecialities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ParentCategory_Category", Storage="_ParentCategory", ThisKey="ParentCategoryId", OtherKey="Id", IsForeignKey=true)]
		public ParentCategory ParentCategory
		{
			get
			{
				return this._ParentCategory.Entity;
			}
			set
			{
				ParentCategory previousValue = this._ParentCategory.Entity;
				if (((previousValue != value) 
							|| (this._ParentCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParentCategory.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._ParentCategory.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._ParentCategoryId = value.Id;
					}
					else
					{
						this._ParentCategoryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ParentCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Category", Storage="_User", ThisKey="UserIdAddedBy", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Categories.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Categories.Add(this);
						this._UserIdAddedBy = value.Id;
					}
					else
					{
						this._UserIdAddedBy = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExpressCategories(ExpressCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_ExpressCategories(ExpressCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_SubCategories(SubCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_SubCategories(SubCategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_UserSpecialities(UserSpeciality entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_UserSpecialities(UserSpeciality entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Chat")]
	public partial class Chat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ChatRoomId;
		
		private int _UserIdSender;
		
		private int _UserIdReceiver;
		
		private string _MessageText;
		
		private string _ChatTopic;
		
		private System.DateTime _TextedOn;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private string _FileURL;
		
		private int _ChatTypeId;
		
		private System.Nullable<bool> _IsSeen;
		
		private EntitySet<ChatMultiMedia> _ChatMultiMedias;
		
		private EntitySet<UserJobAgreement> _UserJobAgreements;
		
		private EntityRef<ChatRoom> _ChatRoom;
		
		private EntityRef<ChatType> _ChatType;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnChatRoomIdChanging(int value);
    partial void OnChatRoomIdChanged();
    partial void OnUserIdSenderChanging(int value);
    partial void OnUserIdSenderChanged();
    partial void OnUserIdReceiverChanging(int value);
    partial void OnUserIdReceiverChanged();
    partial void OnMessageTextChanging(string value);
    partial void OnMessageTextChanged();
    partial void OnChatTopicChanging(string value);
    partial void OnChatTopicChanged();
    partial void OnTextedOnChanging(System.DateTime value);
    partial void OnTextedOnChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnFileURLChanging(string value);
    partial void OnFileURLChanged();
    partial void OnChatTypeIdChanging(int value);
    partial void OnChatTypeIdChanged();
    partial void OnIsSeenChanging(System.Nullable<bool> value);
    partial void OnIsSeenChanged();
    #endregion
		
		public Chat()
		{
			this._ChatMultiMedias = new EntitySet<ChatMultiMedia>(new Action<ChatMultiMedia>(this.attach_ChatMultiMedias), new Action<ChatMultiMedia>(this.detach_ChatMultiMedias));
			this._UserJobAgreements = new EntitySet<UserJobAgreement>(new Action<UserJobAgreement>(this.attach_UserJobAgreements), new Action<UserJobAgreement>(this.detach_UserJobAgreements));
			this._ChatRoom = default(EntityRef<ChatRoom>);
			this._ChatType = default(EntityRef<ChatType>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChatRoomId", DbType="Int NOT NULL")]
		public int ChatRoomId
		{
			get
			{
				return this._ChatRoomId;
			}
			set
			{
				if ((this._ChatRoomId != value))
				{
					if (this._ChatRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChatRoomIdChanging(value);
					this.SendPropertyChanging();
					this._ChatRoomId = value;
					this.SendPropertyChanged("ChatRoomId");
					this.OnChatRoomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIdSender", DbType="Int NOT NULL")]
		public int UserIdSender
		{
			get
			{
				return this._UserIdSender;
			}
			set
			{
				if ((this._UserIdSender != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdSenderChanging(value);
					this.SendPropertyChanging();
					this._UserIdSender = value;
					this.SendPropertyChanged("UserIdSender");
					this.OnUserIdSenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIdReceiver", DbType="Int NOT NULL")]
		public int UserIdReceiver
		{
			get
			{
				return this._UserIdReceiver;
			}
			set
			{
				if ((this._UserIdReceiver != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdReceiverChanging(value);
					this.SendPropertyChanging();
					this._UserIdReceiver = value;
					this.SendPropertyChanged("UserIdReceiver");
					this.OnUserIdReceiverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageText", DbType="NVarChar(MAX)")]
		public string MessageText
		{
			get
			{
				return this._MessageText;
			}
			set
			{
				if ((this._MessageText != value))
				{
					this.OnMessageTextChanging(value);
					this.SendPropertyChanging();
					this._MessageText = value;
					this.SendPropertyChanged("MessageText");
					this.OnMessageTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChatTopic", DbType="NVarChar(1600)")]
		public string ChatTopic
		{
			get
			{
				return this._ChatTopic;
			}
			set
			{
				if ((this._ChatTopic != value))
				{
					this.OnChatTopicChanging(value);
					this.SendPropertyChanging();
					this._ChatTopic = value;
					this.SendPropertyChanged("ChatTopic");
					this.OnChatTopicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TextedOn", DbType="DateTime NOT NULL")]
		public System.DateTime TextedOn
		{
			get
			{
				return this._TextedOn;
			}
			set
			{
				if ((this._TextedOn != value))
				{
					this.OnTextedOnChanging(value);
					this.SendPropertyChanging();
					this._TextedOn = value;
					this.SendPropertyChanged("TextedOn");
					this.OnTextedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileURL", DbType="NVarChar(1600)")]
		public string FileURL
		{
			get
			{
				return this._FileURL;
			}
			set
			{
				if ((this._FileURL != value))
				{
					this.OnFileURLChanging(value);
					this.SendPropertyChanging();
					this._FileURL = value;
					this.SendPropertyChanged("FileURL");
					this.OnFileURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChatTypeId", DbType="Int NOT NULL")]
		public int ChatTypeId
		{
			get
			{
				return this._ChatTypeId;
			}
			set
			{
				if ((this._ChatTypeId != value))
				{
					if (this._ChatType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChatTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ChatTypeId = value;
					this.SendPropertyChanged("ChatTypeId");
					this.OnChatTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSeen", DbType="Bit")]
		public System.Nullable<bool> IsSeen
		{
			get
			{
				return this._IsSeen;
			}
			set
			{
				if ((this._IsSeen != value))
				{
					this.OnIsSeenChanging(value);
					this.SendPropertyChanging();
					this._IsSeen = value;
					this.SendPropertyChanged("IsSeen");
					this.OnIsSeenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chat_ChatMultiMedia", Storage="_ChatMultiMedias", ThisKey="Id", OtherKey="ChatId")]
		public EntitySet<ChatMultiMedia> ChatMultiMedias
		{
			get
			{
				return this._ChatMultiMedias;
			}
			set
			{
				this._ChatMultiMedias.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chat_UserJobAgreement", Storage="_UserJobAgreements", ThisKey="Id", OtherKey="ChatId")]
		public EntitySet<UserJobAgreement> UserJobAgreements
		{
			get
			{
				return this._UserJobAgreements;
			}
			set
			{
				this._UserJobAgreements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChatRoom_Chat", Storage="_ChatRoom", ThisKey="ChatRoomId", OtherKey="Id", IsForeignKey=true)]
		public ChatRoom ChatRoom
		{
			get
			{
				return this._ChatRoom.Entity;
			}
			set
			{
				ChatRoom previousValue = this._ChatRoom.Entity;
				if (((previousValue != value) 
							|| (this._ChatRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChatRoom.Entity = null;
						previousValue.Chats.Remove(this);
					}
					this._ChatRoom.Entity = value;
					if ((value != null))
					{
						value.Chats.Add(this);
						this._ChatRoomId = value.Id;
					}
					else
					{
						this._ChatRoomId = default(int);
					}
					this.SendPropertyChanged("ChatRoom");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChatType_Chat", Storage="_ChatType", ThisKey="ChatTypeId", OtherKey="Id", IsForeignKey=true)]
		public ChatType ChatType
		{
			get
			{
				return this._ChatType.Entity;
			}
			set
			{
				ChatType previousValue = this._ChatType.Entity;
				if (((previousValue != value) 
							|| (this._ChatType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChatType.Entity = null;
						previousValue.Chats.Remove(this);
					}
					this._ChatType.Entity = value;
					if ((value != null))
					{
						value.Chats.Add(this);
						this._ChatTypeId = value.Id;
					}
					else
					{
						this._ChatTypeId = default(int);
					}
					this.SendPropertyChanged("ChatType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Chat", Storage="_User", ThisKey="UserIdSender", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Chats.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Chats.Add(this);
						this._UserIdSender = value.Id;
					}
					else
					{
						this._UserIdSender = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Chat1", Storage="_User1", ThisKey="UserIdReceiver", OtherKey="Id", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Chats1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Chats1.Add(this);
						this._UserIdReceiver = value.Id;
					}
					else
					{
						this._UserIdReceiver = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChatMultiMedias(ChatMultiMedia entity)
		{
			this.SendPropertyChanging();
			entity.Chat = this;
		}
		
		private void detach_ChatMultiMedias(ChatMultiMedia entity)
		{
			this.SendPropertyChanging();
			entity.Chat = null;
		}
		
		private void attach_UserJobAgreements(UserJobAgreement entity)
		{
			this.SendPropertyChanging();
			entity.Chat = this;
		}
		
		private void detach_UserJobAgreements(UserJobAgreement entity)
		{
			this.SendPropertyChanging();
			entity.Chat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChatMultiMedia")]
	public partial class ChatMultiMedia : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ChatId;
		
		private int _FileTypeId;
		
		private string _FileURL;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntityRef<Chat> _Chat;
		
		private EntityRef<FileType> _FileType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnChatIdChanging(int value);
    partial void OnChatIdChanged();
    partial void OnFileTypeIdChanging(int value);
    partial void OnFileTypeIdChanged();
    partial void OnFileURLChanging(string value);
    partial void OnFileURLChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public ChatMultiMedia()
		{
			this._Chat = default(EntityRef<Chat>);
			this._FileType = default(EntityRef<FileType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChatId", DbType="Int NOT NULL")]
		public int ChatId
		{
			get
			{
				return this._ChatId;
			}
			set
			{
				if ((this._ChatId != value))
				{
					if (this._Chat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChatIdChanging(value);
					this.SendPropertyChanging();
					this._ChatId = value;
					this.SendPropertyChanged("ChatId");
					this.OnChatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileTypeId", DbType="Int NOT NULL")]
		public int FileTypeId
		{
			get
			{
				return this._FileTypeId;
			}
			set
			{
				if ((this._FileTypeId != value))
				{
					if (this._FileType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileTypeIdChanging(value);
					this.SendPropertyChanging();
					this._FileTypeId = value;
					this.SendPropertyChanged("FileTypeId");
					this.OnFileTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileURL", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string FileURL
		{
			get
			{
				return this._FileURL;
			}
			set
			{
				if ((this._FileURL != value))
				{
					this.OnFileURLChanging(value);
					this.SendPropertyChanging();
					this._FileURL = value;
					this.SendPropertyChanged("FileURL");
					this.OnFileURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chat_ChatMultiMedia", Storage="_Chat", ThisKey="ChatId", OtherKey="Id", IsForeignKey=true)]
		public Chat Chat
		{
			get
			{
				return this._Chat.Entity;
			}
			set
			{
				Chat previousValue = this._Chat.Entity;
				if (((previousValue != value) 
							|| (this._Chat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chat.Entity = null;
						previousValue.ChatMultiMedias.Remove(this);
					}
					this._Chat.Entity = value;
					if ((value != null))
					{
						value.ChatMultiMedias.Add(this);
						this._ChatId = value.Id;
					}
					else
					{
						this._ChatId = default(int);
					}
					this.SendPropertyChanged("Chat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileType_ChatMultiMedia", Storage="_FileType", ThisKey="FileTypeId", OtherKey="Id", IsForeignKey=true)]
		public FileType FileType
		{
			get
			{
				return this._FileType.Entity;
			}
			set
			{
				FileType previousValue = this._FileType.Entity;
				if (((previousValue != value) 
							|| (this._FileType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FileType.Entity = null;
						previousValue.ChatMultiMedias.Remove(this);
					}
					this._FileType.Entity = value;
					if ((value != null))
					{
						value.ChatMultiMedias.Add(this);
						this._FileTypeId = value.Id;
					}
					else
					{
						this._FileTypeId = default(int);
					}
					this.SendPropertyChanged("FileType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChatRoom")]
	public partial class ChatRoom : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ChatRoomId;
		
		private System.DateTime _CreatedOnDate;
		
		private System.DateTime _LastConversationDate;
		
		private int _JobId;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private int _UserId1;
		
		private int _UserId2;
		
		private EntitySet<Chat> _Chats;
		
		private EntityRef<Job> _Job;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnChatRoomIdChanging(string value);
    partial void OnChatRoomIdChanged();
    partial void OnCreatedOnDateChanging(System.DateTime value);
    partial void OnCreatedOnDateChanged();
    partial void OnLastConversationDateChanging(System.DateTime value);
    partial void OnLastConversationDateChanged();
    partial void OnJobIdChanging(int value);
    partial void OnJobIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnUserId1Changing(int value);
    partial void OnUserId1Changed();
    partial void OnUserId2Changing(int value);
    partial void OnUserId2Changed();
    #endregion
		
		public ChatRoom()
		{
			this._Chats = new EntitySet<Chat>(new Action<Chat>(this.attach_Chats), new Action<Chat>(this.detach_Chats));
			this._Job = default(EntityRef<Job>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChatRoomId", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string ChatRoomId
		{
			get
			{
				return this._ChatRoomId;
			}
			set
			{
				if ((this._ChatRoomId != value))
				{
					this.OnChatRoomIdChanging(value);
					this.SendPropertyChanging();
					this._ChatRoomId = value;
					this.SendPropertyChanged("ChatRoomId");
					this.OnChatRoomIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOnDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOnDate
		{
			get
			{
				return this._CreatedOnDate;
			}
			set
			{
				if ((this._CreatedOnDate != value))
				{
					this.OnCreatedOnDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedOnDate = value;
					this.SendPropertyChanged("CreatedOnDate");
					this.OnCreatedOnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastConversationDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastConversationDate
		{
			get
			{
				return this._LastConversationDate;
			}
			set
			{
				if ((this._LastConversationDate != value))
				{
					this.OnLastConversationDateChanging(value);
					this.SendPropertyChanging();
					this._LastConversationDate = value;
					this.SendPropertyChanged("LastConversationDate");
					this.OnLastConversationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="Int NOT NULL")]
		public int JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId1", DbType="Int NOT NULL")]
		public int UserId1
		{
			get
			{
				return this._UserId1;
			}
			set
			{
				if ((this._UserId1 != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserId1Changing(value);
					this.SendPropertyChanging();
					this._UserId1 = value;
					this.SendPropertyChanged("UserId1");
					this.OnUserId1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId2", DbType="Int NOT NULL")]
		public int UserId2
		{
			get
			{
				return this._UserId2;
			}
			set
			{
				if ((this._UserId2 != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserId2Changing(value);
					this.SendPropertyChanging();
					this._UserId2 = value;
					this.SendPropertyChanged("UserId2");
					this.OnUserId2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChatRoom_Chat", Storage="_Chats", ThisKey="Id", OtherKey="ChatRoomId")]
		public EntitySet<Chat> Chats
		{
			get
			{
				return this._Chats;
			}
			set
			{
				this._Chats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_ChatRoom", Storage="_Job", ThisKey="JobId", OtherKey="Id", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.ChatRooms.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.ChatRooms.Add(this);
						this._JobId = value.Id;
					}
					else
					{
						this._JobId = default(int);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ChatRoom", Storage="_User", ThisKey="UserId1", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ChatRooms.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ChatRooms.Add(this);
						this._UserId1 = value.Id;
					}
					else
					{
						this._UserId1 = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ChatRoom1", Storage="_User1", ThisKey="UserId2", OtherKey="Id", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.ChatRooms1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.ChatRooms1.Add(this);
						this._UserId2 = value.Id;
					}
					else
					{
						this._UserId2 = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Chats(Chat entity)
		{
			this.SendPropertyChanging();
			entity.ChatRoom = this;
		}
		
		private void detach_Chats(Chat entity)
		{
			this.SendPropertyChanging();
			entity.ChatRoom = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChatType")]
	public partial class ChatType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ChatTypeName;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<Chat> _Chats;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnChatTypeNameChanging(string value);
    partial void OnChatTypeNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public ChatType()
		{
			this._Chats = new EntitySet<Chat>(new Action<Chat>(this.attach_Chats), new Action<Chat>(this.detach_Chats));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChatTypeName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string ChatTypeName
		{
			get
			{
				return this._ChatTypeName;
			}
			set
			{
				if ((this._ChatTypeName != value))
				{
					this.OnChatTypeNameChanging(value);
					this.SendPropertyChanging();
					this._ChatTypeName = value;
					this.SendPropertyChanged("ChatTypeName");
					this.OnChatTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ChatType_Chat", Storage="_Chats", ThisKey="Id", OtherKey="ChatTypeId")]
		public EntitySet<Chat> Chats
		{
			get
			{
				return this._Chats;
			}
			set
			{
				this._Chats.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Chats(Chat entity)
		{
			this.SendPropertyChanging();
			entity.ChatType = this;
		}
		
		private void detach_Chats(Chat entity)
		{
			this.SendPropertyChanging();
			entity.ChatType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cities")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ContryId;
		
		private int _StateId;
		
		private string _Name;
		
		private string _latitude;
		
		private string _longitude;
		
		private bool _IsActive;
		
		private EntitySet<Area> _Areas;
		
		private EntitySet<JobDetail> _JobDetails;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<State1> _State1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnContryIdChanging(int value);
    partial void OnContryIdChanged();
    partial void OnStateIdChanging(int value);
    partial void OnStateIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnlatitudeChanging(string value);
    partial void OnlatitudeChanged();
    partial void OnlongitudeChanging(string value);
    partial void OnlongitudeChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public City()
		{
			this._Areas = new EntitySet<Area>(new Action<Area>(this.attach_Areas), new Action<Area>(this.detach_Areas));
			this._JobDetails = new EntitySet<JobDetail>(new Action<JobDetail>(this.attach_JobDetails), new Action<JobDetail>(this.detach_JobDetails));
			this._Country = default(EntityRef<Country>);
			this._State1 = default(EntityRef<State1>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContryId", DbType="Int NOT NULL")]
		public int ContryId
		{
			get
			{
				return this._ContryId;
			}
			set
			{
				if ((this._ContryId != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContryIdChanging(value);
					this.SendPropertyChanging();
					this._ContryId = value;
					this.SendPropertyChanged("ContryId");
					this.OnContryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", DbType="Int NOT NULL")]
		public int StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					if (this._State1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		public string latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		public string longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Area", Storage="_Areas", ThisKey="Id", OtherKey="CityId")]
		public EntitySet<Area> Areas
		{
			get
			{
				return this._Areas;
			}
			set
			{
				this._Areas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_JobDetail", Storage="_JobDetails", ThisKey="Id", OtherKey="CityId")]
		public EntitySet<JobDetail> JobDetails
		{
			get
			{
				return this._JobDetails;
			}
			set
			{
				this._JobDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_City", Storage="_Country", ThisKey="ContryId", OtherKey="Id", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Cities.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Cities.Add(this);
						this._ContryId = value.Id;
					}
					else
					{
						this._ContryId = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State1_City", Storage="_State1", ThisKey="StateId", OtherKey="Id", IsForeignKey=true)]
		public State1 State1
		{
			get
			{
				return this._State1.Entity;
			}
			set
			{
				State1 previousValue = this._State1.Entity;
				if (((previousValue != value) 
							|| (this._State1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State1.Entity = null;
						previousValue.Cities.Remove(this);
					}
					this._State1.Entity = value;
					if ((value != null))
					{
						value.Cities.Add(this);
						this._StateId = value.Id;
					}
					else
					{
						this._StateId = default(int);
					}
					this.SendPropertyChanged("State1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Areas(Area entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Areas(Area entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
		
		private void attach_JobDetails(JobDetail entity)
		{
			this.SendPropertyChanging();
			entity.City1 = this;
		}
		
		private void detach_JobDetails(JobDetail entity)
		{
			this.SendPropertyChanging();
			entity.City1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Countries")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _iso3;
		
		private string _Language;
		
		private string _region;
		
		private string _subregion;
		
		private string _latitude;
		
		private string _longitude;
		
		private bool _IsActive;
		
		private EntitySet<City> _Cities;
		
		private EntitySet<JobDetail> _JobDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void Oniso3Changing(string value);
    partial void Oniso3Changed();
    partial void OnLanguageChanging(string value);
    partial void OnLanguageChanged();
    partial void OnregionChanging(string value);
    partial void OnregionChanged();
    partial void OnsubregionChanging(string value);
    partial void OnsubregionChanged();
    partial void OnlatitudeChanging(string value);
    partial void OnlatitudeChanged();
    partial void OnlongitudeChanging(string value);
    partial void OnlongitudeChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Country()
		{
			this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
			this._JobDetails = new EntitySet<JobDetail>(new Action<JobDetail>(this.attach_JobDetails), new Action<JobDetail>(this.detach_JobDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_iso3", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		public string iso3
		{
			get
			{
				return this._iso3;
			}
			set
			{
				if ((this._iso3 != value))
				{
					this.Oniso3Changing(value);
					this.SendPropertyChanging();
					this._iso3 = value;
					this.SendPropertyChanged("iso3");
					this.Oniso3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		public string Language
		{
			get
			{
				return this._Language;
			}
			set
			{
				if ((this._Language != value))
				{
					this.OnLanguageChanging(value);
					this.SendPropertyChanging();
					this._Language = value;
					this.SendPropertyChanged("Language");
					this.OnLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_region", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		public string region
		{
			get
			{
				return this._region;
			}
			set
			{
				if ((this._region != value))
				{
					this.OnregionChanging(value);
					this.SendPropertyChanging();
					this._region = value;
					this.SendPropertyChanged("region");
					this.OnregionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subregion", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		public string subregion
		{
			get
			{
				return this._subregion;
			}
			set
			{
				if ((this._subregion != value))
				{
					this.OnsubregionChanging(value);
					this.SendPropertyChanging();
					this._subregion = value;
					this.SendPropertyChanged("subregion");
					this.OnsubregionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_latitude", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		public string latitude
		{
			get
			{
				return this._latitude;
			}
			set
			{
				if ((this._latitude != value))
				{
					this.OnlatitudeChanging(value);
					this.SendPropertyChanging();
					this._latitude = value;
					this.SendPropertyChanged("latitude");
					this.OnlatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_longitude", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		public string longitude
		{
			get
			{
				return this._longitude;
			}
			set
			{
				if ((this._longitude != value))
				{
					this.OnlongitudeChanging(value);
					this.SendPropertyChanging();
					this._longitude = value;
					this.SendPropertyChanged("longitude");
					this.OnlongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_City", Storage="_Cities", ThisKey="Id", OtherKey="ContryId")]
		public EntitySet<City> Cities
		{
			get
			{
				return this._Cities;
			}
			set
			{
				this._Cities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_JobDetail", Storage="_JobDetails", ThisKey="Id", OtherKey="CountryId")]
		public EntitySet<JobDetail> JobDetails
		{
			get
			{
				return this._JobDetails;
			}
			set
			{
				this._JobDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_JobDetails(JobDetail entity)
		{
			this.SendPropertyChanging();
			entity.Country1 = this;
		}
		
		private void detach_JobDetails(JobDetail entity)
		{
			this.SendPropertyChanging();
			entity.Country1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmailConfiguration")]
	public partial class EmailConfiguration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private int _UserIdLastConfigured;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<UserEmailConfiguration> _UserEmailConfigurations;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserIdLastConfiguredChanging(int value);
    partial void OnUserIdLastConfiguredChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public EmailConfiguration()
		{
			this._UserEmailConfigurations = new EntitySet<UserEmailConfiguration>(new Action<UserEmailConfiguration>(this.attach_UserEmailConfigurations), new Action<UserEmailConfiguration>(this.detach_UserEmailConfigurations));
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIdLastConfigured", DbType="Int NOT NULL")]
		public int UserIdLastConfigured
		{
			get
			{
				return this._UserIdLastConfigured;
			}
			set
			{
				if ((this._UserIdLastConfigured != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdLastConfiguredChanging(value);
					this.SendPropertyChanging();
					this._UserIdLastConfigured = value;
					this.SendPropertyChanged("UserIdLastConfigured");
					this.OnUserIdLastConfiguredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmailConfiguration_UserEmailConfiguration", Storage="_UserEmailConfigurations", ThisKey="Id", OtherKey="EmailConfigurationId")]
		public EntitySet<UserEmailConfiguration> UserEmailConfigurations
		{
			get
			{
				return this._UserEmailConfigurations;
			}
			set
			{
				this._UserEmailConfigurations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EmailConfiguration", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.EmailConfigurations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.EmailConfigurations.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EmailConfiguration1", Storage="_User1", ThisKey="UserIdLastConfigured", OtherKey="Id", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.EmailConfigurations1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.EmailConfigurations1.Add(this);
						this._UserIdLastConfigured = value.Id;
					}
					else
					{
						this._UserIdLastConfigured = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserEmailConfigurations(UserEmailConfiguration entity)
		{
			this.SendPropertyChanging();
			entity.EmailConfiguration = this;
		}
		
		private void detach_UserEmailConfigurations(UserEmailConfiguration entity)
		{
			this.SendPropertyChanging();
			entity.EmailConfiguration = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmailConfigurationOption")]
	public partial class EmailConfigurationOption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _OptionName;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<UserEmailConfiguration> _UserEmailConfigurations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOptionNameChanging(string value);
    partial void OnOptionNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public EmailConfigurationOption()
		{
			this._UserEmailConfigurations = new EntitySet<UserEmailConfiguration>(new Action<UserEmailConfiguration>(this.attach_UserEmailConfigurations), new Action<UserEmailConfiguration>(this.detach_UserEmailConfigurations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OptionName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string OptionName
		{
			get
			{
				return this._OptionName;
			}
			set
			{
				if ((this._OptionName != value))
				{
					this.OnOptionNameChanging(value);
					this.SendPropertyChanging();
					this._OptionName = value;
					this.SendPropertyChanged("OptionName");
					this.OnOptionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmailConfigurationOption_UserEmailConfiguration", Storage="_UserEmailConfigurations", ThisKey="Id", OtherKey="EmailConfigurationOptionId")]
		public EntitySet<UserEmailConfiguration> UserEmailConfigurations
		{
			get
			{
				return this._UserEmailConfigurations;
			}
			set
			{
				this._UserEmailConfigurations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserEmailConfigurations(UserEmailConfiguration entity)
		{
			this.SendPropertyChanging();
			entity.EmailConfigurationOption = this;
		}
		
		private void detach_UserEmailConfigurations(UserEmailConfiguration entity)
		{
			this.SendPropertyChanging();
			entity.EmailConfigurationOption = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmailTemplate")]
	public partial class EmailTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _TemplateText;
		
		private int _TemplateTypeId;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private int _JobId;
		
		private System.DateTime _AddedOn;
		
		private string _Subject;
		
		private EntityRef<EmailTemplateType> _EmailTemplateType;
		
		private EntityRef<Job> _Job;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTemplateTextChanging(string value);
    partial void OnTemplateTextChanged();
    partial void OnTemplateTypeIdChanging(int value);
    partial void OnTemplateTypeIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnJobIdChanging(int value);
    partial void OnJobIdChanged();
    partial void OnAddedOnChanging(System.DateTime value);
    partial void OnAddedOnChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    #endregion
		
		public EmailTemplate()
		{
			this._EmailTemplateType = default(EntityRef<EmailTemplateType>);
			this._Job = default(EntityRef<Job>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string TemplateText
		{
			get
			{
				return this._TemplateText;
			}
			set
			{
				if ((this._TemplateText != value))
				{
					this.OnTemplateTextChanging(value);
					this.SendPropertyChanging();
					this._TemplateText = value;
					this.SendPropertyChanged("TemplateText");
					this.OnTemplateTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateTypeId", DbType="Int NOT NULL")]
		public int TemplateTypeId
		{
			get
			{
				return this._TemplateTypeId;
			}
			set
			{
				if ((this._TemplateTypeId != value))
				{
					if (this._EmailTemplateType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTemplateTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TemplateTypeId = value;
					this.SendPropertyChanged("TemplateTypeId");
					this.OnTemplateTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="Int NOT NULL")]
		public int JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedOn", DbType="DateTime NOT NULL")]
		public System.DateTime AddedOn
		{
			get
			{
				return this._AddedOn;
			}
			set
			{
				if ((this._AddedOn != value))
				{
					this.OnAddedOnChanging(value);
					this.SendPropertyChanging();
					this._AddedOn = value;
					this.SendPropertyChanged("AddedOn");
					this.OnAddedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmailTemplateType_EmailTemplate", Storage="_EmailTemplateType", ThisKey="TemplateTypeId", OtherKey="Id", IsForeignKey=true)]
		public EmailTemplateType EmailTemplateType
		{
			get
			{
				return this._EmailTemplateType.Entity;
			}
			set
			{
				EmailTemplateType previousValue = this._EmailTemplateType.Entity;
				if (((previousValue != value) 
							|| (this._EmailTemplateType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmailTemplateType.Entity = null;
						previousValue.EmailTemplates.Remove(this);
					}
					this._EmailTemplateType.Entity = value;
					if ((value != null))
					{
						value.EmailTemplates.Add(this);
						this._TemplateTypeId = value.Id;
					}
					else
					{
						this._TemplateTypeId = default(int);
					}
					this.SendPropertyChanged("EmailTemplateType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_EmailTemplate", Storage="_Job", ThisKey="JobId", OtherKey="Id", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.EmailTemplates.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.EmailTemplates.Add(this);
						this._JobId = value.Id;
					}
					else
					{
						this._JobId = default(int);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmailTemplateType")]
	public partial class EmailTemplateType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _TemplateTypeName;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<EmailTemplate> _EmailTemplates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTemplateTypeNameChanging(string value);
    partial void OnTemplateTypeNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public EmailTemplateType()
		{
			this._EmailTemplates = new EntitySet<EmailTemplate>(new Action<EmailTemplate>(this.attach_EmailTemplates), new Action<EmailTemplate>(this.detach_EmailTemplates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateTypeName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string TemplateTypeName
		{
			get
			{
				return this._TemplateTypeName;
			}
			set
			{
				if ((this._TemplateTypeName != value))
				{
					this.OnTemplateTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TemplateTypeName = value;
					this.SendPropertyChanged("TemplateTypeName");
					this.OnTemplateTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmailTemplateType_EmailTemplate", Storage="_EmailTemplates", ThisKey="Id", OtherKey="TemplateTypeId")]
		public EntitySet<EmailTemplate> EmailTemplates
		{
			get
			{
				return this._EmailTemplates;
			}
			set
			{
				this._EmailTemplates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmailTemplates(EmailTemplate entity)
		{
			this.SendPropertyChanging();
			entity.EmailTemplateType = this;
		}
		
		private void detach_EmailTemplates(EmailTemplate entity)
		{
			this.SendPropertyChanging();
			entity.EmailTemplateType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExpressCategories")]
	public partial class ExpressCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CatId;
		
		private int _SubCatId;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private int _CatType;
		
		private EntitySet<AgentExpressService> _AgentExpressServices;
		
		private EntitySet<ExpressJob> _ExpressJobs;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<SubCategory> _SubCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCatIdChanging(int value);
    partial void OnCatIdChanged();
    partial void OnSubCatIdChanging(int value);
    partial void OnSubCatIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnCatTypeChanging(int value);
    partial void OnCatTypeChanged();
    #endregion
		
		public ExpressCategory()
		{
			this._AgentExpressServices = new EntitySet<AgentExpressService>(new Action<AgentExpressService>(this.attach_AgentExpressServices), new Action<AgentExpressService>(this.detach_AgentExpressServices));
			this._ExpressJobs = new EntitySet<ExpressJob>(new Action<ExpressJob>(this.attach_ExpressJobs), new Action<ExpressJob>(this.detach_ExpressJobs));
			this._Category = default(EntityRef<Category>);
			this._SubCategory = default(EntityRef<SubCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatId", DbType="Int NOT NULL")]
		public int CatId
		{
			get
			{
				return this._CatId;
			}
			set
			{
				if ((this._CatId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCatIdChanging(value);
					this.SendPropertyChanging();
					this._CatId = value;
					this.SendPropertyChanged("CatId");
					this.OnCatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCatId", DbType="Int NOT NULL")]
		public int SubCatId
		{
			get
			{
				return this._SubCatId;
			}
			set
			{
				if ((this._SubCatId != value))
				{
					if (this._SubCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubCatIdChanging(value);
					this.SendPropertyChanging();
					this._SubCatId = value;
					this.SendPropertyChanged("SubCatId");
					this.OnSubCatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatType", DbType="Int NOT NULL")]
		public int CatType
		{
			get
			{
				return this._CatType;
			}
			set
			{
				if ((this._CatType != value))
				{
					this.OnCatTypeChanging(value);
					this.SendPropertyChanging();
					this._CatType = value;
					this.SendPropertyChanged("CatType");
					this.OnCatTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExpressCategory_AgentExpressService", Storage="_AgentExpressServices", ThisKey="Id", OtherKey="ExpressCategoryId")]
		public EntitySet<AgentExpressService> AgentExpressServices
		{
			get
			{
				return this._AgentExpressServices;
			}
			set
			{
				this._AgentExpressServices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExpressCategory_ExpressJob", Storage="_ExpressJobs", ThisKey="Id", OtherKey="ExpressCategoryId")]
		public EntitySet<ExpressJob> ExpressJobs
		{
			get
			{
				return this._ExpressJobs;
			}
			set
			{
				this._ExpressJobs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_ExpressCategory", Storage="_Category", ThisKey="CatId", OtherKey="Id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.ExpressCategories.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.ExpressCategories.Add(this);
						this._CatId = value.Id;
					}
					else
					{
						this._CatId = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubCategory_ExpressCategory", Storage="_SubCategory", ThisKey="SubCatId", OtherKey="Id", IsForeignKey=true)]
		public SubCategory SubCategory
		{
			get
			{
				return this._SubCategory.Entity;
			}
			set
			{
				SubCategory previousValue = this._SubCategory.Entity;
				if (((previousValue != value) 
							|| (this._SubCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubCategory.Entity = null;
						previousValue.ExpressCategories.Remove(this);
					}
					this._SubCategory.Entity = value;
					if ((value != null))
					{
						value.ExpressCategories.Add(this);
						this._SubCatId = value.Id;
					}
					else
					{
						this._SubCatId = default(int);
					}
					this.SendPropertyChanged("SubCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AgentExpressServices(AgentExpressService entity)
		{
			this.SendPropertyChanging();
			entity.ExpressCategory = this;
		}
		
		private void detach_AgentExpressServices(AgentExpressService entity)
		{
			this.SendPropertyChanging();
			entity.ExpressCategory = null;
		}
		
		private void attach_ExpressJobs(ExpressJob entity)
		{
			this.SendPropertyChanging();
			entity.ExpressCategory = this;
		}
		
		private void detach_ExpressJobs(ExpressJob entity)
		{
			this.SendPropertyChanging();
			entity.ExpressCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExpressJobBids")]
	public partial class ExpressJobBid : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private int _ExpressJobId;
		
		private int _BidStatusId;
		
		private System.DateTime _BidOnDate;
		
		private System.Nullable<System.DateTime> _ArrivalTime;
		
		private string _Comments;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private System.Nullable<System.DateTime> _AwardedOn;
		
		private System.Nullable<bool> _ArriveBefore;
		
		private EntityRef<BidStatus> _BidStatus;
		
		private EntityRef<ExpressJob> _ExpressJob;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnExpressJobIdChanging(int value);
    partial void OnExpressJobIdChanged();
    partial void OnBidStatusIdChanging(int value);
    partial void OnBidStatusIdChanged();
    partial void OnBidOnDateChanging(System.DateTime value);
    partial void OnBidOnDateChanged();
    partial void OnArrivalTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnArrivalTimeChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnAwardedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnAwardedOnChanged();
    partial void OnArriveBeforeChanging(System.Nullable<bool> value);
    partial void OnArriveBeforeChanged();
    #endregion
		
		public ExpressJobBid()
		{
			this._BidStatus = default(EntityRef<BidStatus>);
			this._ExpressJob = default(EntityRef<ExpressJob>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpressJobId", DbType="Int NOT NULL")]
		public int ExpressJobId
		{
			get
			{
				return this._ExpressJobId;
			}
			set
			{
				if ((this._ExpressJobId != value))
				{
					if (this._ExpressJob.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExpressJobIdChanging(value);
					this.SendPropertyChanging();
					this._ExpressJobId = value;
					this.SendPropertyChanged("ExpressJobId");
					this.OnExpressJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BidStatusId", DbType="Int NOT NULL")]
		public int BidStatusId
		{
			get
			{
				return this._BidStatusId;
			}
			set
			{
				if ((this._BidStatusId != value))
				{
					if (this._BidStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBidStatusIdChanging(value);
					this.SendPropertyChanging();
					this._BidStatusId = value;
					this.SendPropertyChanged("BidStatusId");
					this.OnBidStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BidOnDate", DbType="DateTime NOT NULL")]
		public System.DateTime BidOnDate
		{
			get
			{
				return this._BidOnDate;
			}
			set
			{
				if ((this._BidOnDate != value))
				{
					this.OnBidOnDateChanging(value);
					this.SendPropertyChanging();
					this._BidOnDate = value;
					this.SendPropertyChanged("BidOnDate");
					this.OnBidOnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArrivalTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ArrivalTime
		{
			get
			{
				return this._ArrivalTime;
			}
			set
			{
				if ((this._ArrivalTime != value))
				{
					this.OnArrivalTimeChanging(value);
					this.SendPropertyChanging();
					this._ArrivalTime = value;
					this.SendPropertyChanged("ArrivalTime");
					this.OnArrivalTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="NVarChar(3000)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwardedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> AwardedOn
		{
			get
			{
				return this._AwardedOn;
			}
			set
			{
				if ((this._AwardedOn != value))
				{
					this.OnAwardedOnChanging(value);
					this.SendPropertyChanging();
					this._AwardedOn = value;
					this.SendPropertyChanged("AwardedOn");
					this.OnAwardedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArriveBefore", DbType="Bit")]
		public System.Nullable<bool> ArriveBefore
		{
			get
			{
				return this._ArriveBefore;
			}
			set
			{
				if ((this._ArriveBefore != value))
				{
					this.OnArriveBeforeChanging(value);
					this.SendPropertyChanging();
					this._ArriveBefore = value;
					this.SendPropertyChanged("ArriveBefore");
					this.OnArriveBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BidStatus_ExpressJobBid", Storage="_BidStatus", ThisKey="BidStatusId", OtherKey="Id", IsForeignKey=true)]
		public BidStatus BidStatus
		{
			get
			{
				return this._BidStatus.Entity;
			}
			set
			{
				BidStatus previousValue = this._BidStatus.Entity;
				if (((previousValue != value) 
							|| (this._BidStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BidStatus.Entity = null;
						previousValue.ExpressJobBids.Remove(this);
					}
					this._BidStatus.Entity = value;
					if ((value != null))
					{
						value.ExpressJobBids.Add(this);
						this._BidStatusId = value.Id;
					}
					else
					{
						this._BidStatusId = default(int);
					}
					this.SendPropertyChanged("BidStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExpressJob_ExpressJobBid", Storage="_ExpressJob", ThisKey="ExpressJobId", OtherKey="Id", IsForeignKey=true)]
		public ExpressJob ExpressJob
		{
			get
			{
				return this._ExpressJob.Entity;
			}
			set
			{
				ExpressJob previousValue = this._ExpressJob.Entity;
				if (((previousValue != value) 
							|| (this._ExpressJob.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExpressJob.Entity = null;
						previousValue.ExpressJobBids.Remove(this);
					}
					this._ExpressJob.Entity = value;
					if ((value != null))
					{
						value.ExpressJobBids.Add(this);
						this._ExpressJobId = value.Id;
					}
					else
					{
						this._ExpressJobId = default(int);
					}
					this.SendPropertyChanged("ExpressJob");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ExpressJobBid", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ExpressJobBids.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ExpressJobBids.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExpressJobs")]
	public partial class ExpressJob : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _JobName;
		
		private int _UserId;
		
		private int _ExpressCategoryId;
		
		private string _Address;
		
		private string _ContactNumber;
		
		private string _DeliverTo;
		
		private System.Nullable<System.DateTime> _FromDateTime;
		
		private System.Nullable<int> _RequiredHours;
		
		private System.Nullable<int> _JobStatusId;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private System.DateTime _PostedOn;
		
		private string _MapCordinates;
		
		private string _JobID;
		
		private System.Nullable<bool> _NeedServiceSoon;
		
		private System.Nullable<bool> _NeedServiceAt;
		
		private System.Nullable<System.DateTime> _SerivceTime;
		
		private EntitySet<ExpressJobBid> _ExpressJobBids;
		
		private EntityRef<ExpressCategory> _ExpressCategory;
		
		private EntityRef<JobStatus> _JobStatus;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnJobNameChanging(string value);
    partial void OnJobNameChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnExpressCategoryIdChanging(int value);
    partial void OnExpressCategoryIdChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnContactNumberChanging(string value);
    partial void OnContactNumberChanged();
    partial void OnDeliverToChanging(string value);
    partial void OnDeliverToChanged();
    partial void OnFromDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnFromDateTimeChanged();
    partial void OnRequiredHoursChanging(System.Nullable<int> value);
    partial void OnRequiredHoursChanged();
    partial void OnJobStatusIdChanging(System.Nullable<int> value);
    partial void OnJobStatusIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnPostedOnChanging(System.DateTime value);
    partial void OnPostedOnChanged();
    partial void OnMapCordinatesChanging(string value);
    partial void OnMapCordinatesChanged();
    partial void OnJobIDChanging(string value);
    partial void OnJobIDChanged();
    partial void OnNeedServiceSoonChanging(System.Nullable<bool> value);
    partial void OnNeedServiceSoonChanged();
    partial void OnNeedServiceAtChanging(System.Nullable<bool> value);
    partial void OnNeedServiceAtChanged();
    partial void OnSerivceTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnSerivceTimeChanged();
    #endregion
		
		public ExpressJob()
		{
			this._ExpressJobBids = new EntitySet<ExpressJobBid>(new Action<ExpressJobBid>(this.attach_ExpressJobBids), new Action<ExpressJobBid>(this.detach_ExpressJobBids));
			this._ExpressCategory = default(EntityRef<ExpressCategory>);
			this._JobStatus = default(EntityRef<JobStatus>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string JobName
		{
			get
			{
				return this._JobName;
			}
			set
			{
				if ((this._JobName != value))
				{
					this.OnJobNameChanging(value);
					this.SendPropertyChanging();
					this._JobName = value;
					this.SendPropertyChanged("JobName");
					this.OnJobNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpressCategoryId", DbType="Int NOT NULL")]
		public int ExpressCategoryId
		{
			get
			{
				return this._ExpressCategoryId;
			}
			set
			{
				if ((this._ExpressCategoryId != value))
				{
					if (this._ExpressCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExpressCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._ExpressCategoryId = value;
					this.SendPropertyChanged("ExpressCategoryId");
					this.OnExpressCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNumber", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ContactNumber
		{
			get
			{
				return this._ContactNumber;
			}
			set
			{
				if ((this._ContactNumber != value))
				{
					this.OnContactNumberChanging(value);
					this.SendPropertyChanging();
					this._ContactNumber = value;
					this.SendPropertyChanged("ContactNumber");
					this.OnContactNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliverTo", DbType="NVarChar(1600)")]
		public string DeliverTo
		{
			get
			{
				return this._DeliverTo;
			}
			set
			{
				if ((this._DeliverTo != value))
				{
					this.OnDeliverToChanging(value);
					this.SendPropertyChanging();
					this._DeliverTo = value;
					this.SendPropertyChanged("DeliverTo");
					this.OnDeliverToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> FromDateTime
		{
			get
			{
				return this._FromDateTime;
			}
			set
			{
				if ((this._FromDateTime != value))
				{
					this.OnFromDateTimeChanging(value);
					this.SendPropertyChanging();
					this._FromDateTime = value;
					this.SendPropertyChanged("FromDateTime");
					this.OnFromDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequiredHours", DbType="Int")]
		public System.Nullable<int> RequiredHours
		{
			get
			{
				return this._RequiredHours;
			}
			set
			{
				if ((this._RequiredHours != value))
				{
					this.OnRequiredHoursChanging(value);
					this.SendPropertyChanging();
					this._RequiredHours = value;
					this.SendPropertyChanged("RequiredHours");
					this.OnRequiredHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobStatusId", DbType="Int")]
		public System.Nullable<int> JobStatusId
		{
			get
			{
				return this._JobStatusId;
			}
			set
			{
				if ((this._JobStatusId != value))
				{
					if (this._JobStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobStatusIdChanging(value);
					this.SendPropertyChanging();
					this._JobStatusId = value;
					this.SendPropertyChanged("JobStatusId");
					this.OnJobStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostedOn", DbType="DateTime NOT NULL")]
		public System.DateTime PostedOn
		{
			get
			{
				return this._PostedOn;
			}
			set
			{
				if ((this._PostedOn != value))
				{
					this.OnPostedOnChanging(value);
					this.SendPropertyChanging();
					this._PostedOn = value;
					this.SendPropertyChanged("PostedOn");
					this.OnPostedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapCordinates", DbType="NVarChar(2000)")]
		public string MapCordinates
		{
			get
			{
				return this._MapCordinates;
			}
			set
			{
				if ((this._MapCordinates != value))
				{
					this.OnMapCordinatesChanging(value);
					this.SendPropertyChanging();
					this._MapCordinates = value;
					this.SendPropertyChanged("MapCordinates");
					this.OnMapCordinatesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="NVarChar(60)")]
		public string JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NeedServiceSoon", DbType="Bit")]
		public System.Nullable<bool> NeedServiceSoon
		{
			get
			{
				return this._NeedServiceSoon;
			}
			set
			{
				if ((this._NeedServiceSoon != value))
				{
					this.OnNeedServiceSoonChanging(value);
					this.SendPropertyChanging();
					this._NeedServiceSoon = value;
					this.SendPropertyChanged("NeedServiceSoon");
					this.OnNeedServiceSoonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NeedServiceAt", DbType="Bit")]
		public System.Nullable<bool> NeedServiceAt
		{
			get
			{
				return this._NeedServiceAt;
			}
			set
			{
				if ((this._NeedServiceAt != value))
				{
					this.OnNeedServiceAtChanging(value);
					this.SendPropertyChanging();
					this._NeedServiceAt = value;
					this.SendPropertyChanged("NeedServiceAt");
					this.OnNeedServiceAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerivceTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> SerivceTime
		{
			get
			{
				return this._SerivceTime;
			}
			set
			{
				if ((this._SerivceTime != value))
				{
					this.OnSerivceTimeChanging(value);
					this.SendPropertyChanging();
					this._SerivceTime = value;
					this.SendPropertyChanged("SerivceTime");
					this.OnSerivceTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExpressJob_ExpressJobBid", Storage="_ExpressJobBids", ThisKey="Id", OtherKey="ExpressJobId")]
		public EntitySet<ExpressJobBid> ExpressJobBids
		{
			get
			{
				return this._ExpressJobBids;
			}
			set
			{
				this._ExpressJobBids.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExpressCategory_ExpressJob", Storage="_ExpressCategory", ThisKey="ExpressCategoryId", OtherKey="Id", IsForeignKey=true)]
		public ExpressCategory ExpressCategory
		{
			get
			{
				return this._ExpressCategory.Entity;
			}
			set
			{
				ExpressCategory previousValue = this._ExpressCategory.Entity;
				if (((previousValue != value) 
							|| (this._ExpressCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExpressCategory.Entity = null;
						previousValue.ExpressJobs.Remove(this);
					}
					this._ExpressCategory.Entity = value;
					if ((value != null))
					{
						value.ExpressJobs.Add(this);
						this._ExpressCategoryId = value.Id;
					}
					else
					{
						this._ExpressCategoryId = default(int);
					}
					this.SendPropertyChanged("ExpressCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobStatus_ExpressJob", Storage="_JobStatus", ThisKey="JobStatusId", OtherKey="Id", IsForeignKey=true)]
		public JobStatus JobStatus
		{
			get
			{
				return this._JobStatus.Entity;
			}
			set
			{
				JobStatus previousValue = this._JobStatus.Entity;
				if (((previousValue != value) 
							|| (this._JobStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobStatus.Entity = null;
						previousValue.ExpressJobs.Remove(this);
					}
					this._JobStatus.Entity = value;
					if ((value != null))
					{
						value.ExpressJobs.Add(this);
						this._JobStatusId = value.Id;
					}
					else
					{
						this._JobStatusId = default(Nullable<int>);
					}
					this.SendPropertyChanged("JobStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ExpressJob", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ExpressJobs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ExpressJobs.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExpressJobBids(ExpressJobBid entity)
		{
			this.SendPropertyChanging();
			entity.ExpressJob = this;
		}
		
		private void detach_ExpressJobBids(ExpressJobBid entity)
		{
			this.SendPropertyChanging();
			entity.ExpressJob = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FileType")]
	public partial class FileType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FileTypeName;
		
		private System.Nullable<double> _MaxfileSize;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<ChatMultiMedia> _ChatMultiMedias;
		
		private EntitySet<JobAttachment> _JobAttachments;
		
		private EntitySet<UserPortfolio> _UserPortfolios;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFileTypeNameChanging(string value);
    partial void OnFileTypeNameChanged();
    partial void OnMaxfileSizeChanging(System.Nullable<double> value);
    partial void OnMaxfileSizeChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public FileType()
		{
			this._ChatMultiMedias = new EntitySet<ChatMultiMedia>(new Action<ChatMultiMedia>(this.attach_ChatMultiMedias), new Action<ChatMultiMedia>(this.detach_ChatMultiMedias));
			this._JobAttachments = new EntitySet<JobAttachment>(new Action<JobAttachment>(this.attach_JobAttachments), new Action<JobAttachment>(this.detach_JobAttachments));
			this._UserPortfolios = new EntitySet<UserPortfolio>(new Action<UserPortfolio>(this.attach_UserPortfolios), new Action<UserPortfolio>(this.detach_UserPortfolios));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileTypeName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string FileTypeName
		{
			get
			{
				return this._FileTypeName;
			}
			set
			{
				if ((this._FileTypeName != value))
				{
					this.OnFileTypeNameChanging(value);
					this.SendPropertyChanging();
					this._FileTypeName = value;
					this.SendPropertyChanged("FileTypeName");
					this.OnFileTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxfileSize", DbType="Float")]
		public System.Nullable<double> MaxfileSize
		{
			get
			{
				return this._MaxfileSize;
			}
			set
			{
				if ((this._MaxfileSize != value))
				{
					this.OnMaxfileSizeChanging(value);
					this.SendPropertyChanging();
					this._MaxfileSize = value;
					this.SendPropertyChanged("MaxfileSize");
					this.OnMaxfileSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileType_ChatMultiMedia", Storage="_ChatMultiMedias", ThisKey="Id", OtherKey="FileTypeId")]
		public EntitySet<ChatMultiMedia> ChatMultiMedias
		{
			get
			{
				return this._ChatMultiMedias;
			}
			set
			{
				this._ChatMultiMedias.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileType_JobAttachment", Storage="_JobAttachments", ThisKey="Id", OtherKey="FileTypeId")]
		public EntitySet<JobAttachment> JobAttachments
		{
			get
			{
				return this._JobAttachments;
			}
			set
			{
				this._JobAttachments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileType_UserPortfolio", Storage="_UserPortfolios", ThisKey="Id", OtherKey="FileTypeId")]
		public EntitySet<UserPortfolio> UserPortfolios
		{
			get
			{
				return this._UserPortfolios;
			}
			set
			{
				this._UserPortfolios.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChatMultiMedias(ChatMultiMedia entity)
		{
			this.SendPropertyChanging();
			entity.FileType = this;
		}
		
		private void detach_ChatMultiMedias(ChatMultiMedia entity)
		{
			this.SendPropertyChanging();
			entity.FileType = null;
		}
		
		private void attach_JobAttachments(JobAttachment entity)
		{
			this.SendPropertyChanging();
			entity.FileType = this;
		}
		
		private void detach_JobAttachments(JobAttachment entity)
		{
			this.SendPropertyChanging();
			entity.FileType = null;
		}
		
		private void attach_UserPortfolios(UserPortfolio entity)
		{
			this.SendPropertyChanging();
			entity.FileType = this;
		}
		
		private void detach_UserPortfolios(UserPortfolio entity)
		{
			this.SendPropertyChanging();
			entity.FileType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Furniture")]
	public partial class Furniture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FurnitureName;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<FurnitureDropDownOption> _FurnitureDropDownOptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFurnitureNameChanging(string value);
    partial void OnFurnitureNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Furniture()
		{
			this._FurnitureDropDownOptions = new EntitySet<FurnitureDropDownOption>(new Action<FurnitureDropDownOption>(this.attach_FurnitureDropDownOptions), new Action<FurnitureDropDownOption>(this.detach_FurnitureDropDownOptions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FurnitureName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string FurnitureName
		{
			get
			{
				return this._FurnitureName;
			}
			set
			{
				if ((this._FurnitureName != value))
				{
					this.OnFurnitureNameChanging(value);
					this.SendPropertyChanging();
					this._FurnitureName = value;
					this.SendPropertyChanged("FurnitureName");
					this.OnFurnitureNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Furniture_FurnitureDropDownOption", Storage="_FurnitureDropDownOptions", ThisKey="Id", OtherKey="FurnitureId")]
		public EntitySet<FurnitureDropDownOption> FurnitureDropDownOptions
		{
			get
			{
				return this._FurnitureDropDownOptions;
			}
			set
			{
				this._FurnitureDropDownOptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FurnitureDropDownOptions(FurnitureDropDownOption entity)
		{
			this.SendPropertyChanging();
			entity.Furniture = this;
		}
		
		private void detach_FurnitureDropDownOptions(FurnitureDropDownOption entity)
		{
			this.SendPropertyChanging();
			entity.Furniture = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FurnitureDropDownOptions")]
	public partial class FurnitureDropDownOption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _FurnitureId;
		
		private string _DropDownOption;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntityRef<Furniture> _Furniture;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFurnitureIdChanging(int value);
    partial void OnFurnitureIdChanged();
    partial void OnDropDownOptionChanging(string value);
    partial void OnDropDownOptionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public FurnitureDropDownOption()
		{
			this._Furniture = default(EntityRef<Furniture>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FurnitureId", DbType="Int NOT NULL")]
		public int FurnitureId
		{
			get
			{
				return this._FurnitureId;
			}
			set
			{
				if ((this._FurnitureId != value))
				{
					if (this._Furniture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFurnitureIdChanging(value);
					this.SendPropertyChanging();
					this._FurnitureId = value;
					this.SendPropertyChanged("FurnitureId");
					this.OnFurnitureIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DropDownOption", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string DropDownOption
		{
			get
			{
				return this._DropDownOption;
			}
			set
			{
				if ((this._DropDownOption != value))
				{
					this.OnDropDownOptionChanging(value);
					this.SendPropertyChanging();
					this._DropDownOption = value;
					this.SendPropertyChanged("DropDownOption");
					this.OnDropDownOptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Furniture_FurnitureDropDownOption", Storage="_Furniture", ThisKey="FurnitureId", OtherKey="Id", IsForeignKey=true)]
		public Furniture Furniture
		{
			get
			{
				return this._Furniture.Entity;
			}
			set
			{
				Furniture previousValue = this._Furniture.Entity;
				if (((previousValue != value) 
							|| (this._Furniture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Furniture.Entity = null;
						previousValue.FurnitureDropDownOptions.Remove(this);
					}
					this._Furniture.Entity = value;
					if ((value != null))
					{
						value.FurnitureDropDownOptions.Add(this);
						this._FurnitureId = value.Id;
					}
					else
					{
						this._FurnitureId = default(int);
					}
					this.SendPropertyChanged("Furniture");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HomeCategories")]
	public partial class HomeCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _SubCategoryId;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private System.Nullable<int> _OrderNumber;
		
		private EntityRef<SubCategory> _SubCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSubCategoryIdChanging(int value);
    partial void OnSubCategoryIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnOrderNumberChanging(System.Nullable<int> value);
    partial void OnOrderNumberChanged();
    #endregion
		
		public HomeCategory()
		{
			this._SubCategory = default(EntityRef<SubCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCategoryId", DbType="Int NOT NULL")]
		public int SubCategoryId
		{
			get
			{
				return this._SubCategoryId;
			}
			set
			{
				if ((this._SubCategoryId != value))
				{
					if (this._SubCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._SubCategoryId = value;
					this.SendPropertyChanged("SubCategoryId");
					this.OnSubCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNumber", DbType="Int")]
		public System.Nullable<int> OrderNumber
		{
			get
			{
				return this._OrderNumber;
			}
			set
			{
				if ((this._OrderNumber != value))
				{
					this.OnOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._OrderNumber = value;
					this.SendPropertyChanged("OrderNumber");
					this.OnOrderNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubCategory_HomeCategory", Storage="_SubCategory", ThisKey="SubCategoryId", OtherKey="Id", IsForeignKey=true)]
		public SubCategory SubCategory
		{
			get
			{
				return this._SubCategory.Entity;
			}
			set
			{
				SubCategory previousValue = this._SubCategory.Entity;
				if (((previousValue != value) 
							|| (this._SubCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubCategory.Entity = null;
						previousValue.HomeCategories.Remove(this);
					}
					this._SubCategory.Entity = value;
					if ((value != null))
					{
						value.HomeCategories.Add(this);
						this._SubCategoryId = value.Id;
					}
					else
					{
						this._SubCategoryId = default(int);
					}
					this.SendPropertyChanged("SubCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemKind")]
	public partial class ItemKind
	{
		
		private string _Id;
		
		private string _ItemKindName;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		public ItemKind()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemKindName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string ItemKindName
		{
			get
			{
				return this._ItemKindName;
			}
			set
			{
				if ((this._ItemKindName != value))
				{
					this._ItemKindName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this._IsActive = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this._IsDeleted = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobAttachment")]
	public partial class JobAttachment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _JobId;
		
		private int _UserId;
		
		private System.Nullable<int> _FileTypeId;
		
		private string _FileURl;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntityRef<FileType> _FileType;
		
		private EntityRef<Job> _Job;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnJobIdChanging(int value);
    partial void OnJobIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnFileTypeIdChanging(System.Nullable<int> value);
    partial void OnFileTypeIdChanged();
    partial void OnFileURlChanging(string value);
    partial void OnFileURlChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public JobAttachment()
		{
			this._FileType = default(EntityRef<FileType>);
			this._Job = default(EntityRef<Job>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="Int NOT NULL")]
		public int JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileTypeId", DbType="Int")]
		public System.Nullable<int> FileTypeId
		{
			get
			{
				return this._FileTypeId;
			}
			set
			{
				if ((this._FileTypeId != value))
				{
					if (this._FileType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileTypeIdChanging(value);
					this.SendPropertyChanging();
					this._FileTypeId = value;
					this.SendPropertyChanged("FileTypeId");
					this.OnFileTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileURl", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string FileURl
		{
			get
			{
				return this._FileURl;
			}
			set
			{
				if ((this._FileURl != value))
				{
					this.OnFileURlChanging(value);
					this.SendPropertyChanging();
					this._FileURl = value;
					this.SendPropertyChanged("FileURl");
					this.OnFileURlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileType_JobAttachment", Storage="_FileType", ThisKey="FileTypeId", OtherKey="Id", IsForeignKey=true)]
		public FileType FileType
		{
			get
			{
				return this._FileType.Entity;
			}
			set
			{
				FileType previousValue = this._FileType.Entity;
				if (((previousValue != value) 
							|| (this._FileType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FileType.Entity = null;
						previousValue.JobAttachments.Remove(this);
					}
					this._FileType.Entity = value;
					if ((value != null))
					{
						value.JobAttachments.Add(this);
						this._FileTypeId = value.Id;
					}
					else
					{
						this._FileTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("FileType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_JobAttachment", Storage="_Job", ThisKey="JobId", OtherKey="Id", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.JobAttachments.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.JobAttachments.Add(this);
						this._JobId = value.Id;
					}
					else
					{
						this._JobId = default(int);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_JobAttachment", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.JobAttachments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.JobAttachments.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobDetail")]
	public partial class JobDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _JobId;
		
		private System.Nullable<int> _UserId;
		
		private string _CustomValue;
		
		private System.Nullable<int> _TypeOfPropertyId;
		
		private System.Nullable<int> _NumberOfRooms;
		
		private System.Nullable<bool> _IsIncludeCeiling;
		
		private string _RoomSize;
		
		private string _GardenSize;
		
		private string _SizeType;
		
		private string _Country;
		
		private string _City;
		
		private string _Location;
		
		private string _CountryTo;
		
		private string _CityTo;
		
		private string _LocationTo;
		
		private System.Nullable<int> _ResidenceTypeId;
		
		private string _ResidenceSqrf;
		
		private System.Nullable<int> _ResidenceToTypeId;
		
		private string _ResidenceToSqrf;
		
		private System.Nullable<int> _NumberOfBedroom;
		
		private System.Nullable<bool> _IsDomestic;
		
		private System.Nullable<bool> _IsInternational;
		
		private string _ParcelType;
		
		private string _Weight;
		
		private System.Nullable<System.DateTime> _PickupTime;
		
		private string _LoadingCapacity;
		
		private string _TravelFrom;
		
		private string _TravelTo;
		
		private string _KindOfItem;
		
		private string _TotalSizeOfItem;
		
		private string _Period;
		
		private System.Nullable<int> _PaymentTypeId;
		
		private string _Frequency;
		
		private System.Nullable<int> _NumberOfCleaners;
		
		private string _CleanersGender;
		
		private System.Nullable<int> _CleanersWorkingHour;
		
		private System.Nullable<bool> _DoesNeedCleaningTools;
		
		private string _KitchenSpaceSqt;
		
		private string _CarType;
		
		private string _CarMaker;
		
		private string _CarName;
		
		private string _CarModel;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private System.Nullable<bool> _IsExpress;
		
		private System.Nullable<bool> _IsNormal;
		
		private System.Nullable<int> _CountryId;
		
		private System.Nullable<int> _CityId;
		
		private System.Nullable<bool> _IsTruckFreezer;
		
		private System.Nullable<bool> _HaveRails;
		
		private System.Nullable<bool> _IsDriver;
		
		private System.Nullable<bool> _IsSaloonCarAndDriver;
		
		private System.Nullable<bool> _IsVanAndDriver;
		
		private System.Nullable<bool> _IsTruckDriver;
		
		private EntitySet<JobDetailArea> _JobDetailAreas;
		
		private EntitySet<JobDetailEvent> _JobDetailEvents;
		
		private EntitySet<JobDetailInterior> _JobDetailInteriors;
		
		private EntitySet<JobDetailsConsulting> _JobDetailsConsultings;
		
		private EntitySet<JobdetailsFurniture> _JobdetailsFurnitures;
		
		private EntitySet<JobDetailWall> _JobDetailWalls;
		
		private EntitySet<JobDetailWindow> _JobDetailWindows;
		
		private EntityRef<City> _City1;
		
		private EntityRef<Country> _Country1;
		
		private EntityRef<JobPaymentType> _JobPaymentType;
		
		private EntityRef<Job> _Job;
		
		private EntityRef<PropertyType> _PropertyType;
		
		private EntityRef<PropertyType> _PropertyType1;
		
		private EntityRef<PropertyType> _PropertyType2;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnJobIdChanging(System.Nullable<int> value);
    partial void OnJobIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnCustomValueChanging(string value);
    partial void OnCustomValueChanged();
    partial void OnTypeOfPropertyIdChanging(System.Nullable<int> value);
    partial void OnTypeOfPropertyIdChanged();
    partial void OnNumberOfRoomsChanging(System.Nullable<int> value);
    partial void OnNumberOfRoomsChanged();
    partial void OnIsIncludeCeilingChanging(System.Nullable<bool> value);
    partial void OnIsIncludeCeilingChanged();
    partial void OnRoomSizeChanging(string value);
    partial void OnRoomSizeChanged();
    partial void OnGardenSizeChanging(string value);
    partial void OnGardenSizeChanged();
    partial void OnSizeTypeChanging(string value);
    partial void OnSizeTypeChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnCountryToChanging(string value);
    partial void OnCountryToChanged();
    partial void OnCityToChanging(string value);
    partial void OnCityToChanged();
    partial void OnLocationToChanging(string value);
    partial void OnLocationToChanged();
    partial void OnResidenceTypeIdChanging(System.Nullable<int> value);
    partial void OnResidenceTypeIdChanged();
    partial void OnResidenceSqrfChanging(string value);
    partial void OnResidenceSqrfChanged();
    partial void OnResidenceToTypeIdChanging(System.Nullable<int> value);
    partial void OnResidenceToTypeIdChanged();
    partial void OnResidenceToSqrfChanging(string value);
    partial void OnResidenceToSqrfChanged();
    partial void OnNumberOfBedroomChanging(System.Nullable<int> value);
    partial void OnNumberOfBedroomChanged();
    partial void OnIsDomesticChanging(System.Nullable<bool> value);
    partial void OnIsDomesticChanged();
    partial void OnIsInternationalChanging(System.Nullable<bool> value);
    partial void OnIsInternationalChanged();
    partial void OnParcelTypeChanging(string value);
    partial void OnParcelTypeChanged();
    partial void OnWeightChanging(string value);
    partial void OnWeightChanged();
    partial void OnPickupTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnPickupTimeChanged();
    partial void OnLoadingCapacityChanging(string value);
    partial void OnLoadingCapacityChanged();
    partial void OnTravelFromChanging(string value);
    partial void OnTravelFromChanged();
    partial void OnTravelToChanging(string value);
    partial void OnTravelToChanged();
    partial void OnKindOfItemChanging(string value);
    partial void OnKindOfItemChanged();
    partial void OnTotalSizeOfItemChanging(string value);
    partial void OnTotalSizeOfItemChanged();
    partial void OnPeriodChanging(string value);
    partial void OnPeriodChanged();
    partial void OnPaymentTypeIdChanging(System.Nullable<int> value);
    partial void OnPaymentTypeIdChanged();
    partial void OnFrequencyChanging(string value);
    partial void OnFrequencyChanged();
    partial void OnNumberOfCleanersChanging(System.Nullable<int> value);
    partial void OnNumberOfCleanersChanged();
    partial void OnCleanersGenderChanging(string value);
    partial void OnCleanersGenderChanged();
    partial void OnCleanersWorkingHourChanging(System.Nullable<int> value);
    partial void OnCleanersWorkingHourChanged();
    partial void OnDoesNeedCleaningToolsChanging(System.Nullable<bool> value);
    partial void OnDoesNeedCleaningToolsChanged();
    partial void OnKitchenSpaceSqtChanging(string value);
    partial void OnKitchenSpaceSqtChanged();
    partial void OnCarTypeChanging(string value);
    partial void OnCarTypeChanged();
    partial void OnCarMakerChanging(string value);
    partial void OnCarMakerChanged();
    partial void OnCarNameChanging(string value);
    partial void OnCarNameChanged();
    partial void OnCarModelChanging(string value);
    partial void OnCarModelChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnIsExpressChanging(System.Nullable<bool> value);
    partial void OnIsExpressChanged();
    partial void OnIsNormalChanging(System.Nullable<bool> value);
    partial void OnIsNormalChanged();
    partial void OnCountryIdChanging(System.Nullable<int> value);
    partial void OnCountryIdChanged();
    partial void OnCityIdChanging(System.Nullable<int> value);
    partial void OnCityIdChanged();
    partial void OnIsTruckFreezerChanging(System.Nullable<bool> value);
    partial void OnIsTruckFreezerChanged();
    partial void OnHaveRailsChanging(System.Nullable<bool> value);
    partial void OnHaveRailsChanged();
    partial void OnIsDriverChanging(System.Nullable<bool> value);
    partial void OnIsDriverChanged();
    partial void OnIsSaloonCarAndDriverChanging(System.Nullable<bool> value);
    partial void OnIsSaloonCarAndDriverChanged();
    partial void OnIsVanAndDriverChanging(System.Nullable<bool> value);
    partial void OnIsVanAndDriverChanged();
    partial void OnIsTruckDriverChanging(System.Nullable<bool> value);
    partial void OnIsTruckDriverChanged();
    #endregion
		
		public JobDetail()
		{
			this._JobDetailAreas = new EntitySet<JobDetailArea>(new Action<JobDetailArea>(this.attach_JobDetailAreas), new Action<JobDetailArea>(this.detach_JobDetailAreas));
			this._JobDetailEvents = new EntitySet<JobDetailEvent>(new Action<JobDetailEvent>(this.attach_JobDetailEvents), new Action<JobDetailEvent>(this.detach_JobDetailEvents));
			this._JobDetailInteriors = new EntitySet<JobDetailInterior>(new Action<JobDetailInterior>(this.attach_JobDetailInteriors), new Action<JobDetailInterior>(this.detach_JobDetailInteriors));
			this._JobDetailsConsultings = new EntitySet<JobDetailsConsulting>(new Action<JobDetailsConsulting>(this.attach_JobDetailsConsultings), new Action<JobDetailsConsulting>(this.detach_JobDetailsConsultings));
			this._JobdetailsFurnitures = new EntitySet<JobdetailsFurniture>(new Action<JobdetailsFurniture>(this.attach_JobdetailsFurnitures), new Action<JobdetailsFurniture>(this.detach_JobdetailsFurnitures));
			this._JobDetailWalls = new EntitySet<JobDetailWall>(new Action<JobDetailWall>(this.attach_JobDetailWalls), new Action<JobDetailWall>(this.detach_JobDetailWalls));
			this._JobDetailWindows = new EntitySet<JobDetailWindow>(new Action<JobDetailWindow>(this.attach_JobDetailWindows), new Action<JobDetailWindow>(this.detach_JobDetailWindows));
			this._City1 = default(EntityRef<City>);
			this._Country1 = default(EntityRef<Country>);
			this._JobPaymentType = default(EntityRef<JobPaymentType>);
			this._Job = default(EntityRef<Job>);
			this._PropertyType = default(EntityRef<PropertyType>);
			this._PropertyType1 = default(EntityRef<PropertyType>);
			this._PropertyType2 = default(EntityRef<PropertyType>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="Int")]
		public System.Nullable<int> JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomValue", DbType="NVarChar(MAX)")]
		public string CustomValue
		{
			get
			{
				return this._CustomValue;
			}
			set
			{
				if ((this._CustomValue != value))
				{
					this.OnCustomValueChanging(value);
					this.SendPropertyChanging();
					this._CustomValue = value;
					this.SendPropertyChanged("CustomValue");
					this.OnCustomValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfPropertyId", DbType="Int")]
		public System.Nullable<int> TypeOfPropertyId
		{
			get
			{
				return this._TypeOfPropertyId;
			}
			set
			{
				if ((this._TypeOfPropertyId != value))
				{
					if (this._PropertyType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeOfPropertyIdChanging(value);
					this.SendPropertyChanging();
					this._TypeOfPropertyId = value;
					this.SendPropertyChanged("TypeOfPropertyId");
					this.OnTypeOfPropertyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfRooms", DbType="Int")]
		public System.Nullable<int> NumberOfRooms
		{
			get
			{
				return this._NumberOfRooms;
			}
			set
			{
				if ((this._NumberOfRooms != value))
				{
					this.OnNumberOfRoomsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfRooms = value;
					this.SendPropertyChanged("NumberOfRooms");
					this.OnNumberOfRoomsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsIncludeCeiling", DbType="Bit")]
		public System.Nullable<bool> IsIncludeCeiling
		{
			get
			{
				return this._IsIncludeCeiling;
			}
			set
			{
				if ((this._IsIncludeCeiling != value))
				{
					this.OnIsIncludeCeilingChanging(value);
					this.SendPropertyChanging();
					this._IsIncludeCeiling = value;
					this.SendPropertyChanged("IsIncludeCeiling");
					this.OnIsIncludeCeilingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomSize", DbType="NVarChar(1600)")]
		public string RoomSize
		{
			get
			{
				return this._RoomSize;
			}
			set
			{
				if ((this._RoomSize != value))
				{
					this.OnRoomSizeChanging(value);
					this.SendPropertyChanging();
					this._RoomSize = value;
					this.SendPropertyChanged("RoomSize");
					this.OnRoomSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GardenSize", DbType="NVarChar(1600)")]
		public string GardenSize
		{
			get
			{
				return this._GardenSize;
			}
			set
			{
				if ((this._GardenSize != value))
				{
					this.OnGardenSizeChanging(value);
					this.SendPropertyChanging();
					this._GardenSize = value;
					this.SendPropertyChanged("GardenSize");
					this.OnGardenSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SizeType", DbType="NVarChar(1600)")]
		public string SizeType
		{
			get
			{
				return this._SizeType;
			}
			set
			{
				if ((this._SizeType != value))
				{
					this.OnSizeTypeChanging(value);
					this.SendPropertyChanging();
					this._SizeType = value;
					this.SendPropertyChanged("SizeType");
					this.OnSizeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(1600)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(1600)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(1600)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryTo", DbType="NVarChar(1600)")]
		public string CountryTo
		{
			get
			{
				return this._CountryTo;
			}
			set
			{
				if ((this._CountryTo != value))
				{
					this.OnCountryToChanging(value);
					this.SendPropertyChanging();
					this._CountryTo = value;
					this.SendPropertyChanged("CountryTo");
					this.OnCountryToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityTo", DbType="NVarChar(1600)")]
		public string CityTo
		{
			get
			{
				return this._CityTo;
			}
			set
			{
				if ((this._CityTo != value))
				{
					this.OnCityToChanging(value);
					this.SendPropertyChanging();
					this._CityTo = value;
					this.SendPropertyChanged("CityTo");
					this.OnCityToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationTo", DbType="NVarChar(1600)")]
		public string LocationTo
		{
			get
			{
				return this._LocationTo;
			}
			set
			{
				if ((this._LocationTo != value))
				{
					this.OnLocationToChanging(value);
					this.SendPropertyChanging();
					this._LocationTo = value;
					this.SendPropertyChanged("LocationTo");
					this.OnLocationToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResidenceTypeId", DbType="Int")]
		public System.Nullable<int> ResidenceTypeId
		{
			get
			{
				return this._ResidenceTypeId;
			}
			set
			{
				if ((this._ResidenceTypeId != value))
				{
					if (this._PropertyType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResidenceTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ResidenceTypeId = value;
					this.SendPropertyChanged("ResidenceTypeId");
					this.OnResidenceTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResidenceSqrf", DbType="NVarChar(1600)")]
		public string ResidenceSqrf
		{
			get
			{
				return this._ResidenceSqrf;
			}
			set
			{
				if ((this._ResidenceSqrf != value))
				{
					this.OnResidenceSqrfChanging(value);
					this.SendPropertyChanging();
					this._ResidenceSqrf = value;
					this.SendPropertyChanged("ResidenceSqrf");
					this.OnResidenceSqrfChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResidenceToTypeId", DbType="Int")]
		public System.Nullable<int> ResidenceToTypeId
		{
			get
			{
				return this._ResidenceToTypeId;
			}
			set
			{
				if ((this._ResidenceToTypeId != value))
				{
					if (this._PropertyType2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResidenceToTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ResidenceToTypeId = value;
					this.SendPropertyChanged("ResidenceToTypeId");
					this.OnResidenceToTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResidenceToSqrf", DbType="NVarChar(1600)")]
		public string ResidenceToSqrf
		{
			get
			{
				return this._ResidenceToSqrf;
			}
			set
			{
				if ((this._ResidenceToSqrf != value))
				{
					this.OnResidenceToSqrfChanging(value);
					this.SendPropertyChanging();
					this._ResidenceToSqrf = value;
					this.SendPropertyChanged("ResidenceToSqrf");
					this.OnResidenceToSqrfChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfBedroom", DbType="Int")]
		public System.Nullable<int> NumberOfBedroom
		{
			get
			{
				return this._NumberOfBedroom;
			}
			set
			{
				if ((this._NumberOfBedroom != value))
				{
					this.OnNumberOfBedroomChanging(value);
					this.SendPropertyChanging();
					this._NumberOfBedroom = value;
					this.SendPropertyChanged("NumberOfBedroom");
					this.OnNumberOfBedroomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDomestic", DbType="Bit")]
		public System.Nullable<bool> IsDomestic
		{
			get
			{
				return this._IsDomestic;
			}
			set
			{
				if ((this._IsDomestic != value))
				{
					this.OnIsDomesticChanging(value);
					this.SendPropertyChanging();
					this._IsDomestic = value;
					this.SendPropertyChanged("IsDomestic");
					this.OnIsDomesticChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInternational", DbType="Bit")]
		public System.Nullable<bool> IsInternational
		{
			get
			{
				return this._IsInternational;
			}
			set
			{
				if ((this._IsInternational != value))
				{
					this.OnIsInternationalChanging(value);
					this.SendPropertyChanging();
					this._IsInternational = value;
					this.SendPropertyChanged("IsInternational");
					this.OnIsInternationalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParcelType", DbType="NVarChar(1600)")]
		public string ParcelType
		{
			get
			{
				return this._ParcelType;
			}
			set
			{
				if ((this._ParcelType != value))
				{
					this.OnParcelTypeChanging(value);
					this.SendPropertyChanging();
					this._ParcelType = value;
					this.SendPropertyChanged("ParcelType");
					this.OnParcelTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="NVarChar(1600)")]
		public string Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PickupTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> PickupTime
		{
			get
			{
				return this._PickupTime;
			}
			set
			{
				if ((this._PickupTime != value))
				{
					this.OnPickupTimeChanging(value);
					this.SendPropertyChanging();
					this._PickupTime = value;
					this.SendPropertyChanged("PickupTime");
					this.OnPickupTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoadingCapacity", DbType="NVarChar(1600)")]
		public string LoadingCapacity
		{
			get
			{
				return this._LoadingCapacity;
			}
			set
			{
				if ((this._LoadingCapacity != value))
				{
					this.OnLoadingCapacityChanging(value);
					this.SendPropertyChanging();
					this._LoadingCapacity = value;
					this.SendPropertyChanged("LoadingCapacity");
					this.OnLoadingCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TravelFrom", DbType="NVarChar(1600)")]
		public string TravelFrom
		{
			get
			{
				return this._TravelFrom;
			}
			set
			{
				if ((this._TravelFrom != value))
				{
					this.OnTravelFromChanging(value);
					this.SendPropertyChanging();
					this._TravelFrom = value;
					this.SendPropertyChanged("TravelFrom");
					this.OnTravelFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TravelTo", DbType="NVarChar(1600)")]
		public string TravelTo
		{
			get
			{
				return this._TravelTo;
			}
			set
			{
				if ((this._TravelTo != value))
				{
					this.OnTravelToChanging(value);
					this.SendPropertyChanging();
					this._TravelTo = value;
					this.SendPropertyChanged("TravelTo");
					this.OnTravelToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KindOfItem", DbType="NVarChar(1600)")]
		public string KindOfItem
		{
			get
			{
				return this._KindOfItem;
			}
			set
			{
				if ((this._KindOfItem != value))
				{
					this.OnKindOfItemChanging(value);
					this.SendPropertyChanging();
					this._KindOfItem = value;
					this.SendPropertyChanged("KindOfItem");
					this.OnKindOfItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalSizeOfItem", DbType="NVarChar(1600)")]
		public string TotalSizeOfItem
		{
			get
			{
				return this._TotalSizeOfItem;
			}
			set
			{
				if ((this._TotalSizeOfItem != value))
				{
					this.OnTotalSizeOfItemChanging(value);
					this.SendPropertyChanging();
					this._TotalSizeOfItem = value;
					this.SendPropertyChanged("TotalSizeOfItem");
					this.OnTotalSizeOfItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Period", DbType="NVarChar(1600)")]
		public string Period
		{
			get
			{
				return this._Period;
			}
			set
			{
				if ((this._Period != value))
				{
					this.OnPeriodChanging(value);
					this.SendPropertyChanging();
					this._Period = value;
					this.SendPropertyChanged("Period");
					this.OnPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentTypeId", DbType="Int")]
		public System.Nullable<int> PaymentTypeId
		{
			get
			{
				return this._PaymentTypeId;
			}
			set
			{
				if ((this._PaymentTypeId != value))
				{
					if (this._JobPaymentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PaymentTypeId = value;
					this.SendPropertyChanged("PaymentTypeId");
					this.OnPaymentTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Frequency", DbType="NVarChar(1600)")]
		public string Frequency
		{
			get
			{
				return this._Frequency;
			}
			set
			{
				if ((this._Frequency != value))
				{
					this.OnFrequencyChanging(value);
					this.SendPropertyChanging();
					this._Frequency = value;
					this.SendPropertyChanged("Frequency");
					this.OnFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfCleaners", DbType="Int")]
		public System.Nullable<int> NumberOfCleaners
		{
			get
			{
				return this._NumberOfCleaners;
			}
			set
			{
				if ((this._NumberOfCleaners != value))
				{
					this.OnNumberOfCleanersChanging(value);
					this.SendPropertyChanging();
					this._NumberOfCleaners = value;
					this.SendPropertyChanged("NumberOfCleaners");
					this.OnNumberOfCleanersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CleanersGender", DbType="NVarChar(1600)")]
		public string CleanersGender
		{
			get
			{
				return this._CleanersGender;
			}
			set
			{
				if ((this._CleanersGender != value))
				{
					this.OnCleanersGenderChanging(value);
					this.SendPropertyChanging();
					this._CleanersGender = value;
					this.SendPropertyChanged("CleanersGender");
					this.OnCleanersGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CleanersWorkingHour", DbType="Int")]
		public System.Nullable<int> CleanersWorkingHour
		{
			get
			{
				return this._CleanersWorkingHour;
			}
			set
			{
				if ((this._CleanersWorkingHour != value))
				{
					this.OnCleanersWorkingHourChanging(value);
					this.SendPropertyChanging();
					this._CleanersWorkingHour = value;
					this.SendPropertyChanged("CleanersWorkingHour");
					this.OnCleanersWorkingHourChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoesNeedCleaningTools", DbType="Bit")]
		public System.Nullable<bool> DoesNeedCleaningTools
		{
			get
			{
				return this._DoesNeedCleaningTools;
			}
			set
			{
				if ((this._DoesNeedCleaningTools != value))
				{
					this.OnDoesNeedCleaningToolsChanging(value);
					this.SendPropertyChanging();
					this._DoesNeedCleaningTools = value;
					this.SendPropertyChanged("DoesNeedCleaningTools");
					this.OnDoesNeedCleaningToolsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KitchenSpaceSqt", DbType="NVarChar(1600)")]
		public string KitchenSpaceSqt
		{
			get
			{
				return this._KitchenSpaceSqt;
			}
			set
			{
				if ((this._KitchenSpaceSqt != value))
				{
					this.OnKitchenSpaceSqtChanging(value);
					this.SendPropertyChanging();
					this._KitchenSpaceSqt = value;
					this.SendPropertyChanged("KitchenSpaceSqt");
					this.OnKitchenSpaceSqtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarType", DbType="NVarChar(1600)")]
		public string CarType
		{
			get
			{
				return this._CarType;
			}
			set
			{
				if ((this._CarType != value))
				{
					this.OnCarTypeChanging(value);
					this.SendPropertyChanging();
					this._CarType = value;
					this.SendPropertyChanged("CarType");
					this.OnCarTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarMaker", DbType="NVarChar(1600)")]
		public string CarMaker
		{
			get
			{
				return this._CarMaker;
			}
			set
			{
				if ((this._CarMaker != value))
				{
					this.OnCarMakerChanging(value);
					this.SendPropertyChanging();
					this._CarMaker = value;
					this.SendPropertyChanged("CarMaker");
					this.OnCarMakerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarName", DbType="NVarChar(1600)")]
		public string CarName
		{
			get
			{
				return this._CarName;
			}
			set
			{
				if ((this._CarName != value))
				{
					this.OnCarNameChanging(value);
					this.SendPropertyChanging();
					this._CarName = value;
					this.SendPropertyChanged("CarName");
					this.OnCarNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarModel", DbType="NVarChar(1600)")]
		public string CarModel
		{
			get
			{
				return this._CarModel;
			}
			set
			{
				if ((this._CarModel != value))
				{
					this.OnCarModelChanging(value);
					this.SendPropertyChanging();
					this._CarModel = value;
					this.SendPropertyChanged("CarModel");
					this.OnCarModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsExpress", DbType="Bit")]
		public System.Nullable<bool> IsExpress
		{
			get
			{
				return this._IsExpress;
			}
			set
			{
				if ((this._IsExpress != value))
				{
					this.OnIsExpressChanging(value);
					this.SendPropertyChanging();
					this._IsExpress = value;
					this.SendPropertyChanged("IsExpress");
					this.OnIsExpressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsNormal", DbType="Bit")]
		public System.Nullable<bool> IsNormal
		{
			get
			{
				return this._IsNormal;
			}
			set
			{
				if ((this._IsNormal != value))
				{
					this.OnIsNormalChanging(value);
					this.SendPropertyChanging();
					this._IsNormal = value;
					this.SendPropertyChanged("IsNormal");
					this.OnIsNormalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int")]
		public System.Nullable<int> CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._Country1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int")]
		public System.Nullable<int> CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._City1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsTruckFreezer", DbType="Bit")]
		public System.Nullable<bool> IsTruckFreezer
		{
			get
			{
				return this._IsTruckFreezer;
			}
			set
			{
				if ((this._IsTruckFreezer != value))
				{
					this.OnIsTruckFreezerChanging(value);
					this.SendPropertyChanging();
					this._IsTruckFreezer = value;
					this.SendPropertyChanged("IsTruckFreezer");
					this.OnIsTruckFreezerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HaveRails", DbType="Bit")]
		public System.Nullable<bool> HaveRails
		{
			get
			{
				return this._HaveRails;
			}
			set
			{
				if ((this._HaveRails != value))
				{
					this.OnHaveRailsChanging(value);
					this.SendPropertyChanging();
					this._HaveRails = value;
					this.SendPropertyChanged("HaveRails");
					this.OnHaveRailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDriver", DbType="Bit")]
		public System.Nullable<bool> IsDriver
		{
			get
			{
				return this._IsDriver;
			}
			set
			{
				if ((this._IsDriver != value))
				{
					this.OnIsDriverChanging(value);
					this.SendPropertyChanging();
					this._IsDriver = value;
					this.SendPropertyChanged("IsDriver");
					this.OnIsDriverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSaloonCarAndDriver", DbType="Bit")]
		public System.Nullable<bool> IsSaloonCarAndDriver
		{
			get
			{
				return this._IsSaloonCarAndDriver;
			}
			set
			{
				if ((this._IsSaloonCarAndDriver != value))
				{
					this.OnIsSaloonCarAndDriverChanging(value);
					this.SendPropertyChanging();
					this._IsSaloonCarAndDriver = value;
					this.SendPropertyChanged("IsSaloonCarAndDriver");
					this.OnIsSaloonCarAndDriverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVanAndDriver", DbType="Bit")]
		public System.Nullable<bool> IsVanAndDriver
		{
			get
			{
				return this._IsVanAndDriver;
			}
			set
			{
				if ((this._IsVanAndDriver != value))
				{
					this.OnIsVanAndDriverChanging(value);
					this.SendPropertyChanging();
					this._IsVanAndDriver = value;
					this.SendPropertyChanged("IsVanAndDriver");
					this.OnIsVanAndDriverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsTruckDriver", DbType="Bit")]
		public System.Nullable<bool> IsTruckDriver
		{
			get
			{
				return this._IsTruckDriver;
			}
			set
			{
				if ((this._IsTruckDriver != value))
				{
					this.OnIsTruckDriverChanging(value);
					this.SendPropertyChanging();
					this._IsTruckDriver = value;
					this.SendPropertyChanged("IsTruckDriver");
					this.OnIsTruckDriverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobDetail_JobDetailArea", Storage="_JobDetailAreas", ThisKey="Id", OtherKey="JobDetailId")]
		public EntitySet<JobDetailArea> JobDetailAreas
		{
			get
			{
				return this._JobDetailAreas;
			}
			set
			{
				this._JobDetailAreas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobDetail_JobDetailEvent", Storage="_JobDetailEvents", ThisKey="Id", OtherKey="JobDetailsId")]
		public EntitySet<JobDetailEvent> JobDetailEvents
		{
			get
			{
				return this._JobDetailEvents;
			}
			set
			{
				this._JobDetailEvents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobDetail_JobDetailInterior", Storage="_JobDetailInteriors", ThisKey="Id", OtherKey="JobDetailId")]
		public EntitySet<JobDetailInterior> JobDetailInteriors
		{
			get
			{
				return this._JobDetailInteriors;
			}
			set
			{
				this._JobDetailInteriors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobDetail_JobDetailsConsulting", Storage="_JobDetailsConsultings", ThisKey="Id", OtherKey="JobDetailId")]
		public EntitySet<JobDetailsConsulting> JobDetailsConsultings
		{
			get
			{
				return this._JobDetailsConsultings;
			}
			set
			{
				this._JobDetailsConsultings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobDetail_JobdetailsFurniture", Storage="_JobdetailsFurnitures", ThisKey="Id", OtherKey="JobDetailId")]
		public EntitySet<JobdetailsFurniture> JobdetailsFurnitures
		{
			get
			{
				return this._JobdetailsFurnitures;
			}
			set
			{
				this._JobdetailsFurnitures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobDetail_JobDetailWall", Storage="_JobDetailWalls", ThisKey="Id", OtherKey="JobDetailId")]
		public EntitySet<JobDetailWall> JobDetailWalls
		{
			get
			{
				return this._JobDetailWalls;
			}
			set
			{
				this._JobDetailWalls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobDetail_JobDetailWindow", Storage="_JobDetailWindows", ThisKey="Id", OtherKey="JobDetailId")]
		public EntitySet<JobDetailWindow> JobDetailWindows
		{
			get
			{
				return this._JobDetailWindows;
			}
			set
			{
				this._JobDetailWindows.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_JobDetail", Storage="_City1", ThisKey="CityId", OtherKey="Id", IsForeignKey=true)]
		public City City1
		{
			get
			{
				return this._City1.Entity;
			}
			set
			{
				City previousValue = this._City1.Entity;
				if (((previousValue != value) 
							|| (this._City1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City1.Entity = null;
						previousValue.JobDetails.Remove(this);
					}
					this._City1.Entity = value;
					if ((value != null))
					{
						value.JobDetails.Add(this);
						this._CityId = value.Id;
					}
					else
					{
						this._CityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("City1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_JobDetail", Storage="_Country1", ThisKey="CountryId", OtherKey="Id", IsForeignKey=true)]
		public Country Country1
		{
			get
			{
				return this._Country1.Entity;
			}
			set
			{
				Country previousValue = this._Country1.Entity;
				if (((previousValue != value) 
							|| (this._Country1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country1.Entity = null;
						previousValue.JobDetails.Remove(this);
					}
					this._Country1.Entity = value;
					if ((value != null))
					{
						value.JobDetails.Add(this);
						this._CountryId = value.Id;
					}
					else
					{
						this._CountryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobPaymentType_JobDetail", Storage="_JobPaymentType", ThisKey="PaymentTypeId", OtherKey="Id", IsForeignKey=true)]
		public JobPaymentType JobPaymentType
		{
			get
			{
				return this._JobPaymentType.Entity;
			}
			set
			{
				JobPaymentType previousValue = this._JobPaymentType.Entity;
				if (((previousValue != value) 
							|| (this._JobPaymentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobPaymentType.Entity = null;
						previousValue.JobDetails.Remove(this);
					}
					this._JobPaymentType.Entity = value;
					if ((value != null))
					{
						value.JobDetails.Add(this);
						this._PaymentTypeId = value.Id;
					}
					else
					{
						this._PaymentTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("JobPaymentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_JobDetail", Storage="_Job", ThisKey="JobId", OtherKey="Id", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.JobDetails.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.JobDetails.Add(this);
						this._JobId = value.Id;
					}
					else
					{
						this._JobId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PropertyType_JobDetail", Storage="_PropertyType", ThisKey="TypeOfPropertyId", OtherKey="Id", IsForeignKey=true)]
		public PropertyType PropertyType
		{
			get
			{
				return this._PropertyType.Entity;
			}
			set
			{
				PropertyType previousValue = this._PropertyType.Entity;
				if (((previousValue != value) 
							|| (this._PropertyType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PropertyType.Entity = null;
						previousValue.JobDetails.Remove(this);
					}
					this._PropertyType.Entity = value;
					if ((value != null))
					{
						value.JobDetails.Add(this);
						this._TypeOfPropertyId = value.Id;
					}
					else
					{
						this._TypeOfPropertyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PropertyType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PropertyType_JobDetail1", Storage="_PropertyType1", ThisKey="ResidenceTypeId", OtherKey="Id", IsForeignKey=true)]
		public PropertyType PropertyType1
		{
			get
			{
				return this._PropertyType1.Entity;
			}
			set
			{
				PropertyType previousValue = this._PropertyType1.Entity;
				if (((previousValue != value) 
							|| (this._PropertyType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PropertyType1.Entity = null;
						previousValue.JobDetails1.Remove(this);
					}
					this._PropertyType1.Entity = value;
					if ((value != null))
					{
						value.JobDetails1.Add(this);
						this._ResidenceTypeId = value.Id;
					}
					else
					{
						this._ResidenceTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PropertyType1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PropertyType_JobDetail2", Storage="_PropertyType2", ThisKey="ResidenceToTypeId", OtherKey="Id", IsForeignKey=true)]
		public PropertyType PropertyType2
		{
			get
			{
				return this._PropertyType2.Entity;
			}
			set
			{
				PropertyType previousValue = this._PropertyType2.Entity;
				if (((previousValue != value) 
							|| (this._PropertyType2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PropertyType2.Entity = null;
						previousValue.JobDetails2.Remove(this);
					}
					this._PropertyType2.Entity = value;
					if ((value != null))
					{
						value.JobDetails2.Add(this);
						this._ResidenceToTypeId = value.Id;
					}
					else
					{
						this._ResidenceToTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PropertyType2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_JobDetail", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.JobDetails.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.JobDetails.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JobDetailAreas(JobDetailArea entity)
		{
			this.SendPropertyChanging();
			entity.JobDetail = this;
		}
		
		private void detach_JobDetailAreas(JobDetailArea entity)
		{
			this.SendPropertyChanging();
			entity.JobDetail = null;
		}
		
		private void attach_JobDetailEvents(JobDetailEvent entity)
		{
			this.SendPropertyChanging();
			entity.JobDetail = this;
		}
		
		private void detach_JobDetailEvents(JobDetailEvent entity)
		{
			this.SendPropertyChanging();
			entity.JobDetail = null;
		}
		
		private void attach_JobDetailInteriors(JobDetailInterior entity)
		{
			this.SendPropertyChanging();
			entity.JobDetail = this;
		}
		
		private void detach_JobDetailInteriors(JobDetailInterior entity)
		{
			this.SendPropertyChanging();
			entity.JobDetail = null;
		}
		
		private void attach_JobDetailsConsultings(JobDetailsConsulting entity)
		{
			this.SendPropertyChanging();
			entity.JobDetail = this;
		}
		
		private void detach_JobDetailsConsultings(JobDetailsConsulting entity)
		{
			this.SendPropertyChanging();
			entity.JobDetail = null;
		}
		
		private void attach_JobdetailsFurnitures(JobdetailsFurniture entity)
		{
			this.SendPropertyChanging();
			entity.JobDetail = this;
		}
		
		private void detach_JobdetailsFurnitures(JobdetailsFurniture entity)
		{
			this.SendPropertyChanging();
			entity.JobDetail = null;
		}
		
		private void attach_JobDetailWalls(JobDetailWall entity)
		{
			this.SendPropertyChanging();
			entity.JobDetail = this;
		}
		
		private void detach_JobDetailWalls(JobDetailWall entity)
		{
			this.SendPropertyChanging();
			entity.JobDetail = null;
		}
		
		private void attach_JobDetailWindows(JobDetailWindow entity)
		{
			this.SendPropertyChanging();
			entity.JobDetail = this;
		}
		
		private void detach_JobDetailWindows(JobDetailWindow entity)
		{
			this.SendPropertyChanging();
			entity.JobDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobDetailArea")]
	public partial class JobDetailArea : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _AreaType;
		
		private string _Length;
		
		private string _Width;
		
		private int _JobDetailId;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntityRef<JobDetail> _JobDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAreaTypeChanging(string value);
    partial void OnAreaTypeChanged();
    partial void OnLengthChanging(string value);
    partial void OnLengthChanged();
    partial void OnWidthChanging(string value);
    partial void OnWidthChanged();
    partial void OnJobDetailIdChanging(int value);
    partial void OnJobDetailIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public JobDetailArea()
		{
			this._JobDetail = default(EntityRef<JobDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaType", DbType="NVarChar(1600)")]
		public string AreaType
		{
			get
			{
				return this._AreaType;
			}
			set
			{
				if ((this._AreaType != value))
				{
					this.OnAreaTypeChanging(value);
					this.SendPropertyChanging();
					this._AreaType = value;
					this.SendPropertyChanged("AreaType");
					this.OnAreaTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="NVarChar(1600)")]
		public string Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="NVarChar(1600)")]
		public string Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobDetailId", DbType="Int NOT NULL")]
		public int JobDetailId
		{
			get
			{
				return this._JobDetailId;
			}
			set
			{
				if ((this._JobDetailId != value))
				{
					if (this._JobDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobDetailIdChanging(value);
					this.SendPropertyChanging();
					this._JobDetailId = value;
					this.SendPropertyChanged("JobDetailId");
					this.OnJobDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobDetail_JobDetailArea", Storage="_JobDetail", ThisKey="JobDetailId", OtherKey="Id", IsForeignKey=true)]
		public JobDetail JobDetail
		{
			get
			{
				return this._JobDetail.Entity;
			}
			set
			{
				JobDetail previousValue = this._JobDetail.Entity;
				if (((previousValue != value) 
							|| (this._JobDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobDetail.Entity = null;
						previousValue.JobDetailAreas.Remove(this);
					}
					this._JobDetail.Entity = value;
					if ((value != null))
					{
						value.JobDetailAreas.Add(this);
						this._JobDetailId = value.Id;
					}
					else
					{
						this._JobDetailId = default(int);
					}
					this.SendPropertyChanged("JobDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobDetailEvent")]
	public partial class JobDetailEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Requirement;
		
		private System.Nullable<int> _NumberOfAdults;
		
		private System.Nullable<int> _NumberOfKids;
		
		private string _ExpectedDuration;
		
		private int _JobDetailsId;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private System.Nullable<bool> _IsVenue;
		
		private System.Nullable<bool> _IsFood;
		
		private System.Nullable<bool> _IsCakes;
		
		private System.Nullable<bool> _IsFlower;
		
		private System.Nullable<bool> _IsInvitationCard;
		
		private System.Nullable<bool> _IsFemailHelpers;
		
		private System.Nullable<bool> _IsMaleHelpers;
		
		private System.Nullable<bool> _IsPhotoVideo;
		
		private System.Nullable<bool> _IsLiveMusic;
		
		private System.Nullable<bool> _IsStageAndMic;
		
		private System.Nullable<bool> _ISActivityEntertainment;
		
		private System.Nullable<bool> _IsOthers;
		
		private EntityRef<JobDetail> _JobDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRequirementChanging(string value);
    partial void OnRequirementChanged();
    partial void OnNumberOfAdultsChanging(System.Nullable<int> value);
    partial void OnNumberOfAdultsChanged();
    partial void OnNumberOfKidsChanging(System.Nullable<int> value);
    partial void OnNumberOfKidsChanged();
    partial void OnExpectedDurationChanging(string value);
    partial void OnExpectedDurationChanged();
    partial void OnJobDetailsIdChanging(int value);
    partial void OnJobDetailsIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnIsVenueChanging(System.Nullable<bool> value);
    partial void OnIsVenueChanged();
    partial void OnIsFoodChanging(System.Nullable<bool> value);
    partial void OnIsFoodChanged();
    partial void OnIsCakesChanging(System.Nullable<bool> value);
    partial void OnIsCakesChanged();
    partial void OnIsFlowerChanging(System.Nullable<bool> value);
    partial void OnIsFlowerChanged();
    partial void OnIsInvitationCardChanging(System.Nullable<bool> value);
    partial void OnIsInvitationCardChanged();
    partial void OnIsFemailHelpersChanging(System.Nullable<bool> value);
    partial void OnIsFemailHelpersChanged();
    partial void OnIsMaleHelpersChanging(System.Nullable<bool> value);
    partial void OnIsMaleHelpersChanged();
    partial void OnIsPhotoVideoChanging(System.Nullable<bool> value);
    partial void OnIsPhotoVideoChanged();
    partial void OnIsLiveMusicChanging(System.Nullable<bool> value);
    partial void OnIsLiveMusicChanged();
    partial void OnIsStageAndMicChanging(System.Nullable<bool> value);
    partial void OnIsStageAndMicChanged();
    partial void OnISActivityEntertainmentChanging(System.Nullable<bool> value);
    partial void OnISActivityEntertainmentChanged();
    partial void OnIsOthersChanging(System.Nullable<bool> value);
    partial void OnIsOthersChanged();
    #endregion
		
		public JobDetailEvent()
		{
			this._JobDetail = default(EntityRef<JobDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Requirement", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Requirement
		{
			get
			{
				return this._Requirement;
			}
			set
			{
				if ((this._Requirement != value))
				{
					this.OnRequirementChanging(value);
					this.SendPropertyChanging();
					this._Requirement = value;
					this.SendPropertyChanged("Requirement");
					this.OnRequirementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfAdults", DbType="Int")]
		public System.Nullable<int> NumberOfAdults
		{
			get
			{
				return this._NumberOfAdults;
			}
			set
			{
				if ((this._NumberOfAdults != value))
				{
					this.OnNumberOfAdultsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfAdults = value;
					this.SendPropertyChanged("NumberOfAdults");
					this.OnNumberOfAdultsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfKids", DbType="Int")]
		public System.Nullable<int> NumberOfKids
		{
			get
			{
				return this._NumberOfKids;
			}
			set
			{
				if ((this._NumberOfKids != value))
				{
					this.OnNumberOfKidsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfKids = value;
					this.SendPropertyChanged("NumberOfKids");
					this.OnNumberOfKidsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpectedDuration", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string ExpectedDuration
		{
			get
			{
				return this._ExpectedDuration;
			}
			set
			{
				if ((this._ExpectedDuration != value))
				{
					this.OnExpectedDurationChanging(value);
					this.SendPropertyChanging();
					this._ExpectedDuration = value;
					this.SendPropertyChanged("ExpectedDuration");
					this.OnExpectedDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobDetailsId", DbType="Int NOT NULL")]
		public int JobDetailsId
		{
			get
			{
				return this._JobDetailsId;
			}
			set
			{
				if ((this._JobDetailsId != value))
				{
					if (this._JobDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobDetailsIdChanging(value);
					this.SendPropertyChanging();
					this._JobDetailsId = value;
					this.SendPropertyChanged("JobDetailsId");
					this.OnJobDetailsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVenue", DbType="Bit")]
		public System.Nullable<bool> IsVenue
		{
			get
			{
				return this._IsVenue;
			}
			set
			{
				if ((this._IsVenue != value))
				{
					this.OnIsVenueChanging(value);
					this.SendPropertyChanging();
					this._IsVenue = value;
					this.SendPropertyChanged("IsVenue");
					this.OnIsVenueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFood", DbType="Bit")]
		public System.Nullable<bool> IsFood
		{
			get
			{
				return this._IsFood;
			}
			set
			{
				if ((this._IsFood != value))
				{
					this.OnIsFoodChanging(value);
					this.SendPropertyChanging();
					this._IsFood = value;
					this.SendPropertyChanged("IsFood");
					this.OnIsFoodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCakes", DbType="Bit")]
		public System.Nullable<bool> IsCakes
		{
			get
			{
				return this._IsCakes;
			}
			set
			{
				if ((this._IsCakes != value))
				{
					this.OnIsCakesChanging(value);
					this.SendPropertyChanging();
					this._IsCakes = value;
					this.SendPropertyChanged("IsCakes");
					this.OnIsCakesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFlower", DbType="Bit")]
		public System.Nullable<bool> IsFlower
		{
			get
			{
				return this._IsFlower;
			}
			set
			{
				if ((this._IsFlower != value))
				{
					this.OnIsFlowerChanging(value);
					this.SendPropertyChanging();
					this._IsFlower = value;
					this.SendPropertyChanged("IsFlower");
					this.OnIsFlowerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsInvitationCard", DbType="Bit")]
		public System.Nullable<bool> IsInvitationCard
		{
			get
			{
				return this._IsInvitationCard;
			}
			set
			{
				if ((this._IsInvitationCard != value))
				{
					this.OnIsInvitationCardChanging(value);
					this.SendPropertyChanging();
					this._IsInvitationCard = value;
					this.SendPropertyChanged("IsInvitationCard");
					this.OnIsInvitationCardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFemailHelpers", DbType="Bit")]
		public System.Nullable<bool> IsFemailHelpers
		{
			get
			{
				return this._IsFemailHelpers;
			}
			set
			{
				if ((this._IsFemailHelpers != value))
				{
					this.OnIsFemailHelpersChanging(value);
					this.SendPropertyChanging();
					this._IsFemailHelpers = value;
					this.SendPropertyChanged("IsFemailHelpers");
					this.OnIsFemailHelpersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMaleHelpers", DbType="Bit")]
		public System.Nullable<bool> IsMaleHelpers
		{
			get
			{
				return this._IsMaleHelpers;
			}
			set
			{
				if ((this._IsMaleHelpers != value))
				{
					this.OnIsMaleHelpersChanging(value);
					this.SendPropertyChanging();
					this._IsMaleHelpers = value;
					this.SendPropertyChanged("IsMaleHelpers");
					this.OnIsMaleHelpersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPhotoVideo", DbType="Bit")]
		public System.Nullable<bool> IsPhotoVideo
		{
			get
			{
				return this._IsPhotoVideo;
			}
			set
			{
				if ((this._IsPhotoVideo != value))
				{
					this.OnIsPhotoVideoChanging(value);
					this.SendPropertyChanging();
					this._IsPhotoVideo = value;
					this.SendPropertyChanged("IsPhotoVideo");
					this.OnIsPhotoVideoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLiveMusic", DbType="Bit")]
		public System.Nullable<bool> IsLiveMusic
		{
			get
			{
				return this._IsLiveMusic;
			}
			set
			{
				if ((this._IsLiveMusic != value))
				{
					this.OnIsLiveMusicChanging(value);
					this.SendPropertyChanging();
					this._IsLiveMusic = value;
					this.SendPropertyChanged("IsLiveMusic");
					this.OnIsLiveMusicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsStageAndMic", DbType="Bit")]
		public System.Nullable<bool> IsStageAndMic
		{
			get
			{
				return this._IsStageAndMic;
			}
			set
			{
				if ((this._IsStageAndMic != value))
				{
					this.OnIsStageAndMicChanging(value);
					this.SendPropertyChanging();
					this._IsStageAndMic = value;
					this.SendPropertyChanged("IsStageAndMic");
					this.OnIsStageAndMicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISActivityEntertainment", DbType="Bit")]
		public System.Nullable<bool> ISActivityEntertainment
		{
			get
			{
				return this._ISActivityEntertainment;
			}
			set
			{
				if ((this._ISActivityEntertainment != value))
				{
					this.OnISActivityEntertainmentChanging(value);
					this.SendPropertyChanging();
					this._ISActivityEntertainment = value;
					this.SendPropertyChanged("ISActivityEntertainment");
					this.OnISActivityEntertainmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsOthers", DbType="Bit")]
		public System.Nullable<bool> IsOthers
		{
			get
			{
				return this._IsOthers;
			}
			set
			{
				if ((this._IsOthers != value))
				{
					this.OnIsOthersChanging(value);
					this.SendPropertyChanging();
					this._IsOthers = value;
					this.SendPropertyChanged("IsOthers");
					this.OnIsOthersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobDetail_JobDetailEvent", Storage="_JobDetail", ThisKey="JobDetailsId", OtherKey="Id", IsForeignKey=true)]
		public JobDetail JobDetail
		{
			get
			{
				return this._JobDetail.Entity;
			}
			set
			{
				JobDetail previousValue = this._JobDetail.Entity;
				if (((previousValue != value) 
							|| (this._JobDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobDetail.Entity = null;
						previousValue.JobDetailEvents.Remove(this);
					}
					this._JobDetail.Entity = value;
					if ((value != null))
					{
						value.JobDetailEvents.Add(this);
						this._JobDetailsId = value.Id;
					}
					else
					{
						this._JobDetailsId = default(int);
					}
					this.SendPropertyChanged("JobDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobDetailInterior")]
	public partial class JobDetailInterior : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _PropertyTypeId;
		
		private string _NumberOfRooms;
		
		private string _TotalSpace;
		
		private System.Nullable<int> _NumberOfDesks;
		
		private System.Nullable<bool> _IsDemolition;
		
		private System.Nullable<bool> _IsDesign;
		
		private System.Nullable<bool> _IsFurniture;
		
		private System.Nullable<bool> _IsFitout;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private int _JobDetailId;
		
		private EntityRef<JobDetail> _JobDetail;
		
		private EntityRef<PropertyType> _PropertyType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPropertyTypeIdChanging(System.Nullable<int> value);
    partial void OnPropertyTypeIdChanged();
    partial void OnNumberOfRoomsChanging(string value);
    partial void OnNumberOfRoomsChanged();
    partial void OnTotalSpaceChanging(string value);
    partial void OnTotalSpaceChanged();
    partial void OnNumberOfDesksChanging(System.Nullable<int> value);
    partial void OnNumberOfDesksChanged();
    partial void OnIsDemolitionChanging(System.Nullable<bool> value);
    partial void OnIsDemolitionChanged();
    partial void OnIsDesignChanging(System.Nullable<bool> value);
    partial void OnIsDesignChanged();
    partial void OnIsFurnitureChanging(System.Nullable<bool> value);
    partial void OnIsFurnitureChanged();
    partial void OnIsFitoutChanging(System.Nullable<bool> value);
    partial void OnIsFitoutChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnJobDetailIdChanging(int value);
    partial void OnJobDetailIdChanged();
    #endregion
		
		public JobDetailInterior()
		{
			this._JobDetail = default(EntityRef<JobDetail>);
			this._PropertyType = default(EntityRef<PropertyType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyTypeId", DbType="Int")]
		public System.Nullable<int> PropertyTypeId
		{
			get
			{
				return this._PropertyTypeId;
			}
			set
			{
				if ((this._PropertyTypeId != value))
				{
					if (this._PropertyType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPropertyTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PropertyTypeId = value;
					this.SendPropertyChanged("PropertyTypeId");
					this.OnPropertyTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfRooms", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string NumberOfRooms
		{
			get
			{
				return this._NumberOfRooms;
			}
			set
			{
				if ((this._NumberOfRooms != value))
				{
					this.OnNumberOfRoomsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfRooms = value;
					this.SendPropertyChanged("NumberOfRooms");
					this.OnNumberOfRoomsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalSpace", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string TotalSpace
		{
			get
			{
				return this._TotalSpace;
			}
			set
			{
				if ((this._TotalSpace != value))
				{
					this.OnTotalSpaceChanging(value);
					this.SendPropertyChanging();
					this._TotalSpace = value;
					this.SendPropertyChanged("TotalSpace");
					this.OnTotalSpaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfDesks", DbType="Int")]
		public System.Nullable<int> NumberOfDesks
		{
			get
			{
				return this._NumberOfDesks;
			}
			set
			{
				if ((this._NumberOfDesks != value))
				{
					this.OnNumberOfDesksChanging(value);
					this.SendPropertyChanging();
					this._NumberOfDesks = value;
					this.SendPropertyChanged("NumberOfDesks");
					this.OnNumberOfDesksChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDemolition", DbType="Bit")]
		public System.Nullable<bool> IsDemolition
		{
			get
			{
				return this._IsDemolition;
			}
			set
			{
				if ((this._IsDemolition != value))
				{
					this.OnIsDemolitionChanging(value);
					this.SendPropertyChanging();
					this._IsDemolition = value;
					this.SendPropertyChanged("IsDemolition");
					this.OnIsDemolitionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDesign", DbType="Bit")]
		public System.Nullable<bool> IsDesign
		{
			get
			{
				return this._IsDesign;
			}
			set
			{
				if ((this._IsDesign != value))
				{
					this.OnIsDesignChanging(value);
					this.SendPropertyChanging();
					this._IsDesign = value;
					this.SendPropertyChanged("IsDesign");
					this.OnIsDesignChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFurniture", DbType="Bit")]
		public System.Nullable<bool> IsFurniture
		{
			get
			{
				return this._IsFurniture;
			}
			set
			{
				if ((this._IsFurniture != value))
				{
					this.OnIsFurnitureChanging(value);
					this.SendPropertyChanging();
					this._IsFurniture = value;
					this.SendPropertyChanged("IsFurniture");
					this.OnIsFurnitureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFitout", DbType="Bit")]
		public System.Nullable<bool> IsFitout
		{
			get
			{
				return this._IsFitout;
			}
			set
			{
				if ((this._IsFitout != value))
				{
					this.OnIsFitoutChanging(value);
					this.SendPropertyChanging();
					this._IsFitout = value;
					this.SendPropertyChanged("IsFitout");
					this.OnIsFitoutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobDetailId", DbType="Int NOT NULL")]
		public int JobDetailId
		{
			get
			{
				return this._JobDetailId;
			}
			set
			{
				if ((this._JobDetailId != value))
				{
					if (this._JobDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobDetailIdChanging(value);
					this.SendPropertyChanging();
					this._JobDetailId = value;
					this.SendPropertyChanged("JobDetailId");
					this.OnJobDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobDetail_JobDetailInterior", Storage="_JobDetail", ThisKey="JobDetailId", OtherKey="Id", IsForeignKey=true)]
		public JobDetail JobDetail
		{
			get
			{
				return this._JobDetail.Entity;
			}
			set
			{
				JobDetail previousValue = this._JobDetail.Entity;
				if (((previousValue != value) 
							|| (this._JobDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobDetail.Entity = null;
						previousValue.JobDetailInteriors.Remove(this);
					}
					this._JobDetail.Entity = value;
					if ((value != null))
					{
						value.JobDetailInteriors.Add(this);
						this._JobDetailId = value.Id;
					}
					else
					{
						this._JobDetailId = default(int);
					}
					this.SendPropertyChanged("JobDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PropertyType_JobDetailInterior", Storage="_PropertyType", ThisKey="PropertyTypeId", OtherKey="Id", IsForeignKey=true)]
		public PropertyType PropertyType
		{
			get
			{
				return this._PropertyType.Entity;
			}
			set
			{
				PropertyType previousValue = this._PropertyType.Entity;
				if (((previousValue != value) 
							|| (this._PropertyType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PropertyType.Entity = null;
						previousValue.JobDetailInteriors.Remove(this);
					}
					this._PropertyType.Entity = value;
					if ((value != null))
					{
						value.JobDetailInteriors.Add(this);
						this._PropertyTypeId = value.Id;
					}
					else
					{
						this._PropertyTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PropertyType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobDetailsConsulting")]
	public partial class JobDetailsConsulting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _JobDetailId;
		
		private System.Nullable<bool> _IsDeparture;
		
		private System.Nullable<bool> _IsArriival;
		
		private string _AirportName;
		
		private System.Nullable<System.DateTime> _FlightDateTime;
		
		private string _FlightNumber;
		
		private System.Nullable<bool> _IsLoungeInclude;
		
		private string _PickUpPlace;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private string _ReturnAirportName;
		
		private System.Nullable<System.DateTime> _ReturnFlightDateTime;
		
		private string _ReturnFlightNumber;
		
		private string _ReturnDropOffPlace;
		
		private System.Nullable<bool> _IsReturn;
		
		private string _CarType;
		
		private System.Nullable<int> _NumberOfPassengers;
		
		private string _ReturnCarType;
		
		private System.Nullable<int> _ReturnNumberOfPassengers;
		
		private EntityRef<JobDetail> _JobDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnJobDetailIdChanging(int value);
    partial void OnJobDetailIdChanged();
    partial void OnIsDepartureChanging(System.Nullable<bool> value);
    partial void OnIsDepartureChanged();
    partial void OnIsArriivalChanging(System.Nullable<bool> value);
    partial void OnIsArriivalChanged();
    partial void OnAirportNameChanging(string value);
    partial void OnAirportNameChanged();
    partial void OnFlightDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnFlightDateTimeChanged();
    partial void OnFlightNumberChanging(string value);
    partial void OnFlightNumberChanged();
    partial void OnIsLoungeIncludeChanging(System.Nullable<bool> value);
    partial void OnIsLoungeIncludeChanged();
    partial void OnPickUpPlaceChanging(string value);
    partial void OnPickUpPlaceChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnReturnAirportNameChanging(string value);
    partial void OnReturnAirportNameChanged();
    partial void OnReturnFlightDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnReturnFlightDateTimeChanged();
    partial void OnReturnFlightNumberChanging(string value);
    partial void OnReturnFlightNumberChanged();
    partial void OnReturnDropOffPlaceChanging(string value);
    partial void OnReturnDropOffPlaceChanged();
    partial void OnIsReturnChanging(System.Nullable<bool> value);
    partial void OnIsReturnChanged();
    partial void OnCarTypeChanging(string value);
    partial void OnCarTypeChanged();
    partial void OnNumberOfPassengersChanging(System.Nullable<int> value);
    partial void OnNumberOfPassengersChanged();
    partial void OnReturnCarTypeChanging(string value);
    partial void OnReturnCarTypeChanged();
    partial void OnReturnNumberOfPassengersChanging(System.Nullable<int> value);
    partial void OnReturnNumberOfPassengersChanged();
    #endregion
		
		public JobDetailsConsulting()
		{
			this._JobDetail = default(EntityRef<JobDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobDetailId", DbType="Int NOT NULL")]
		public int JobDetailId
		{
			get
			{
				return this._JobDetailId;
			}
			set
			{
				if ((this._JobDetailId != value))
				{
					if (this._JobDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobDetailIdChanging(value);
					this.SendPropertyChanging();
					this._JobDetailId = value;
					this.SendPropertyChanged("JobDetailId");
					this.OnJobDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeparture", DbType="Bit")]
		public System.Nullable<bool> IsDeparture
		{
			get
			{
				return this._IsDeparture;
			}
			set
			{
				if ((this._IsDeparture != value))
				{
					this.OnIsDepartureChanging(value);
					this.SendPropertyChanging();
					this._IsDeparture = value;
					this.SendPropertyChanged("IsDeparture");
					this.OnIsDepartureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsArriival", DbType="Bit")]
		public System.Nullable<bool> IsArriival
		{
			get
			{
				return this._IsArriival;
			}
			set
			{
				if ((this._IsArriival != value))
				{
					this.OnIsArriivalChanging(value);
					this.SendPropertyChanging();
					this._IsArriival = value;
					this.SendPropertyChanged("IsArriival");
					this.OnIsArriivalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AirportName", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string AirportName
		{
			get
			{
				return this._AirportName;
			}
			set
			{
				if ((this._AirportName != value))
				{
					this.OnAirportNameChanging(value);
					this.SendPropertyChanging();
					this._AirportName = value;
					this.SendPropertyChanged("AirportName");
					this.OnAirportNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlightDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> FlightDateTime
		{
			get
			{
				return this._FlightDateTime;
			}
			set
			{
				if ((this._FlightDateTime != value))
				{
					this.OnFlightDateTimeChanging(value);
					this.SendPropertyChanging();
					this._FlightDateTime = value;
					this.SendPropertyChanged("FlightDateTime");
					this.OnFlightDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlightNumber", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string FlightNumber
		{
			get
			{
				return this._FlightNumber;
			}
			set
			{
				if ((this._FlightNumber != value))
				{
					this.OnFlightNumberChanging(value);
					this.SendPropertyChanging();
					this._FlightNumber = value;
					this.SendPropertyChanged("FlightNumber");
					this.OnFlightNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLoungeInclude", DbType="Bit")]
		public System.Nullable<bool> IsLoungeInclude
		{
			get
			{
				return this._IsLoungeInclude;
			}
			set
			{
				if ((this._IsLoungeInclude != value))
				{
					this.OnIsLoungeIncludeChanging(value);
					this.SendPropertyChanging();
					this._IsLoungeInclude = value;
					this.SendPropertyChanged("IsLoungeInclude");
					this.OnIsLoungeIncludeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PickUpPlace", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string PickUpPlace
		{
			get
			{
				return this._PickUpPlace;
			}
			set
			{
				if ((this._PickUpPlace != value))
				{
					this.OnPickUpPlaceChanging(value);
					this.SendPropertyChanging();
					this._PickUpPlace = value;
					this.SendPropertyChanged("PickUpPlace");
					this.OnPickUpPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnAirportName", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string ReturnAirportName
		{
			get
			{
				return this._ReturnAirportName;
			}
			set
			{
				if ((this._ReturnAirportName != value))
				{
					this.OnReturnAirportNameChanging(value);
					this.SendPropertyChanging();
					this._ReturnAirportName = value;
					this.SendPropertyChanged("ReturnAirportName");
					this.OnReturnAirportNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnFlightDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReturnFlightDateTime
		{
			get
			{
				return this._ReturnFlightDateTime;
			}
			set
			{
				if ((this._ReturnFlightDateTime != value))
				{
					this.OnReturnFlightDateTimeChanging(value);
					this.SendPropertyChanging();
					this._ReturnFlightDateTime = value;
					this.SendPropertyChanged("ReturnFlightDateTime");
					this.OnReturnFlightDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnFlightNumber", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string ReturnFlightNumber
		{
			get
			{
				return this._ReturnFlightNumber;
			}
			set
			{
				if ((this._ReturnFlightNumber != value))
				{
					this.OnReturnFlightNumberChanging(value);
					this.SendPropertyChanging();
					this._ReturnFlightNumber = value;
					this.SendPropertyChanged("ReturnFlightNumber");
					this.OnReturnFlightNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnDropOffPlace", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string ReturnDropOffPlace
		{
			get
			{
				return this._ReturnDropOffPlace;
			}
			set
			{
				if ((this._ReturnDropOffPlace != value))
				{
					this.OnReturnDropOffPlaceChanging(value);
					this.SendPropertyChanging();
					this._ReturnDropOffPlace = value;
					this.SendPropertyChanged("ReturnDropOffPlace");
					this.OnReturnDropOffPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsReturn", DbType="Bit")]
		public System.Nullable<bool> IsReturn
		{
			get
			{
				return this._IsReturn;
			}
			set
			{
				if ((this._IsReturn != value))
				{
					this.OnIsReturnChanging(value);
					this.SendPropertyChanging();
					this._IsReturn = value;
					this.SendPropertyChanged("IsReturn");
					this.OnIsReturnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarType", DbType="NVarChar(1600)")]
		public string CarType
		{
			get
			{
				return this._CarType;
			}
			set
			{
				if ((this._CarType != value))
				{
					this.OnCarTypeChanging(value);
					this.SendPropertyChanging();
					this._CarType = value;
					this.SendPropertyChanged("CarType");
					this.OnCarTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfPassengers", DbType="Int")]
		public System.Nullable<int> NumberOfPassengers
		{
			get
			{
				return this._NumberOfPassengers;
			}
			set
			{
				if ((this._NumberOfPassengers != value))
				{
					this.OnNumberOfPassengersChanging(value);
					this.SendPropertyChanging();
					this._NumberOfPassengers = value;
					this.SendPropertyChanged("NumberOfPassengers");
					this.OnNumberOfPassengersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnCarType", DbType="NVarChar(1600)")]
		public string ReturnCarType
		{
			get
			{
				return this._ReturnCarType;
			}
			set
			{
				if ((this._ReturnCarType != value))
				{
					this.OnReturnCarTypeChanging(value);
					this.SendPropertyChanging();
					this._ReturnCarType = value;
					this.SendPropertyChanged("ReturnCarType");
					this.OnReturnCarTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnNumberOfPassengers", DbType="Int")]
		public System.Nullable<int> ReturnNumberOfPassengers
		{
			get
			{
				return this._ReturnNumberOfPassengers;
			}
			set
			{
				if ((this._ReturnNumberOfPassengers != value))
				{
					this.OnReturnNumberOfPassengersChanging(value);
					this.SendPropertyChanging();
					this._ReturnNumberOfPassengers = value;
					this.SendPropertyChanged("ReturnNumberOfPassengers");
					this.OnReturnNumberOfPassengersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobDetail_JobDetailsConsulting", Storage="_JobDetail", ThisKey="JobDetailId", OtherKey="Id", IsForeignKey=true)]
		public JobDetail JobDetail
		{
			get
			{
				return this._JobDetail.Entity;
			}
			set
			{
				JobDetail previousValue = this._JobDetail.Entity;
				if (((previousValue != value) 
							|| (this._JobDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobDetail.Entity = null;
						previousValue.JobDetailsConsultings.Remove(this);
					}
					this._JobDetail.Entity = value;
					if ((value != null))
					{
						value.JobDetailsConsultings.Add(this);
						this._JobDetailId = value.Id;
					}
					else
					{
						this._JobDetailId = default(int);
					}
					this.SendPropertyChanged("JobDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobdetailsFurniture")]
	public partial class JobdetailsFurniture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _LabelName;
		
		private string _CustomValue;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private int _JobDetailId;
		
		private EntityRef<JobDetail> _JobDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLabelNameChanging(string value);
    partial void OnLabelNameChanged();
    partial void OnCustomValueChanging(string value);
    partial void OnCustomValueChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnJobDetailIdChanging(int value);
    partial void OnJobDetailIdChanged();
    #endregion
		
		public JobdetailsFurniture()
		{
			this._JobDetail = default(EntityRef<JobDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabelName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string LabelName
		{
			get
			{
				return this._LabelName;
			}
			set
			{
				if ((this._LabelName != value))
				{
					this.OnLabelNameChanging(value);
					this.SendPropertyChanging();
					this._LabelName = value;
					this.SendPropertyChanged("LabelName");
					this.OnLabelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomValue", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string CustomValue
		{
			get
			{
				return this._CustomValue;
			}
			set
			{
				if ((this._CustomValue != value))
				{
					this.OnCustomValueChanging(value);
					this.SendPropertyChanging();
					this._CustomValue = value;
					this.SendPropertyChanged("CustomValue");
					this.OnCustomValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobDetailId", DbType="Int NOT NULL")]
		public int JobDetailId
		{
			get
			{
				return this._JobDetailId;
			}
			set
			{
				if ((this._JobDetailId != value))
				{
					if (this._JobDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobDetailIdChanging(value);
					this.SendPropertyChanging();
					this._JobDetailId = value;
					this.SendPropertyChanged("JobDetailId");
					this.OnJobDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobDetail_JobdetailsFurniture", Storage="_JobDetail", ThisKey="JobDetailId", OtherKey="Id", IsForeignKey=true)]
		public JobDetail JobDetail
		{
			get
			{
				return this._JobDetail.Entity;
			}
			set
			{
				JobDetail previousValue = this._JobDetail.Entity;
				if (((previousValue != value) 
							|| (this._JobDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobDetail.Entity = null;
						previousValue.JobdetailsFurnitures.Remove(this);
					}
					this._JobDetail.Entity = value;
					if ((value != null))
					{
						value.JobdetailsFurnitures.Add(this);
						this._JobDetailId = value.Id;
					}
					else
					{
						this._JobDetailId = default(int);
					}
					this.SendPropertyChanged("JobDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobDetailWall")]
	public partial class JobDetailWall : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Length;
		
		private string _Width;
		
		private string _Color;
		
		private int _JobDetailId;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntityRef<JobDetail> _JobDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLengthChanging(string value);
    partial void OnLengthChanged();
    partial void OnWidthChanging(string value);
    partial void OnWidthChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnJobDetailIdChanging(int value);
    partial void OnJobDetailIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public JobDetailWall()
		{
			this._JobDetail = default(EntityRef<JobDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="NVarChar(1600)")]
		public string Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="NVarChar(1600)")]
		public string Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="NVarChar(1600)")]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobDetailId", DbType="Int NOT NULL")]
		public int JobDetailId
		{
			get
			{
				return this._JobDetailId;
			}
			set
			{
				if ((this._JobDetailId != value))
				{
					if (this._JobDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobDetailIdChanging(value);
					this.SendPropertyChanging();
					this._JobDetailId = value;
					this.SendPropertyChanged("JobDetailId");
					this.OnJobDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobDetail_JobDetailWall", Storage="_JobDetail", ThisKey="JobDetailId", OtherKey="Id", IsForeignKey=true)]
		public JobDetail JobDetail
		{
			get
			{
				return this._JobDetail.Entity;
			}
			set
			{
				JobDetail previousValue = this._JobDetail.Entity;
				if (((previousValue != value) 
							|| (this._JobDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobDetail.Entity = null;
						previousValue.JobDetailWalls.Remove(this);
					}
					this._JobDetail.Entity = value;
					if ((value != null))
					{
						value.JobDetailWalls.Add(this);
						this._JobDetailId = value.Id;
					}
					else
					{
						this._JobDetailId = default(int);
					}
					this.SendPropertyChanged("JobDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobDetailWindow")]
	public partial class JobDetailWindow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _WindowPart;
		
		private string _Height;
		
		private string _Width;
		
		private string _Color;
		
		private string _BlackOutPercent;
		
		private System.Nullable<bool> _IsDoubleRodWhile;
		
		private string _Custain;
		
		private int _JobDetailId;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntityRef<JobDetail> _JobDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnWindowPartChanging(string value);
    partial void OnWindowPartChanged();
    partial void OnHeightChanging(string value);
    partial void OnHeightChanged();
    partial void OnWidthChanging(string value);
    partial void OnWidthChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnBlackOutPercentChanging(string value);
    partial void OnBlackOutPercentChanged();
    partial void OnIsDoubleRodWhileChanging(System.Nullable<bool> value);
    partial void OnIsDoubleRodWhileChanged();
    partial void OnCustainChanging(string value);
    partial void OnCustainChanged();
    partial void OnJobDetailIdChanging(int value);
    partial void OnJobDetailIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public JobDetailWindow()
		{
			this._JobDetail = default(EntityRef<JobDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WindowPart", DbType="NVarChar(1600)")]
		public string WindowPart
		{
			get
			{
				return this._WindowPart;
			}
			set
			{
				if ((this._WindowPart != value))
				{
					this.OnWindowPartChanging(value);
					this.SendPropertyChanging();
					this._WindowPart = value;
					this.SendPropertyChanged("WindowPart");
					this.OnWindowPartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="NVarChar(1600)")]
		public string Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="NVarChar(1600)")]
		public string Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="NVarChar(1600)")]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlackOutPercent", DbType="NVarChar(1600)")]
		public string BlackOutPercent
		{
			get
			{
				return this._BlackOutPercent;
			}
			set
			{
				if ((this._BlackOutPercent != value))
				{
					this.OnBlackOutPercentChanging(value);
					this.SendPropertyChanging();
					this._BlackOutPercent = value;
					this.SendPropertyChanged("BlackOutPercent");
					this.OnBlackOutPercentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDoubleRodWhile", DbType="Bit")]
		public System.Nullable<bool> IsDoubleRodWhile
		{
			get
			{
				return this._IsDoubleRodWhile;
			}
			set
			{
				if ((this._IsDoubleRodWhile != value))
				{
					this.OnIsDoubleRodWhileChanging(value);
					this.SendPropertyChanging();
					this._IsDoubleRodWhile = value;
					this.SendPropertyChanged("IsDoubleRodWhile");
					this.OnIsDoubleRodWhileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Custain", DbType="NVarChar(1600)")]
		public string Custain
		{
			get
			{
				return this._Custain;
			}
			set
			{
				if ((this._Custain != value))
				{
					this.OnCustainChanging(value);
					this.SendPropertyChanging();
					this._Custain = value;
					this.SendPropertyChanged("Custain");
					this.OnCustainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobDetailId", DbType="Int NOT NULL")]
		public int JobDetailId
		{
			get
			{
				return this._JobDetailId;
			}
			set
			{
				if ((this._JobDetailId != value))
				{
					if (this._JobDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobDetailIdChanging(value);
					this.SendPropertyChanging();
					this._JobDetailId = value;
					this.SendPropertyChanged("JobDetailId");
					this.OnJobDetailIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobDetail_JobDetailWindow", Storage="_JobDetail", ThisKey="JobDetailId", OtherKey="Id", IsForeignKey=true)]
		public JobDetail JobDetail
		{
			get
			{
				return this._JobDetail.Entity;
			}
			set
			{
				JobDetail previousValue = this._JobDetail.Entity;
				if (((previousValue != value) 
							|| (this._JobDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobDetail.Entity = null;
						previousValue.JobDetailWindows.Remove(this);
					}
					this._JobDetail.Entity = value;
					if ((value != null))
					{
						value.JobDetailWindows.Add(this);
						this._JobDetailId = value.Id;
					}
					else
					{
						this._JobDetailId = default(int);
					}
					this.SendPropertyChanged("JobDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobPaymentType")]
	public partial class JobPaymentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _TypeName;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<JobDetail> _JobDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public JobPaymentType()
		{
			this._JobDetails = new EntitySet<JobDetail>(new Action<JobDetail>(this.attach_JobDetails), new Action<JobDetail>(this.detach_JobDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobPaymentType_JobDetail", Storage="_JobDetails", ThisKey="Id", OtherKey="PaymentTypeId")]
		public EntitySet<JobDetail> JobDetails
		{
			get
			{
				return this._JobDetails;
			}
			set
			{
				this._JobDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JobDetails(JobDetail entity)
		{
			this.SendPropertyChanging();
			entity.JobPaymentType = this;
		}
		
		private void detach_JobDetails(JobDetail entity)
		{
			this.SendPropertyChanging();
			entity.JobPaymentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Jobs")]
	public partial class Job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _JobName;
		
		private int _CategoryId;
		
		private System.Nullable<int> _SubCategoryId;
		
		private System.Nullable<System.DateTime> _JobStartDate;
		
		private System.Nullable<int> _TotalNumberOfDaysrequired;
		
		private string _JobDescription;
		
		private System.Nullable<int> _FixedBudgetAmount;
		
		private System.Nullable<int> _BudgetAmount;
		
		private bool _IsBidgetFixed;
		
		private System.Nullable<System.DateTime> _LimitForBidingTime;
		
		private int _JobStatusId;
		
		private int _CreatedByUserId;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private System.Nullable<System.DateTime> _AddedOn;
		
		private System.Nullable<System.DateTime> _JobStartDate2;
		
		private System.Nullable<int> _BidingLimitNumber;
		
		private string _BidingLimitType;
		
		private EntitySet<ChatRoom> _ChatRooms;
		
		private EntitySet<EmailTemplate> _EmailTemplates;
		
		private EntitySet<JobAttachment> _JobAttachments;
		
		private EntitySet<JobDetail> _JobDetails;
		
		private EntitySet<UserBid> _UserBids;
		
		private EntitySet<UserJobAgreement> _UserJobAgreements;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<JobStatus> _JobStatus;
		
		private EntityRef<SubCategory> _SubCategory;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnJobNameChanging(string value);
    partial void OnJobNameChanged();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnSubCategoryIdChanging(System.Nullable<int> value);
    partial void OnSubCategoryIdChanged();
    partial void OnJobStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnJobStartDateChanged();
    partial void OnTotalNumberOfDaysrequiredChanging(System.Nullable<int> value);
    partial void OnTotalNumberOfDaysrequiredChanged();
    partial void OnJobDescriptionChanging(string value);
    partial void OnJobDescriptionChanged();
    partial void OnFixedBudgetAmountChanging(System.Nullable<int> value);
    partial void OnFixedBudgetAmountChanged();
    partial void OnBudgetAmountChanging(System.Nullable<int> value);
    partial void OnBudgetAmountChanged();
    partial void OnIsBidgetFixedChanging(bool value);
    partial void OnIsBidgetFixedChanged();
    partial void OnLimitForBidingTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLimitForBidingTimeChanged();
    partial void OnJobStatusIdChanging(int value);
    partial void OnJobStatusIdChanged();
    partial void OnCreatedByUserIdChanging(int value);
    partial void OnCreatedByUserIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnAddedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnAddedOnChanged();
    partial void OnJobStartDate2Changing(System.Nullable<System.DateTime> value);
    partial void OnJobStartDate2Changed();
    partial void OnBidingLimitNumberChanging(System.Nullable<int> value);
    partial void OnBidingLimitNumberChanged();
    partial void OnBidingLimitTypeChanging(string value);
    partial void OnBidingLimitTypeChanged();
    #endregion
		
		public Job()
		{
			this._ChatRooms = new EntitySet<ChatRoom>(new Action<ChatRoom>(this.attach_ChatRooms), new Action<ChatRoom>(this.detach_ChatRooms));
			this._EmailTemplates = new EntitySet<EmailTemplate>(new Action<EmailTemplate>(this.attach_EmailTemplates), new Action<EmailTemplate>(this.detach_EmailTemplates));
			this._JobAttachments = new EntitySet<JobAttachment>(new Action<JobAttachment>(this.attach_JobAttachments), new Action<JobAttachment>(this.detach_JobAttachments));
			this._JobDetails = new EntitySet<JobDetail>(new Action<JobDetail>(this.attach_JobDetails), new Action<JobDetail>(this.detach_JobDetails));
			this._UserBids = new EntitySet<UserBid>(new Action<UserBid>(this.attach_UserBids), new Action<UserBid>(this.detach_UserBids));
			this._UserJobAgreements = new EntitySet<UserJobAgreement>(new Action<UserJobAgreement>(this.attach_UserJobAgreements), new Action<UserJobAgreement>(this.detach_UserJobAgreements));
			this._Category = default(EntityRef<Category>);
			this._JobStatus = default(EntityRef<JobStatus>);
			this._SubCategory = default(EntityRef<SubCategory>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string JobName
		{
			get
			{
				return this._JobName;
			}
			set
			{
				if ((this._JobName != value))
				{
					this.OnJobNameChanging(value);
					this.SendPropertyChanging();
					this._JobName = value;
					this.SendPropertyChanged("JobName");
					this.OnJobNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int NOT NULL")]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCategoryId", DbType="Int")]
		public System.Nullable<int> SubCategoryId
		{
			get
			{
				return this._SubCategoryId;
			}
			set
			{
				if ((this._SubCategoryId != value))
				{
					if (this._SubCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._SubCategoryId = value;
					this.SendPropertyChanged("SubCategoryId");
					this.OnSubCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> JobStartDate
		{
			get
			{
				return this._JobStartDate;
			}
			set
			{
				if ((this._JobStartDate != value))
				{
					this.OnJobStartDateChanging(value);
					this.SendPropertyChanging();
					this._JobStartDate = value;
					this.SendPropertyChanged("JobStartDate");
					this.OnJobStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalNumberOfDaysrequired", DbType="Int")]
		public System.Nullable<int> TotalNumberOfDaysrequired
		{
			get
			{
				return this._TotalNumberOfDaysrequired;
			}
			set
			{
				if ((this._TotalNumberOfDaysrequired != value))
				{
					this.OnTotalNumberOfDaysrequiredChanging(value);
					this.SendPropertyChanging();
					this._TotalNumberOfDaysrequired = value;
					this.SendPropertyChanged("TotalNumberOfDaysrequired");
					this.OnTotalNumberOfDaysrequiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobDescription", DbType="NVarChar(MAX)")]
		public string JobDescription
		{
			get
			{
				return this._JobDescription;
			}
			set
			{
				if ((this._JobDescription != value))
				{
					this.OnJobDescriptionChanging(value);
					this.SendPropertyChanging();
					this._JobDescription = value;
					this.SendPropertyChanged("JobDescription");
					this.OnJobDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FixedBudgetAmount", DbType="Int")]
		public System.Nullable<int> FixedBudgetAmount
		{
			get
			{
				return this._FixedBudgetAmount;
			}
			set
			{
				if ((this._FixedBudgetAmount != value))
				{
					this.OnFixedBudgetAmountChanging(value);
					this.SendPropertyChanging();
					this._FixedBudgetAmount = value;
					this.SendPropertyChanged("FixedBudgetAmount");
					this.OnFixedBudgetAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BudgetAmount", DbType="Int")]
		public System.Nullable<int> BudgetAmount
		{
			get
			{
				return this._BudgetAmount;
			}
			set
			{
				if ((this._BudgetAmount != value))
				{
					this.OnBudgetAmountChanging(value);
					this.SendPropertyChanging();
					this._BudgetAmount = value;
					this.SendPropertyChanged("BudgetAmount");
					this.OnBudgetAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBidgetFixed", DbType="Bit NOT NULL")]
		public bool IsBidgetFixed
		{
			get
			{
				return this._IsBidgetFixed;
			}
			set
			{
				if ((this._IsBidgetFixed != value))
				{
					this.OnIsBidgetFixedChanging(value);
					this.SendPropertyChanging();
					this._IsBidgetFixed = value;
					this.SendPropertyChanged("IsBidgetFixed");
					this.OnIsBidgetFixedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LimitForBidingTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LimitForBidingTime
		{
			get
			{
				return this._LimitForBidingTime;
			}
			set
			{
				if ((this._LimitForBidingTime != value))
				{
					this.OnLimitForBidingTimeChanging(value);
					this.SendPropertyChanging();
					this._LimitForBidingTime = value;
					this.SendPropertyChanged("LimitForBidingTime");
					this.OnLimitForBidingTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobStatusId", DbType="Int NOT NULL")]
		public int JobStatusId
		{
			get
			{
				return this._JobStatusId;
			}
			set
			{
				if ((this._JobStatusId != value))
				{
					if (this._JobStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobStatusIdChanging(value);
					this.SendPropertyChanging();
					this._JobStatusId = value;
					this.SendPropertyChanged("JobStatusId");
					this.OnJobStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedByUserId", DbType="Int NOT NULL")]
		public int CreatedByUserId
		{
			get
			{
				return this._CreatedByUserId;
			}
			set
			{
				if ((this._CreatedByUserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedByUserId = value;
					this.SendPropertyChanged("CreatedByUserId");
					this.OnCreatedByUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddedOn
		{
			get
			{
				return this._AddedOn;
			}
			set
			{
				if ((this._AddedOn != value))
				{
					this.OnAddedOnChanging(value);
					this.SendPropertyChanging();
					this._AddedOn = value;
					this.SendPropertyChanged("AddedOn");
					this.OnAddedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobStartDate2", DbType="DateTime")]
		public System.Nullable<System.DateTime> JobStartDate2
		{
			get
			{
				return this._JobStartDate2;
			}
			set
			{
				if ((this._JobStartDate2 != value))
				{
					this.OnJobStartDate2Changing(value);
					this.SendPropertyChanging();
					this._JobStartDate2 = value;
					this.SendPropertyChanged("JobStartDate2");
					this.OnJobStartDate2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BidingLimitNumber", DbType="Int")]
		public System.Nullable<int> BidingLimitNumber
		{
			get
			{
				return this._BidingLimitNumber;
			}
			set
			{
				if ((this._BidingLimitNumber != value))
				{
					this.OnBidingLimitNumberChanging(value);
					this.SendPropertyChanging();
					this._BidingLimitNumber = value;
					this.SendPropertyChanged("BidingLimitNumber");
					this.OnBidingLimitNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BidingLimitType", DbType="NVarChar(1500)")]
		public string BidingLimitType
		{
			get
			{
				return this._BidingLimitType;
			}
			set
			{
				if ((this._BidingLimitType != value))
				{
					this.OnBidingLimitTypeChanging(value);
					this.SendPropertyChanging();
					this._BidingLimitType = value;
					this.SendPropertyChanged("BidingLimitType");
					this.OnBidingLimitTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_ChatRoom", Storage="_ChatRooms", ThisKey="Id", OtherKey="JobId")]
		public EntitySet<ChatRoom> ChatRooms
		{
			get
			{
				return this._ChatRooms;
			}
			set
			{
				this._ChatRooms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_EmailTemplate", Storage="_EmailTemplates", ThisKey="Id", OtherKey="JobId")]
		public EntitySet<EmailTemplate> EmailTemplates
		{
			get
			{
				return this._EmailTemplates;
			}
			set
			{
				this._EmailTemplates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_JobAttachment", Storage="_JobAttachments", ThisKey="Id", OtherKey="JobId")]
		public EntitySet<JobAttachment> JobAttachments
		{
			get
			{
				return this._JobAttachments;
			}
			set
			{
				this._JobAttachments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_JobDetail", Storage="_JobDetails", ThisKey="Id", OtherKey="JobId")]
		public EntitySet<JobDetail> JobDetails
		{
			get
			{
				return this._JobDetails;
			}
			set
			{
				this._JobDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_UserBid", Storage="_UserBids", ThisKey="Id", OtherKey="JobId")]
		public EntitySet<UserBid> UserBids
		{
			get
			{
				return this._UserBids;
			}
			set
			{
				this._UserBids.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_UserJobAgreement", Storage="_UserJobAgreements", ThisKey="Id", OtherKey="JobId")]
		public EntitySet<UserJobAgreement> UserJobAgreements
		{
			get
			{
				return this._UserJobAgreements;
			}
			set
			{
				this._UserJobAgreements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Job", Storage="_Category", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Jobs.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Jobs.Add(this);
						this._CategoryId = value.Id;
					}
					else
					{
						this._CategoryId = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobStatus_Job", Storage="_JobStatus", ThisKey="JobStatusId", OtherKey="Id", IsForeignKey=true)]
		public JobStatus JobStatus
		{
			get
			{
				return this._JobStatus.Entity;
			}
			set
			{
				JobStatus previousValue = this._JobStatus.Entity;
				if (((previousValue != value) 
							|| (this._JobStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobStatus.Entity = null;
						previousValue.Jobs.Remove(this);
					}
					this._JobStatus.Entity = value;
					if ((value != null))
					{
						value.Jobs.Add(this);
						this._JobStatusId = value.Id;
					}
					else
					{
						this._JobStatusId = default(int);
					}
					this.SendPropertyChanged("JobStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubCategory_Job", Storage="_SubCategory", ThisKey="SubCategoryId", OtherKey="Id", IsForeignKey=true)]
		public SubCategory SubCategory
		{
			get
			{
				return this._SubCategory.Entity;
			}
			set
			{
				SubCategory previousValue = this._SubCategory.Entity;
				if (((previousValue != value) 
							|| (this._SubCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubCategory.Entity = null;
						previousValue.Jobs.Remove(this);
					}
					this._SubCategory.Entity = value;
					if ((value != null))
					{
						value.Jobs.Add(this);
						this._SubCategoryId = value.Id;
					}
					else
					{
						this._SubCategoryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SubCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Job", Storage="_User", ThisKey="CreatedByUserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Jobs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Jobs.Add(this);
						this._CreatedByUserId = value.Id;
					}
					else
					{
						this._CreatedByUserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChatRooms(ChatRoom entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_ChatRooms(ChatRoom entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
		
		private void attach_EmailTemplates(EmailTemplate entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_EmailTemplates(EmailTemplate entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
		
		private void attach_JobAttachments(JobAttachment entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_JobAttachments(JobAttachment entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
		
		private void attach_JobDetails(JobDetail entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_JobDetails(JobDetail entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
		
		private void attach_UserBids(UserBid entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_UserBids(UserBid entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
		
		private void attach_UserJobAgreements(UserJobAgreement entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_UserJobAgreements(UserJobAgreement entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.JobStatus")]
	public partial class JobStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _JobStatusName;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<ExpressJob> _ExpressJobs;
		
		private EntitySet<Job> _Jobs;
		
		private EntitySet<UserJobAgreement> _UserJobAgreements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnJobStatusNameChanging(string value);
    partial void OnJobStatusNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public JobStatus()
		{
			this._ExpressJobs = new EntitySet<ExpressJob>(new Action<ExpressJob>(this.attach_ExpressJobs), new Action<ExpressJob>(this.detach_ExpressJobs));
			this._Jobs = new EntitySet<Job>(new Action<Job>(this.attach_Jobs), new Action<Job>(this.detach_Jobs));
			this._UserJobAgreements = new EntitySet<UserJobAgreement>(new Action<UserJobAgreement>(this.attach_UserJobAgreements), new Action<UserJobAgreement>(this.detach_UserJobAgreements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobStatusName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string JobStatusName
		{
			get
			{
				return this._JobStatusName;
			}
			set
			{
				if ((this._JobStatusName != value))
				{
					this.OnJobStatusNameChanging(value);
					this.SendPropertyChanging();
					this._JobStatusName = value;
					this.SendPropertyChanged("JobStatusName");
					this.OnJobStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobStatus_ExpressJob", Storage="_ExpressJobs", ThisKey="Id", OtherKey="JobStatusId")]
		public EntitySet<ExpressJob> ExpressJobs
		{
			get
			{
				return this._ExpressJobs;
			}
			set
			{
				this._ExpressJobs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobStatus_Job", Storage="_Jobs", ThisKey="Id", OtherKey="JobStatusId")]
		public EntitySet<Job> Jobs
		{
			get
			{
				return this._Jobs;
			}
			set
			{
				this._Jobs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobStatus_UserJobAgreement", Storage="_UserJobAgreements", ThisKey="Id", OtherKey="JobStatusId")]
		public EntitySet<UserJobAgreement> UserJobAgreements
		{
			get
			{
				return this._UserJobAgreements;
			}
			set
			{
				this._UserJobAgreements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExpressJobs(ExpressJob entity)
		{
			this.SendPropertyChanging();
			entity.JobStatus = this;
		}
		
		private void detach_ExpressJobs(ExpressJob entity)
		{
			this.SendPropertyChanging();
			entity.JobStatus = null;
		}
		
		private void attach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.JobStatus = this;
		}
		
		private void detach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.JobStatus = null;
		}
		
		private void attach_UserJobAgreements(UserJobAgreement entity)
		{
			this.SendPropertyChanging();
			entity.JobStatus = this;
		}
		
		private void detach_UserJobAgreements(UserJobAgreement entity)
		{
			this.SendPropertyChanging();
			entity.JobStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Nationality")]
	public partial class Nationality : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private bool _IsActive;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public Nationality()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(1550) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Notification")]
	public partial class Notification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserIdToNotify;
		
		private int _NotificationTypeId;
		
		private string _URLToGo;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private bool _IsRead;
		
		private string _HTML;
		
		private System.Nullable<System.DateTime> _AddedDate;
		
		private System.Nullable<int> _UserTypeId;
		
		private EntityRef<NotificationType> _NotificationType;
		
		private EntityRef<UserType> _UserType;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdToNotifyChanging(int value);
    partial void OnUserIdToNotifyChanged();
    partial void OnNotificationTypeIdChanging(int value);
    partial void OnNotificationTypeIdChanged();
    partial void OnURLToGoChanging(string value);
    partial void OnURLToGoChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnIsReadChanging(bool value);
    partial void OnIsReadChanged();
    partial void OnHTMLChanging(string value);
    partial void OnHTMLChanged();
    partial void OnAddedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAddedDateChanged();
    partial void OnUserTypeIdChanging(System.Nullable<int> value);
    partial void OnUserTypeIdChanged();
    #endregion
		
		public Notification()
		{
			this._NotificationType = default(EntityRef<NotificationType>);
			this._UserType = default(EntityRef<UserType>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIdToNotify", DbType="Int NOT NULL")]
		public int UserIdToNotify
		{
			get
			{
				return this._UserIdToNotify;
			}
			set
			{
				if ((this._UserIdToNotify != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdToNotifyChanging(value);
					this.SendPropertyChanging();
					this._UserIdToNotify = value;
					this.SendPropertyChanged("UserIdToNotify");
					this.OnUserIdToNotifyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotificationTypeId", DbType="Int NOT NULL")]
		public int NotificationTypeId
		{
			get
			{
				return this._NotificationTypeId;
			}
			set
			{
				if ((this._NotificationTypeId != value))
				{
					if (this._NotificationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNotificationTypeIdChanging(value);
					this.SendPropertyChanging();
					this._NotificationTypeId = value;
					this.SendPropertyChanged("NotificationTypeId");
					this.OnNotificationTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URLToGo", DbType="NVarChar(1600)")]
		public string URLToGo
		{
			get
			{
				return this._URLToGo;
			}
			set
			{
				if ((this._URLToGo != value))
				{
					this.OnURLToGoChanging(value);
					this.SendPropertyChanging();
					this._URLToGo = value;
					this.SendPropertyChanged("URLToGo");
					this.OnURLToGoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRead", DbType="Bit NOT NULL")]
		public bool IsRead
		{
			get
			{
				return this._IsRead;
			}
			set
			{
				if ((this._IsRead != value))
				{
					this.OnIsReadChanging(value);
					this.SendPropertyChanging();
					this._IsRead = value;
					this.SendPropertyChanged("IsRead");
					this.OnIsReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HTML", DbType="NVarChar(2500)")]
		public string HTML
		{
			get
			{
				return this._HTML;
			}
			set
			{
				if ((this._HTML != value))
				{
					this.OnHTMLChanging(value);
					this.SendPropertyChanging();
					this._HTML = value;
					this.SendPropertyChanged("HTML");
					this.OnHTMLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AddedDate
		{
			get
			{
				return this._AddedDate;
			}
			set
			{
				if ((this._AddedDate != value))
				{
					this.OnAddedDateChanging(value);
					this.SendPropertyChanging();
					this._AddedDate = value;
					this.SendPropertyChanged("AddedDate");
					this.OnAddedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTypeId", DbType="Int")]
		public System.Nullable<int> UserTypeId
		{
			get
			{
				return this._UserTypeId;
			}
			set
			{
				if ((this._UserTypeId != value))
				{
					if (this._UserType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserTypeIdChanging(value);
					this.SendPropertyChanging();
					this._UserTypeId = value;
					this.SendPropertyChanged("UserTypeId");
					this.OnUserTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NotificationType_Notification", Storage="_NotificationType", ThisKey="NotificationTypeId", OtherKey="Id", IsForeignKey=true)]
		public NotificationType NotificationType
		{
			get
			{
				return this._NotificationType.Entity;
			}
			set
			{
				NotificationType previousValue = this._NotificationType.Entity;
				if (((previousValue != value) 
							|| (this._NotificationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NotificationType.Entity = null;
						previousValue.Notifications.Remove(this);
					}
					this._NotificationType.Entity = value;
					if ((value != null))
					{
						value.Notifications.Add(this);
						this._NotificationTypeId = value.Id;
					}
					else
					{
						this._NotificationTypeId = default(int);
					}
					this.SendPropertyChanged("NotificationType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_Notification", Storage="_UserType", ThisKey="UserTypeId", OtherKey="Id", IsForeignKey=true)]
		public UserType UserType
		{
			get
			{
				return this._UserType.Entity;
			}
			set
			{
				UserType previousValue = this._UserType.Entity;
				if (((previousValue != value) 
							|| (this._UserType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserType.Entity = null;
						previousValue.Notifications.Remove(this);
					}
					this._UserType.Entity = value;
					if ((value != null))
					{
						value.Notifications.Add(this);
						this._UserTypeId = value.Id;
					}
					else
					{
						this._UserTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Notification", Storage="_User", ThisKey="UserIdToNotify", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Notifications.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Notifications.Add(this);
						this._UserIdToNotify = value.Id;
					}
					else
					{
						this._UserIdToNotify = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NotificationType")]
	public partial class NotificationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _NotificationTypeName;
		
		private string _CustomHTML;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<Notification> _Notifications;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNotificationTypeNameChanging(string value);
    partial void OnNotificationTypeNameChanged();
    partial void OnCustomHTMLChanging(string value);
    partial void OnCustomHTMLChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public NotificationType()
		{
			this._Notifications = new EntitySet<Notification>(new Action<Notification>(this.attach_Notifications), new Action<Notification>(this.detach_Notifications));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotificationTypeName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string NotificationTypeName
		{
			get
			{
				return this._NotificationTypeName;
			}
			set
			{
				if ((this._NotificationTypeName != value))
				{
					this.OnNotificationTypeNameChanging(value);
					this.SendPropertyChanging();
					this._NotificationTypeName = value;
					this.SendPropertyChanged("NotificationTypeName");
					this.OnNotificationTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomHTML", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string CustomHTML
		{
			get
			{
				return this._CustomHTML;
			}
			set
			{
				if ((this._CustomHTML != value))
				{
					this.OnCustomHTMLChanging(value);
					this.SendPropertyChanging();
					this._CustomHTML = value;
					this.SendPropertyChanged("CustomHTML");
					this.OnCustomHTMLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NotificationType_Notification", Storage="_Notifications", ThisKey="Id", OtherKey="NotificationTypeId")]
		public EntitySet<Notification> Notifications
		{
			get
			{
				return this._Notifications;
			}
			set
			{
				this._Notifications.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.NotificationType = this;
		}
		
		private void detach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.NotificationType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Package")]
	public partial class Package : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CreatedByUserId;
		
		private int _NumberOfTokens;
		
		private int _ActualPrice;
		
		private System.Nullable<int> _DiscountPercent;
		
		private int _PackageTypeId;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<UserPackage> _UserPackages;
		
		private EntitySet<UserTransaction> _UserTransactions;
		
		private EntityRef<PackageType> _PackageType;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCreatedByUserIdChanging(int value);
    partial void OnCreatedByUserIdChanged();
    partial void OnNumberOfTokensChanging(int value);
    partial void OnNumberOfTokensChanged();
    partial void OnActualPriceChanging(int value);
    partial void OnActualPriceChanged();
    partial void OnDiscountPercentChanging(System.Nullable<int> value);
    partial void OnDiscountPercentChanged();
    partial void OnPackageTypeIdChanging(int value);
    partial void OnPackageTypeIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Package()
		{
			this._UserPackages = new EntitySet<UserPackage>(new Action<UserPackage>(this.attach_UserPackages), new Action<UserPackage>(this.detach_UserPackages));
			this._UserTransactions = new EntitySet<UserTransaction>(new Action<UserTransaction>(this.attach_UserTransactions), new Action<UserTransaction>(this.detach_UserTransactions));
			this._PackageType = default(EntityRef<PackageType>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedByUserId", DbType="Int NOT NULL")]
		public int CreatedByUserId
		{
			get
			{
				return this._CreatedByUserId;
			}
			set
			{
				if ((this._CreatedByUserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByUserIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedByUserId = value;
					this.SendPropertyChanged("CreatedByUserId");
					this.OnCreatedByUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfTokens", DbType="Int NOT NULL")]
		public int NumberOfTokens
		{
			get
			{
				return this._NumberOfTokens;
			}
			set
			{
				if ((this._NumberOfTokens != value))
				{
					this.OnNumberOfTokensChanging(value);
					this.SendPropertyChanging();
					this._NumberOfTokens = value;
					this.SendPropertyChanged("NumberOfTokens");
					this.OnNumberOfTokensChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActualPrice", DbType="Int NOT NULL")]
		public int ActualPrice
		{
			get
			{
				return this._ActualPrice;
			}
			set
			{
				if ((this._ActualPrice != value))
				{
					this.OnActualPriceChanging(value);
					this.SendPropertyChanging();
					this._ActualPrice = value;
					this.SendPropertyChanged("ActualPrice");
					this.OnActualPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountPercent", DbType="Int")]
		public System.Nullable<int> DiscountPercent
		{
			get
			{
				return this._DiscountPercent;
			}
			set
			{
				if ((this._DiscountPercent != value))
				{
					this.OnDiscountPercentChanging(value);
					this.SendPropertyChanging();
					this._DiscountPercent = value;
					this.SendPropertyChanged("DiscountPercent");
					this.OnDiscountPercentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageTypeId", DbType="Int NOT NULL")]
		public int PackageTypeId
		{
			get
			{
				return this._PackageTypeId;
			}
			set
			{
				if ((this._PackageTypeId != value))
				{
					if (this._PackageType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PackageTypeId = value;
					this.SendPropertyChanged("PackageTypeId");
					this.OnPackageTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Package_UserPackage", Storage="_UserPackages", ThisKey="Id", OtherKey="PackageId")]
		public EntitySet<UserPackage> UserPackages
		{
			get
			{
				return this._UserPackages;
			}
			set
			{
				this._UserPackages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Package_UserTransaction", Storage="_UserTransactions", ThisKey="Id", OtherKey="PackageId")]
		public EntitySet<UserTransaction> UserTransactions
		{
			get
			{
				return this._UserTransactions;
			}
			set
			{
				this._UserTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PackageType_Package", Storage="_PackageType", ThisKey="PackageTypeId", OtherKey="Id", IsForeignKey=true)]
		public PackageType PackageType
		{
			get
			{
				return this._PackageType.Entity;
			}
			set
			{
				PackageType previousValue = this._PackageType.Entity;
				if (((previousValue != value) 
							|| (this._PackageType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PackageType.Entity = null;
						previousValue.Packages.Remove(this);
					}
					this._PackageType.Entity = value;
					if ((value != null))
					{
						value.Packages.Add(this);
						this._PackageTypeId = value.Id;
					}
					else
					{
						this._PackageTypeId = default(int);
					}
					this.SendPropertyChanged("PackageType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Package", Storage="_User", ThisKey="CreatedByUserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Packages.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Packages.Add(this);
						this._CreatedByUserId = value.Id;
					}
					else
					{
						this._CreatedByUserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserPackages(UserPackage entity)
		{
			this.SendPropertyChanging();
			entity.Package = this;
		}
		
		private void detach_UserPackages(UserPackage entity)
		{
			this.SendPropertyChanging();
			entity.Package = null;
		}
		
		private void attach_UserTransactions(UserTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Package = this;
		}
		
		private void detach_UserTransactions(UserTransaction entity)
		{
			this.SendPropertyChanging();
			entity.Package = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PackageType")]
	public partial class PackageType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _PackageTypeName;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<Package> _Packages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPackageTypeNameChanging(string value);
    partial void OnPackageTypeNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public PackageType()
		{
			this._Packages = new EntitySet<Package>(new Action<Package>(this.attach_Packages), new Action<Package>(this.detach_Packages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageTypeName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string PackageTypeName
		{
			get
			{
				return this._PackageTypeName;
			}
			set
			{
				if ((this._PackageTypeName != value))
				{
					this.OnPackageTypeNameChanging(value);
					this.SendPropertyChanging();
					this._PackageTypeName = value;
					this.SendPropertyChanged("PackageTypeName");
					this.OnPackageTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PackageType_Package", Storage="_Packages", ThisKey="Id", OtherKey="PackageTypeId")]
		public EntitySet<Package> Packages
		{
			get
			{
				return this._Packages;
			}
			set
			{
				this._Packages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Packages(Package entity)
		{
			this.SendPropertyChanging();
			entity.PackageType = this;
		}
		
		private void detach_Packages(Package entity)
		{
			this.SendPropertyChanging();
			entity.PackageType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ParentCategory")]
	public partial class ParentCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ParentCategoryName;
		
		private string _IconURL;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<Category> _Categories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnParentCategoryNameChanging(string value);
    partial void OnParentCategoryNameChanged();
    partial void OnIconURLChanging(string value);
    partial void OnIconURLChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public ParentCategory()
		{
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentCategoryName", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string ParentCategoryName
		{
			get
			{
				return this._ParentCategoryName;
			}
			set
			{
				if ((this._ParentCategoryName != value))
				{
					this.OnParentCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._ParentCategoryName = value;
					this.SendPropertyChanged("ParentCategoryName");
					this.OnParentCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IconURL", DbType="NVarChar(1600)")]
		public string IconURL
		{
			get
			{
				return this._IconURL;
			}
			set
			{
				if ((this._IconURL != value))
				{
					this.OnIconURLChanging(value);
					this.SendPropertyChanging();
					this._IconURL = value;
					this.SendPropertyChanged("IconURL");
					this.OnIconURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ParentCategory_Category", Storage="_Categories", ThisKey="Id", OtherKey="ParentCategoryId")]
		public EntitySet<Category> Categories
		{
			get
			{
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.ParentCategory = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.ParentCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PermissionGroups")]
	public partial class PermissionGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _OrderNo;
		
		private System.Nullable<bool> _IsDirectUrl;
		
		private string _URL;
		
		private EntitySet<Permission> _Permissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOrderNoChanging(System.Nullable<int> value);
    partial void OnOrderNoChanged();
    partial void OnIsDirectUrlChanging(System.Nullable<bool> value);
    partial void OnIsDirectUrlChanged();
    partial void OnURLChanging(string value);
    partial void OnURLChanged();
    #endregion
		
		public PermissionGroup()
		{
			this._Permissions = new EntitySet<Permission>(new Action<Permission>(this.attach_Permissions), new Action<Permission>(this.detach_Permissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNo", DbType="Int")]
		public System.Nullable<int> OrderNo
		{
			get
			{
				return this._OrderNo;
			}
			set
			{
				if ((this._OrderNo != value))
				{
					this.OnOrderNoChanging(value);
					this.SendPropertyChanging();
					this._OrderNo = value;
					this.SendPropertyChanged("OrderNo");
					this.OnOrderNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDirectUrl", DbType="Bit")]
		public System.Nullable<bool> IsDirectUrl
		{
			get
			{
				return this._IsDirectUrl;
			}
			set
			{
				if ((this._IsDirectUrl != value))
				{
					this.OnIsDirectUrlChanging(value);
					this.SendPropertyChanging();
					this._IsDirectUrl = value;
					this.SendPropertyChanged("IsDirectUrl");
					this.OnIsDirectUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_URL", DbType="NVarChar(2000)")]
		public string URL
		{
			get
			{
				return this._URL;
			}
			set
			{
				if ((this._URL != value))
				{
					this.OnURLChanging(value);
					this.SendPropertyChanging();
					this._URL = value;
					this.SendPropertyChanged("URL");
					this.OnURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PermissionGroup_Permission", Storage="_Permissions", ThisKey="Id", OtherKey="PermissionGroupId")]
		public EntitySet<Permission> Permissions
		{
			get
			{
				return this._Permissions;
			}
			set
			{
				this._Permissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.PermissionGroup = this;
		}
		
		private void detach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.PermissionGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permissions")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private bool _ShowInMenu;
		
		private string _Url;
		
		private System.Nullable<int> _Order;
		
		private string _FriendlyName;
		
		private System.Nullable<int> _PermissionGroupId;
		
		private string _PermissionGroupName;
		
		private string _Discription;
		
		private bool _IsActive;
		
		private bool _IsDelete;
		
		private string _IconClass;
		
		private EntitySet<UserPermission> _UserPermissions;
		
		private EntitySet<UsersDefaultPermission> _UsersDefaultPermissions;
		
		private EntityRef<PermissionGroup> _PermissionGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShowInMenuChanging(bool value);
    partial void OnShowInMenuChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnOrderChanging(System.Nullable<int> value);
    partial void OnOrderChanged();
    partial void OnFriendlyNameChanging(string value);
    partial void OnFriendlyNameChanged();
    partial void OnPermissionGroupIdChanging(System.Nullable<int> value);
    partial void OnPermissionGroupIdChanged();
    partial void OnPermissionGroupNameChanging(string value);
    partial void OnPermissionGroupNameChanged();
    partial void OnDiscriptionChanging(string value);
    partial void OnDiscriptionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeleteChanging(bool value);
    partial void OnIsDeleteChanged();
    partial void OnIconClassChanging(string value);
    partial void OnIconClassChanged();
    #endregion
		
		public Permission()
		{
			this._UserPermissions = new EntitySet<UserPermission>(new Action<UserPermission>(this.attach_UserPermissions), new Action<UserPermission>(this.detach_UserPermissions));
			this._UsersDefaultPermissions = new EntitySet<UsersDefaultPermission>(new Action<UsersDefaultPermission>(this.attach_UsersDefaultPermissions), new Action<UsersDefaultPermission>(this.detach_UsersDefaultPermissions));
			this._PermissionGroup = default(EntityRef<PermissionGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowInMenu", DbType="Bit NOT NULL")]
		public bool ShowInMenu
		{
			get
			{
				return this._ShowInMenu;
			}
			set
			{
				if ((this._ShowInMenu != value))
				{
					this.OnShowInMenuChanging(value);
					this.SendPropertyChanging();
					this._ShowInMenu = value;
					this.SendPropertyChanged("ShowInMenu");
					this.OnShowInMenuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(500)")]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int")]
		public System.Nullable<int> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FriendlyName", DbType="NVarChar(100)")]
		public string FriendlyName
		{
			get
			{
				return this._FriendlyName;
			}
			set
			{
				if ((this._FriendlyName != value))
				{
					this.OnFriendlyNameChanging(value);
					this.SendPropertyChanging();
					this._FriendlyName = value;
					this.SendPropertyChanged("FriendlyName");
					this.OnFriendlyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionGroupId", DbType="Int")]
		public System.Nullable<int> PermissionGroupId
		{
			get
			{
				return this._PermissionGroupId;
			}
			set
			{
				if ((this._PermissionGroupId != value))
				{
					if (this._PermissionGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionGroupIdChanging(value);
					this.SendPropertyChanging();
					this._PermissionGroupId = value;
					this.SendPropertyChanged("PermissionGroupId");
					this.OnPermissionGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionGroupName", DbType="NVarChar(150)")]
		public string PermissionGroupName
		{
			get
			{
				return this._PermissionGroupName;
			}
			set
			{
				if ((this._PermissionGroupName != value))
				{
					this.OnPermissionGroupNameChanging(value);
					this.SendPropertyChanging();
					this._PermissionGroupName = value;
					this.SendPropertyChanged("PermissionGroupName");
					this.OnPermissionGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discription", DbType="NVarChar(650)")]
		public string Discription
		{
			get
			{
				return this._Discription;
			}
			set
			{
				if ((this._Discription != value))
				{
					this.OnDiscriptionChanging(value);
					this.SendPropertyChanging();
					this._Discription = value;
					this.SendPropertyChanged("Discription");
					this.OnDiscriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDelete", DbType="Bit NOT NULL")]
		public bool IsDelete
		{
			get
			{
				return this._IsDelete;
			}
			set
			{
				if ((this._IsDelete != value))
				{
					this.OnIsDeleteChanging(value);
					this.SendPropertyChanging();
					this._IsDelete = value;
					this.SendPropertyChanged("IsDelete");
					this.OnIsDeleteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IconClass", DbType="NVarChar(650)")]
		public string IconClass
		{
			get
			{
				return this._IconClass;
			}
			set
			{
				if ((this._IconClass != value))
				{
					this.OnIconClassChanging(value);
					this.SendPropertyChanging();
					this._IconClass = value;
					this.SendPropertyChanged("IconClass");
					this.OnIconClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_UserPermission", Storage="_UserPermissions", ThisKey="Id", OtherKey="PermissionId")]
		public EntitySet<UserPermission> UserPermissions
		{
			get
			{
				return this._UserPermissions;
			}
			set
			{
				this._UserPermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_UsersDefaultPermission", Storage="_UsersDefaultPermissions", ThisKey="Id", OtherKey="PermisionId")]
		public EntitySet<UsersDefaultPermission> UsersDefaultPermissions
		{
			get
			{
				return this._UsersDefaultPermissions;
			}
			set
			{
				this._UsersDefaultPermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PermissionGroup_Permission", Storage="_PermissionGroup", ThisKey="PermissionGroupId", OtherKey="Id", IsForeignKey=true)]
		public PermissionGroup PermissionGroup
		{
			get
			{
				return this._PermissionGroup.Entity;
			}
			set
			{
				PermissionGroup previousValue = this._PermissionGroup.Entity;
				if (((previousValue != value) 
							|| (this._PermissionGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PermissionGroup.Entity = null;
						previousValue.Permissions.Remove(this);
					}
					this._PermissionGroup.Entity = value;
					if ((value != null))
					{
						value.Permissions.Add(this);
						this._PermissionGroupId = value.Id;
					}
					else
					{
						this._PermissionGroupId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PermissionGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
		
		private void attach_UsersDefaultPermissions(UsersDefaultPermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_UsersDefaultPermissions(UsersDefaultPermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PropertyType")]
	public partial class PropertyType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ProprtyTypeName;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<JobDetail> _JobDetails;
		
		private EntitySet<JobDetail> _JobDetails1;
		
		private EntitySet<JobDetail> _JobDetails2;
		
		private EntitySet<JobDetailInterior> _JobDetailInteriors;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProprtyTypeNameChanging(string value);
    partial void OnProprtyTypeNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public PropertyType()
		{
			this._JobDetails = new EntitySet<JobDetail>(new Action<JobDetail>(this.attach_JobDetails), new Action<JobDetail>(this.detach_JobDetails));
			this._JobDetails1 = new EntitySet<JobDetail>(new Action<JobDetail>(this.attach_JobDetails1), new Action<JobDetail>(this.detach_JobDetails1));
			this._JobDetails2 = new EntitySet<JobDetail>(new Action<JobDetail>(this.attach_JobDetails2), new Action<JobDetail>(this.detach_JobDetails2));
			this._JobDetailInteriors = new EntitySet<JobDetailInterior>(new Action<JobDetailInterior>(this.attach_JobDetailInteriors), new Action<JobDetailInterior>(this.detach_JobDetailInteriors));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProprtyTypeName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string ProprtyTypeName
		{
			get
			{
				return this._ProprtyTypeName;
			}
			set
			{
				if ((this._ProprtyTypeName != value))
				{
					this.OnProprtyTypeNameChanging(value);
					this.SendPropertyChanging();
					this._ProprtyTypeName = value;
					this.SendPropertyChanged("ProprtyTypeName");
					this.OnProprtyTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PropertyType_JobDetail", Storage="_JobDetails", ThisKey="Id", OtherKey="TypeOfPropertyId")]
		public EntitySet<JobDetail> JobDetails
		{
			get
			{
				return this._JobDetails;
			}
			set
			{
				this._JobDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PropertyType_JobDetail1", Storage="_JobDetails1", ThisKey="Id", OtherKey="ResidenceTypeId")]
		public EntitySet<JobDetail> JobDetails1
		{
			get
			{
				return this._JobDetails1;
			}
			set
			{
				this._JobDetails1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PropertyType_JobDetail2", Storage="_JobDetails2", ThisKey="Id", OtherKey="ResidenceToTypeId")]
		public EntitySet<JobDetail> JobDetails2
		{
			get
			{
				return this._JobDetails2;
			}
			set
			{
				this._JobDetails2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PropertyType_JobDetailInterior", Storage="_JobDetailInteriors", ThisKey="Id", OtherKey="PropertyTypeId")]
		public EntitySet<JobDetailInterior> JobDetailInteriors
		{
			get
			{
				return this._JobDetailInteriors;
			}
			set
			{
				this._JobDetailInteriors.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_JobDetails(JobDetail entity)
		{
			this.SendPropertyChanging();
			entity.PropertyType = this;
		}
		
		private void detach_JobDetails(JobDetail entity)
		{
			this.SendPropertyChanging();
			entity.PropertyType = null;
		}
		
		private void attach_JobDetails1(JobDetail entity)
		{
			this.SendPropertyChanging();
			entity.PropertyType1 = this;
		}
		
		private void detach_JobDetails1(JobDetail entity)
		{
			this.SendPropertyChanging();
			entity.PropertyType1 = null;
		}
		
		private void attach_JobDetails2(JobDetail entity)
		{
			this.SendPropertyChanging();
			entity.PropertyType2 = this;
		}
		
		private void detach_JobDetails2(JobDetail entity)
		{
			this.SendPropertyChanging();
			entity.PropertyType2 = null;
		}
		
		private void attach_JobDetailInteriors(JobDetailInterior entity)
		{
			this.SendPropertyChanging();
			entity.PropertyType = this;
		}
		
		private void detach_JobDetailInteriors(JobDetailInterior entity)
		{
			this.SendPropertyChanging();
			entity.PropertyType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Question")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserIdAskedBy;
		
		private System.DateTime _AskedOnDate;
		
		private System.Nullable<int> _JobId;
		
		private string _QuestionText;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private bool _IsReported;
		
		private EntitySet<QuestionReply> _QuestionReplies;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdAskedByChanging(int value);
    partial void OnUserIdAskedByChanged();
    partial void OnAskedOnDateChanging(System.DateTime value);
    partial void OnAskedOnDateChanged();
    partial void OnJobIdChanging(System.Nullable<int> value);
    partial void OnJobIdChanged();
    partial void OnQuestionTextChanging(string value);
    partial void OnQuestionTextChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnIsReportedChanging(bool value);
    partial void OnIsReportedChanged();
    #endregion
		
		public Question()
		{
			this._QuestionReplies = new EntitySet<QuestionReply>(new Action<QuestionReply>(this.attach_QuestionReplies), new Action<QuestionReply>(this.detach_QuestionReplies));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIdAskedBy", DbType="Int NOT NULL")]
		public int UserIdAskedBy
		{
			get
			{
				return this._UserIdAskedBy;
			}
			set
			{
				if ((this._UserIdAskedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdAskedByChanging(value);
					this.SendPropertyChanging();
					this._UserIdAskedBy = value;
					this.SendPropertyChanged("UserIdAskedBy");
					this.OnUserIdAskedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AskedOnDate", DbType="DateTime NOT NULL")]
		public System.DateTime AskedOnDate
		{
			get
			{
				return this._AskedOnDate;
			}
			set
			{
				if ((this._AskedOnDate != value))
				{
					this.OnAskedOnDateChanging(value);
					this.SendPropertyChanging();
					this._AskedOnDate = value;
					this.SendPropertyChanged("AskedOnDate");
					this.OnAskedOnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="Int")]
		public System.Nullable<int> JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string QuestionText
		{
			get
			{
				return this._QuestionText;
			}
			set
			{
				if ((this._QuestionText != value))
				{
					this.OnQuestionTextChanging(value);
					this.SendPropertyChanging();
					this._QuestionText = value;
					this.SendPropertyChanged("QuestionText");
					this.OnQuestionTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsReported", DbType="Bit NOT NULL")]
		public bool IsReported
		{
			get
			{
				return this._IsReported;
			}
			set
			{
				if ((this._IsReported != value))
				{
					this.OnIsReportedChanging(value);
					this.SendPropertyChanging();
					this._IsReported = value;
					this.SendPropertyChanged("IsReported");
					this.OnIsReportedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_QuestionReply", Storage="_QuestionReplies", ThisKey="Id", OtherKey="QuestionId")]
		public EntitySet<QuestionReply> QuestionReplies
		{
			get
			{
				return this._QuestionReplies;
			}
			set
			{
				this._QuestionReplies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Question", Storage="_User", ThisKey="UserIdAskedBy", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._UserIdAskedBy = value.Id;
					}
					else
					{
						this._UserIdAskedBy = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QuestionReplies(QuestionReply entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_QuestionReplies(QuestionReply entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuestionReply")]
	public partial class QuestionReply : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _QuestionId;
		
		private int _UserIdReplyBy;
		
		private string _ReplyText;
		
		private bool _IsReported;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private System.Nullable<System.DateTime> _RepliedOn;
		
		private EntityRef<Question> _Question;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnQuestionIdChanging(int value);
    partial void OnQuestionIdChanged();
    partial void OnUserIdReplyByChanging(int value);
    partial void OnUserIdReplyByChanged();
    partial void OnReplyTextChanging(string value);
    partial void OnReplyTextChanged();
    partial void OnIsReportedChanging(bool value);
    partial void OnIsReportedChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnRepliedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnRepliedOnChanged();
    #endregion
		
		public QuestionReply()
		{
			this._Question = default(EntityRef<Question>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuestionId", DbType="Int NOT NULL")]
		public int QuestionId
		{
			get
			{
				return this._QuestionId;
			}
			set
			{
				if ((this._QuestionId != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionIdChanging(value);
					this.SendPropertyChanging();
					this._QuestionId = value;
					this.SendPropertyChanged("QuestionId");
					this.OnQuestionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIdReplyBy", DbType="Int NOT NULL")]
		public int UserIdReplyBy
		{
			get
			{
				return this._UserIdReplyBy;
			}
			set
			{
				if ((this._UserIdReplyBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdReplyByChanging(value);
					this.SendPropertyChanging();
					this._UserIdReplyBy = value;
					this.SendPropertyChanged("UserIdReplyBy");
					this.OnUserIdReplyByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReplyText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ReplyText
		{
			get
			{
				return this._ReplyText;
			}
			set
			{
				if ((this._ReplyText != value))
				{
					this.OnReplyTextChanging(value);
					this.SendPropertyChanging();
					this._ReplyText = value;
					this.SendPropertyChanged("ReplyText");
					this.OnReplyTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsReported", DbType="Bit NOT NULL")]
		public bool IsReported
		{
			get
			{
				return this._IsReported;
			}
			set
			{
				if ((this._IsReported != value))
				{
					this.OnIsReportedChanging(value);
					this.SendPropertyChanging();
					this._IsReported = value;
					this.SendPropertyChanged("IsReported");
					this.OnIsReportedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepliedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> RepliedOn
		{
			get
			{
				return this._RepliedOn;
			}
			set
			{
				if ((this._RepliedOn != value))
				{
					this.OnRepliedOnChanging(value);
					this.SendPropertyChanging();
					this._RepliedOn = value;
					this.SendPropertyChanged("RepliedOn");
					this.OnRepliedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_QuestionReply", Storage="_Question", ThisKey="QuestionId", OtherKey="Id", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.QuestionReplies.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.QuestionReplies.Add(this);
						this._QuestionId = value.Id;
					}
					else
					{
						this._QuestionId = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_QuestionReply", Storage="_User", ThisKey="UserIdReplyBy", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.QuestionReplies.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.QuestionReplies.Add(this);
						this._UserIdReplyBy = value.Id;
					}
					else
					{
						this._UserIdReplyBy = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RejectedAgreements")]
	public partial class RejectedAgreement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _AgreementId;
		
		private int _UserIdRejectBy;
		
		private string _Reason;
		
		private System.DateTime _DateOfRejection;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntityRef<UserJobAgreement> _UserJobAgreement;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAgreementIdChanging(int value);
    partial void OnAgreementIdChanged();
    partial void OnUserIdRejectByChanging(int value);
    partial void OnUserIdRejectByChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    partial void OnDateOfRejectionChanging(System.DateTime value);
    partial void OnDateOfRejectionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public RejectedAgreement()
		{
			this._UserJobAgreement = default(EntityRef<UserJobAgreement>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgreementId", DbType="Int NOT NULL")]
		public int AgreementId
		{
			get
			{
				return this._AgreementId;
			}
			set
			{
				if ((this._AgreementId != value))
				{
					if (this._UserJobAgreement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgreementIdChanging(value);
					this.SendPropertyChanging();
					this._AgreementId = value;
					this.SendPropertyChanged("AgreementId");
					this.OnAgreementIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIdRejectBy", DbType="Int NOT NULL")]
		public int UserIdRejectBy
		{
			get
			{
				return this._UserIdRejectBy;
			}
			set
			{
				if ((this._UserIdRejectBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdRejectByChanging(value);
					this.SendPropertyChanging();
					this._UserIdRejectBy = value;
					this.SendPropertyChanged("UserIdRejectBy");
					this.OnUserIdRejectByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reason", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfRejection", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfRejection
		{
			get
			{
				return this._DateOfRejection;
			}
			set
			{
				if ((this._DateOfRejection != value))
				{
					this.OnDateOfRejectionChanging(value);
					this.SendPropertyChanging();
					this._DateOfRejection = value;
					this.SendPropertyChanged("DateOfRejection");
					this.OnDateOfRejectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserJobAgreement_RejectedAgreement", Storage="_UserJobAgreement", ThisKey="AgreementId", OtherKey="Id", IsForeignKey=true)]
		public UserJobAgreement UserJobAgreement
		{
			get
			{
				return this._UserJobAgreement.Entity;
			}
			set
			{
				UserJobAgreement previousValue = this._UserJobAgreement.Entity;
				if (((previousValue != value) 
							|| (this._UserJobAgreement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserJobAgreement.Entity = null;
						previousValue.RejectedAgreements.Remove(this);
					}
					this._UserJobAgreement.Entity = value;
					if ((value != null))
					{
						value.RejectedAgreements.Add(this);
						this._AgreementId = value.Id;
					}
					else
					{
						this._AgreementId = default(int);
					}
					this.SendPropertyChanged("UserJobAgreement");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_RejectedAgreement", Storage="_User", ThisKey="UserIdRejectBy", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.RejectedAgreements.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.RejectedAgreements.Add(this);
						this._UserIdRejectBy = value.Id;
					}
					else
					{
						this._UserIdRejectBy = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReviewAndRating")]
	public partial class ReviewAndRating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserIdReviewBy;
		
		private int _UserIdReviewTo;
		
		private System.Nullable<int> _JobIdReviewOn;
		
		private string _ReviewText;
		
		private System.DateTime _ReviewOnDate;
		
		private System.Nullable<int> _RatingValue;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdReviewByChanging(int value);
    partial void OnUserIdReviewByChanged();
    partial void OnUserIdReviewToChanging(int value);
    partial void OnUserIdReviewToChanged();
    partial void OnJobIdReviewOnChanging(System.Nullable<int> value);
    partial void OnJobIdReviewOnChanged();
    partial void OnReviewTextChanging(string value);
    partial void OnReviewTextChanged();
    partial void OnReviewOnDateChanging(System.DateTime value);
    partial void OnReviewOnDateChanged();
    partial void OnRatingValueChanging(System.Nullable<int> value);
    partial void OnRatingValueChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public ReviewAndRating()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIdReviewBy", DbType="Int NOT NULL")]
		public int UserIdReviewBy
		{
			get
			{
				return this._UserIdReviewBy;
			}
			set
			{
				if ((this._UserIdReviewBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdReviewByChanging(value);
					this.SendPropertyChanging();
					this._UserIdReviewBy = value;
					this.SendPropertyChanged("UserIdReviewBy");
					this.OnUserIdReviewByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIdReviewTo", DbType="Int NOT NULL")]
		public int UserIdReviewTo
		{
			get
			{
				return this._UserIdReviewTo;
			}
			set
			{
				if ((this._UserIdReviewTo != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdReviewToChanging(value);
					this.SendPropertyChanging();
					this._UserIdReviewTo = value;
					this.SendPropertyChanged("UserIdReviewTo");
					this.OnUserIdReviewToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobIdReviewOn", DbType="Int")]
		public System.Nullable<int> JobIdReviewOn
		{
			get
			{
				return this._JobIdReviewOn;
			}
			set
			{
				if ((this._JobIdReviewOn != value))
				{
					this.OnJobIdReviewOnChanging(value);
					this.SendPropertyChanging();
					this._JobIdReviewOn = value;
					this.SendPropertyChanged("JobIdReviewOn");
					this.OnJobIdReviewOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ReviewText
		{
			get
			{
				return this._ReviewText;
			}
			set
			{
				if ((this._ReviewText != value))
				{
					this.OnReviewTextChanging(value);
					this.SendPropertyChanging();
					this._ReviewText = value;
					this.SendPropertyChanged("ReviewText");
					this.OnReviewTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReviewOnDate", DbType="DateTime NOT NULL")]
		public System.DateTime ReviewOnDate
		{
			get
			{
				return this._ReviewOnDate;
			}
			set
			{
				if ((this._ReviewOnDate != value))
				{
					this.OnReviewOnDateChanging(value);
					this.SendPropertyChanging();
					this._ReviewOnDate = value;
					this.SendPropertyChanged("ReviewOnDate");
					this.OnReviewOnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatingValue", DbType="Int")]
		public System.Nullable<int> RatingValue
		{
			get
			{
				return this._RatingValue;
			}
			set
			{
				if ((this._RatingValue != value))
				{
					this.OnRatingValueChanging(value);
					this.SendPropertyChanging();
					this._RatingValue = value;
					this.SendPropertyChanged("RatingValue");
					this.OnRatingValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ReviewAndRating", Storage="_User", ThisKey="UserIdReviewBy", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ReviewAndRatings.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ReviewAndRatings.Add(this);
						this._UserIdReviewBy = value.Id;
					}
					else
					{
						this._UserIdReviewBy = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ReviewAndRating1", Storage="_User1", ThisKey="UserIdReviewTo", OtherKey="Id", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.ReviewAndRatings1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.ReviewAndRatings1.Add(this);
						this._UserIdReviewTo = value.Id;
					}
					else
					{
						this._UserIdReviewTo = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SpecialityLevel")]
	public partial class SpecialityLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _SpecialityLevelName;
		
		private string _Value;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<UserSpokenLanguage> _UserSpokenLanguages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSpecialityLevelNameChanging(string value);
    partial void OnSpecialityLevelNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public SpecialityLevel()
		{
			this._UserSpokenLanguages = new EntitySet<UserSpokenLanguage>(new Action<UserSpokenLanguage>(this.attach_UserSpokenLanguages), new Action<UserSpokenLanguage>(this.detach_UserSpokenLanguages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialityLevelName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string SpecialityLevelName
		{
			get
			{
				return this._SpecialityLevelName;
			}
			set
			{
				if ((this._SpecialityLevelName != value))
				{
					this.OnSpecialityLevelNameChanging(value);
					this.SendPropertyChanging();
					this._SpecialityLevelName = value;
					this.SendPropertyChanged("SpecialityLevelName");
					this.OnSpecialityLevelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(1600)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SpecialityLevel_UserSpokenLanguage", Storage="_UserSpokenLanguages", ThisKey="Id", OtherKey="SpecialityLevelId")]
		public EntitySet<UserSpokenLanguage> UserSpokenLanguages
		{
			get
			{
				return this._UserSpokenLanguages;
			}
			set
			{
				this._UserSpokenLanguages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserSpokenLanguages(UserSpokenLanguage entity)
		{
			this.SendPropertyChanging();
			entity.SpecialityLevel = this;
		}
		
		private void detach_UserSpokenLanguages(UserSpokenLanguage entity)
		{
			this.SendPropertyChanging();
			entity.SpecialityLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SpokenLanguage")]
	public partial class SpokenLanguage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _LanguageName;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<UserSpokenLanguage> _UserSpokenLanguages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLanguageNameChanging(string value);
    partial void OnLanguageNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public SpokenLanguage()
		{
			this._UserSpokenLanguages = new EntitySet<UserSpokenLanguage>(new Action<UserSpokenLanguage>(this.attach_UserSpokenLanguages), new Action<UserSpokenLanguage>(this.detach_UserSpokenLanguages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string LanguageName
		{
			get
			{
				return this._LanguageName;
			}
			set
			{
				if ((this._LanguageName != value))
				{
					this.OnLanguageNameChanging(value);
					this.SendPropertyChanging();
					this._LanguageName = value;
					this.SendPropertyChanged("LanguageName");
					this.OnLanguageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SpokenLanguage_UserSpokenLanguage", Storage="_UserSpokenLanguages", ThisKey="Id", OtherKey="LanguageId")]
		public EntitySet<UserSpokenLanguage> UserSpokenLanguages
		{
			get
			{
				return this._UserSpokenLanguages;
			}
			set
			{
				this._UserSpokenLanguages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserSpokenLanguages(UserSpokenLanguage entity)
		{
			this.SendPropertyChanging();
			entity.SpokenLanguage = this;
		}
		
		private void detach_UserSpokenLanguages(UserSpokenLanguage entity)
		{
			this.SendPropertyChanging();
			entity.SpokenLanguage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.States")]
	public partial class State1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _CountryId;
		
		private string _StateCode;
		
		private bool _IsActive;
		
		private EntitySet<City> _Cities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    partial void OnStateCodeChanging(string value);
    partial void OnStateCodeChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    #endregion
		
		public State1()
		{
			this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int NOT NULL")]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateCode", DbType="NVarChar(1500) NOT NULL", CanBeNull=false)]
		public string StateCode
		{
			get
			{
				return this._StateCode;
			}
			set
			{
				if ((this._StateCode != value))
				{
					this.OnStateCodeChanging(value);
					this.SendPropertyChanging();
					this._StateCode = value;
					this.SendPropertyChanged("StateCode");
					this.OnStateCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State1_City", Storage="_Cities", ThisKey="Id", OtherKey="StateId")]
		public EntitySet<City> Cities
		{
			get
			{
				return this._Cities;
			}
			set
			{
				this._Cities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.State1 = this;
		}
		
		private void detach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.State1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubCategory")]
	public partial class SubCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CategoryId;
		
		private string _SubCategoryName;
		
		private string _IconURL;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private System.Nullable<int> _OrderNumber;
		
		private EntitySet<ExpressCategory> _ExpressCategories;
		
		private EntitySet<HomeCategory> _HomeCategories;
		
		private EntitySet<Job> _Jobs;
		
		private EntitySet<UserSpeciality> _UserSpecialities;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnSubCategoryNameChanging(string value);
    partial void OnSubCategoryNameChanged();
    partial void OnIconURLChanging(string value);
    partial void OnIconURLChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnOrderNumberChanging(System.Nullable<int> value);
    partial void OnOrderNumberChanged();
    #endregion
		
		public SubCategory()
		{
			this._ExpressCategories = new EntitySet<ExpressCategory>(new Action<ExpressCategory>(this.attach_ExpressCategories), new Action<ExpressCategory>(this.detach_ExpressCategories));
			this._HomeCategories = new EntitySet<HomeCategory>(new Action<HomeCategory>(this.attach_HomeCategories), new Action<HomeCategory>(this.detach_HomeCategories));
			this._Jobs = new EntitySet<Job>(new Action<Job>(this.attach_Jobs), new Action<Job>(this.detach_Jobs));
			this._UserSpecialities = new EntitySet<UserSpeciality>(new Action<UserSpeciality>(this.attach_UserSpecialities), new Action<UserSpeciality>(this.detach_UserSpecialities));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int NOT NULL")]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCategoryName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string SubCategoryName
		{
			get
			{
				return this._SubCategoryName;
			}
			set
			{
				if ((this._SubCategoryName != value))
				{
					this.OnSubCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._SubCategoryName = value;
					this.SendPropertyChanged("SubCategoryName");
					this.OnSubCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IconURL", DbType="NVarChar(1600)")]
		public string IconURL
		{
			get
			{
				return this._IconURL;
			}
			set
			{
				if ((this._IconURL != value))
				{
					this.OnIconURLChanging(value);
					this.SendPropertyChanging();
					this._IconURL = value;
					this.SendPropertyChanged("IconURL");
					this.OnIconURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderNumber", DbType="Int")]
		public System.Nullable<int> OrderNumber
		{
			get
			{
				return this._OrderNumber;
			}
			set
			{
				if ((this._OrderNumber != value))
				{
					this.OnOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._OrderNumber = value;
					this.SendPropertyChanged("OrderNumber");
					this.OnOrderNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubCategory_ExpressCategory", Storage="_ExpressCategories", ThisKey="Id", OtherKey="SubCatId")]
		public EntitySet<ExpressCategory> ExpressCategories
		{
			get
			{
				return this._ExpressCategories;
			}
			set
			{
				this._ExpressCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubCategory_HomeCategory", Storage="_HomeCategories", ThisKey="Id", OtherKey="SubCategoryId")]
		public EntitySet<HomeCategory> HomeCategories
		{
			get
			{
				return this._HomeCategories;
			}
			set
			{
				this._HomeCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubCategory_Job", Storage="_Jobs", ThisKey="Id", OtherKey="SubCategoryId")]
		public EntitySet<Job> Jobs
		{
			get
			{
				return this._Jobs;
			}
			set
			{
				this._Jobs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubCategory_UserSpeciality", Storage="_UserSpecialities", ThisKey="Id", OtherKey="SubCategoryId")]
		public EntitySet<UserSpeciality> UserSpecialities
		{
			get
			{
				return this._UserSpecialities;
			}
			set
			{
				this._UserSpecialities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_SubCategory", Storage="_Category", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.SubCategories.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.SubCategories.Add(this);
						this._CategoryId = value.Id;
					}
					else
					{
						this._CategoryId = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExpressCategories(ExpressCategory entity)
		{
			this.SendPropertyChanging();
			entity.SubCategory = this;
		}
		
		private void detach_ExpressCategories(ExpressCategory entity)
		{
			this.SendPropertyChanging();
			entity.SubCategory = null;
		}
		
		private void attach_HomeCategories(HomeCategory entity)
		{
			this.SendPropertyChanging();
			entity.SubCategory = this;
		}
		
		private void detach_HomeCategories(HomeCategory entity)
		{
			this.SendPropertyChanging();
			entity.SubCategory = null;
		}
		
		private void attach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.SubCategory = this;
		}
		
		private void detach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.SubCategory = null;
		}
		
		private void attach_UserSpecialities(UserSpeciality entity)
		{
			this.SendPropertyChanging();
			entity.SubCategory = this;
		}
		
		private void detach_UserSpecialities(UserSpeciality entity)
		{
			this.SendPropertyChanging();
			entity.SubCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TempExpressJob")]
	public partial class TempExpressJob : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _JobData;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private System.DateTime _AddedOn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnJobDataChanging(string value);
    partial void OnJobDataChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnAddedOnChanging(System.DateTime value);
    partial void OnAddedOnChanged();
    #endregion
		
		public TempExpressJob()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobData", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string JobData
		{
			get
			{
				return this._JobData;
			}
			set
			{
				if ((this._JobData != value))
				{
					this.OnJobDataChanging(value);
					this.SendPropertyChanging();
					this._JobData = value;
					this.SendPropertyChanged("JobData");
					this.OnJobDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedOn", DbType="DateTime NOT NULL")]
		public System.DateTime AddedOn
		{
			get
			{
				return this._AddedOn;
			}
			set
			{
				if ((this._AddedOn != value))
				{
					this.OnAddedOnChanging(value);
					this.SendPropertyChanging();
					this._AddedOn = value;
					this.SendPropertyChanged("AddedOn");
					this.OnAddedOnChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TempJob")]
	public partial class TempJob : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _JobData;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private System.DateTime _AddedOn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnJobDataChanging(string value);
    partial void OnJobDataChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnAddedOnChanging(System.DateTime value);
    partial void OnAddedOnChanged();
    #endregion
		
		public TempJob()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobData", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string JobData
		{
			get
			{
				return this._JobData;
			}
			set
			{
				if ((this._JobData != value))
				{
					this.OnJobDataChanging(value);
					this.SendPropertyChanging();
					this._JobData = value;
					this.SendPropertyChanged("JobData");
					this.OnJobDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedOn", DbType="DateTime NOT NULL")]
		public System.DateTime AddedOn
		{
			get
			{
				return this._AddedOn;
			}
			set
			{
				if ((this._AddedOn != value))
				{
					this.OnAddedOnChanging(value);
					this.SendPropertyChanging();
					this._AddedOn = value;
					this.SendPropertyChanged("AddedOn");
					this.OnAddedOnChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransactionType")]
	public partial class TransactionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _TransactionTypeName;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<UserTransaction> _UserTransactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTransactionTypeNameChanging(string value);
    partial void OnTransactionTypeNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public TransactionType()
		{
			this._UserTransactions = new EntitySet<UserTransaction>(new Action<UserTransaction>(this.attach_UserTransactions), new Action<UserTransaction>(this.detach_UserTransactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionTypeName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string TransactionTypeName
		{
			get
			{
				return this._TransactionTypeName;
			}
			set
			{
				if ((this._TransactionTypeName != value))
				{
					this.OnTransactionTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TransactionTypeName = value;
					this.SendPropertyChanged("TransactionTypeName");
					this.OnTransactionTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransactionType_UserTransaction", Storage="_UserTransactions", ThisKey="Id", OtherKey="TransactionTypeId")]
		public EntitySet<UserTransaction> UserTransactions
		{
			get
			{
				return this._UserTransactions;
			}
			set
			{
				this._UserTransactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserTransactions(UserTransaction entity)
		{
			this.SendPropertyChanging();
			entity.TransactionType = this;
		}
		
		private void detach_UserTransactions(UserTransaction entity)
		{
			this.SendPropertyChanging();
			entity.TransactionType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserBankCard")]
	public partial class UserBankCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Currency;
		
		private string _NameOnCard;
		
		private System.DateTime _ExpiryDate;
		
		private string _SecurityCode;
		
		private int _UserId;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private System.DateTime _AddedOn;
		
		private string _CardNumber;
		
		private System.Nullable<int> _CardTypeId;
		
		private EntitySet<UserTransaction> _UserTransactions;
		
		private EntityRef<CardType> _CardType;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCurrencyChanging(string value);
    partial void OnCurrencyChanged();
    partial void OnNameOnCardChanging(string value);
    partial void OnNameOnCardChanged();
    partial void OnExpiryDateChanging(System.DateTime value);
    partial void OnExpiryDateChanged();
    partial void OnSecurityCodeChanging(string value);
    partial void OnSecurityCodeChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnAddedOnChanging(System.DateTime value);
    partial void OnAddedOnChanged();
    partial void OnCardNumberChanging(string value);
    partial void OnCardNumberChanged();
    partial void OnCardTypeIdChanging(System.Nullable<int> value);
    partial void OnCardTypeIdChanged();
    #endregion
		
		public UserBankCard()
		{
			this._UserTransactions = new EntitySet<UserTransaction>(new Action<UserTransaction>(this.attach_UserTransactions), new Action<UserTransaction>(this.detach_UserTransactions));
			this._CardType = default(EntityRef<CardType>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Currency", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameOnCard", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string NameOnCard
		{
			get
			{
				return this._NameOnCard;
			}
			set
			{
				if ((this._NameOnCard != value))
				{
					this.OnNameOnCardChanging(value);
					this.SendPropertyChanging();
					this._NameOnCard = value;
					this.SendPropertyChanged("NameOnCard");
					this.OnNameOnCardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpiryDate", DbType="DateTime NOT NULL")]
		public System.DateTime ExpiryDate
		{
			get
			{
				return this._ExpiryDate;
			}
			set
			{
				if ((this._ExpiryDate != value))
				{
					this.OnExpiryDateChanging(value);
					this.SendPropertyChanging();
					this._ExpiryDate = value;
					this.SendPropertyChanged("ExpiryDate");
					this.OnExpiryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityCode", DbType="NVarChar(1600)")]
		public string SecurityCode
		{
			get
			{
				return this._SecurityCode;
			}
			set
			{
				if ((this._SecurityCode != value))
				{
					this.OnSecurityCodeChanging(value);
					this.SendPropertyChanging();
					this._SecurityCode = value;
					this.SendPropertyChanged("SecurityCode");
					this.OnSecurityCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedOn", DbType="DateTime NOT NULL")]
		public System.DateTime AddedOn
		{
			get
			{
				return this._AddedOn;
			}
			set
			{
				if ((this._AddedOn != value))
				{
					this.OnAddedOnChanging(value);
					this.SendPropertyChanging();
					this._AddedOn = value;
					this.SendPropertyChanged("AddedOn");
					this.OnAddedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardNumber", DbType="NVarChar(1600)")]
		public string CardNumber
		{
			get
			{
				return this._CardNumber;
			}
			set
			{
				if ((this._CardNumber != value))
				{
					this.OnCardNumberChanging(value);
					this.SendPropertyChanging();
					this._CardNumber = value;
					this.SendPropertyChanged("CardNumber");
					this.OnCardNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardTypeId", DbType="Int")]
		public System.Nullable<int> CardTypeId
		{
			get
			{
				return this._CardTypeId;
			}
			set
			{
				if ((this._CardTypeId != value))
				{
					if (this._CardType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCardTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CardTypeId = value;
					this.SendPropertyChanged("CardTypeId");
					this.OnCardTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserBankCard_UserTransaction", Storage="_UserTransactions", ThisKey="Id", OtherKey="BankCardId")]
		public EntitySet<UserTransaction> UserTransactions
		{
			get
			{
				return this._UserTransactions;
			}
			set
			{
				this._UserTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CardType_UserBankCard", Storage="_CardType", ThisKey="CardTypeId", OtherKey="Id", IsForeignKey=true)]
		public CardType CardType
		{
			get
			{
				return this._CardType.Entity;
			}
			set
			{
				CardType previousValue = this._CardType.Entity;
				if (((previousValue != value) 
							|| (this._CardType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CardType.Entity = null;
						previousValue.UserBankCards.Remove(this);
					}
					this._CardType.Entity = value;
					if ((value != null))
					{
						value.UserBankCards.Add(this);
						this._CardTypeId = value.Id;
					}
					else
					{
						this._CardTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CardType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserBankCard", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserBankCards.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserBankCards.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserTransactions(UserTransaction entity)
		{
			this.SendPropertyChanging();
			entity.UserBankCard = this;
		}
		
		private void detach_UserTransactions(UserTransaction entity)
		{
			this.SendPropertyChanging();
			entity.UserBankCard = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserBid")]
	public partial class UserBid : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _JobId;
		
		private int _UserId;
		
		private System.Nullable<double> _BidAmount;
		
		private System.DateTime _BidOnDate;
		
		private int _BidStatusId;
		
		private System.Nullable<int> _ProposalTemplateId;
		
		private string _Message;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private System.Nullable<int> _DiscountedAmount;
		
		private EntitySet<UserJobAgreement> _UserJobAgreements;
		
		private EntitySet<UserJobRejection> _UserJobRejections;
		
		private EntitySet<UserTokenUsage> _UserTokenUsages;
		
		private EntityRef<BidStatus> _BidStatus;
		
		private EntityRef<Job> _Job;
		
		private EntityRef<UserProposalTemplate> _UserProposalTemplate;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnJobIdChanging(int value);
    partial void OnJobIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnBidAmountChanging(System.Nullable<double> value);
    partial void OnBidAmountChanged();
    partial void OnBidOnDateChanging(System.DateTime value);
    partial void OnBidOnDateChanged();
    partial void OnBidStatusIdChanging(int value);
    partial void OnBidStatusIdChanged();
    partial void OnProposalTemplateIdChanging(System.Nullable<int> value);
    partial void OnProposalTemplateIdChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnDiscountedAmountChanging(System.Nullable<int> value);
    partial void OnDiscountedAmountChanged();
    #endregion
		
		public UserBid()
		{
			this._UserJobAgreements = new EntitySet<UserJobAgreement>(new Action<UserJobAgreement>(this.attach_UserJobAgreements), new Action<UserJobAgreement>(this.detach_UserJobAgreements));
			this._UserJobRejections = new EntitySet<UserJobRejection>(new Action<UserJobRejection>(this.attach_UserJobRejections), new Action<UserJobRejection>(this.detach_UserJobRejections));
			this._UserTokenUsages = new EntitySet<UserTokenUsage>(new Action<UserTokenUsage>(this.attach_UserTokenUsages), new Action<UserTokenUsage>(this.detach_UserTokenUsages));
			this._BidStatus = default(EntityRef<BidStatus>);
			this._Job = default(EntityRef<Job>);
			this._UserProposalTemplate = default(EntityRef<UserProposalTemplate>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="Int NOT NULL")]
		public int JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BidAmount", DbType="Float")]
		public System.Nullable<double> BidAmount
		{
			get
			{
				return this._BidAmount;
			}
			set
			{
				if ((this._BidAmount != value))
				{
					this.OnBidAmountChanging(value);
					this.SendPropertyChanging();
					this._BidAmount = value;
					this.SendPropertyChanged("BidAmount");
					this.OnBidAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BidOnDate", DbType="DateTime NOT NULL")]
		public System.DateTime BidOnDate
		{
			get
			{
				return this._BidOnDate;
			}
			set
			{
				if ((this._BidOnDate != value))
				{
					this.OnBidOnDateChanging(value);
					this.SendPropertyChanging();
					this._BidOnDate = value;
					this.SendPropertyChanged("BidOnDate");
					this.OnBidOnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BidStatusId", DbType="Int NOT NULL")]
		public int BidStatusId
		{
			get
			{
				return this._BidStatusId;
			}
			set
			{
				if ((this._BidStatusId != value))
				{
					if (this._BidStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBidStatusIdChanging(value);
					this.SendPropertyChanging();
					this._BidStatusId = value;
					this.SendPropertyChanged("BidStatusId");
					this.OnBidStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProposalTemplateId", DbType="Int")]
		public System.Nullable<int> ProposalTemplateId
		{
			get
			{
				return this._ProposalTemplateId;
			}
			set
			{
				if ((this._ProposalTemplateId != value))
				{
					if (this._UserProposalTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProposalTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._ProposalTemplateId = value;
					this.SendPropertyChanged("ProposalTemplateId");
					this.OnProposalTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(MAX)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiscountedAmount", DbType="Int")]
		public System.Nullable<int> DiscountedAmount
		{
			get
			{
				return this._DiscountedAmount;
			}
			set
			{
				if ((this._DiscountedAmount != value))
				{
					this.OnDiscountedAmountChanging(value);
					this.SendPropertyChanging();
					this._DiscountedAmount = value;
					this.SendPropertyChanged("DiscountedAmount");
					this.OnDiscountedAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserBid_UserJobAgreement", Storage="_UserJobAgreements", ThisKey="Id", OtherKey="UserBidingId")]
		public EntitySet<UserJobAgreement> UserJobAgreements
		{
			get
			{
				return this._UserJobAgreements;
			}
			set
			{
				this._UserJobAgreements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserBid_UserJobRejection", Storage="_UserJobRejections", ThisKey="Id", OtherKey="UserBidId")]
		public EntitySet<UserJobRejection> UserJobRejections
		{
			get
			{
				return this._UserJobRejections;
			}
			set
			{
				this._UserJobRejections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserBid_UserTokenUsage", Storage="_UserTokenUsages", ThisKey="Id", OtherKey="UsedOnBidId")]
		public EntitySet<UserTokenUsage> UserTokenUsages
		{
			get
			{
				return this._UserTokenUsages;
			}
			set
			{
				this._UserTokenUsages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BidStatus_UserBid", Storage="_BidStatus", ThisKey="BidStatusId", OtherKey="Id", IsForeignKey=true)]
		public BidStatus BidStatus
		{
			get
			{
				return this._BidStatus.Entity;
			}
			set
			{
				BidStatus previousValue = this._BidStatus.Entity;
				if (((previousValue != value) 
							|| (this._BidStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BidStatus.Entity = null;
						previousValue.UserBids.Remove(this);
					}
					this._BidStatus.Entity = value;
					if ((value != null))
					{
						value.UserBids.Add(this);
						this._BidStatusId = value.Id;
					}
					else
					{
						this._BidStatusId = default(int);
					}
					this.SendPropertyChanged("BidStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_UserBid", Storage="_Job", ThisKey="JobId", OtherKey="Id", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.UserBids.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.UserBids.Add(this);
						this._JobId = value.Id;
					}
					else
					{
						this._JobId = default(int);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProposalTemplate_UserBid", Storage="_UserProposalTemplate", ThisKey="ProposalTemplateId", OtherKey="Id", IsForeignKey=true)]
		public UserProposalTemplate UserProposalTemplate
		{
			get
			{
				return this._UserProposalTemplate.Entity;
			}
			set
			{
				UserProposalTemplate previousValue = this._UserProposalTemplate.Entity;
				if (((previousValue != value) 
							|| (this._UserProposalTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProposalTemplate.Entity = null;
						previousValue.UserBids.Remove(this);
					}
					this._UserProposalTemplate.Entity = value;
					if ((value != null))
					{
						value.UserBids.Add(this);
						this._ProposalTemplateId = value.Id;
					}
					else
					{
						this._ProposalTemplateId = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserProposalTemplate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserBid", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserBids.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserBids.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserJobAgreements(UserJobAgreement entity)
		{
			this.SendPropertyChanging();
			entity.UserBid = this;
		}
		
		private void detach_UserJobAgreements(UserJobAgreement entity)
		{
			this.SendPropertyChanging();
			entity.UserBid = null;
		}
		
		private void attach_UserJobRejections(UserJobRejection entity)
		{
			this.SendPropertyChanging();
			entity.UserBid = this;
		}
		
		private void detach_UserJobRejections(UserJobRejection entity)
		{
			this.SendPropertyChanging();
			entity.UserBid = null;
		}
		
		private void attach_UserTokenUsages(UserTokenUsage entity)
		{
			this.SendPropertyChanging();
			entity.UserBid = this;
		}
		
		private void detach_UserTokenUsages(UserTokenUsage entity)
		{
			this.SendPropertyChanging();
			entity.UserBid = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserCertificate")]
	public partial class UserCertificate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _NameOfCertificate;
		
		private string _IssuedByOrganization;
		
		private System.Nullable<System.DateTime> _IssuedOnDate;
		
		private int _UserId;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameOfCertificateChanging(string value);
    partial void OnNameOfCertificateChanged();
    partial void OnIssuedByOrganizationChanging(string value);
    partial void OnIssuedByOrganizationChanged();
    partial void OnIssuedOnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIssuedOnDateChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public UserCertificate()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameOfCertificate", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string NameOfCertificate
		{
			get
			{
				return this._NameOfCertificate;
			}
			set
			{
				if ((this._NameOfCertificate != value))
				{
					this.OnNameOfCertificateChanging(value);
					this.SendPropertyChanging();
					this._NameOfCertificate = value;
					this.SendPropertyChanged("NameOfCertificate");
					this.OnNameOfCertificateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssuedByOrganization", DbType="NVarChar(1600)")]
		public string IssuedByOrganization
		{
			get
			{
				return this._IssuedByOrganization;
			}
			set
			{
				if ((this._IssuedByOrganization != value))
				{
					this.OnIssuedByOrganizationChanging(value);
					this.SendPropertyChanging();
					this._IssuedByOrganization = value;
					this.SendPropertyChanged("IssuedByOrganization");
					this.OnIssuedByOrganizationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssuedOnDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> IssuedOnDate
		{
			get
			{
				return this._IssuedOnDate;
			}
			set
			{
				if ((this._IssuedOnDate != value))
				{
					this.OnIssuedOnDateChanging(value);
					this.SendPropertyChanging();
					this._IssuedOnDate = value;
					this.SendPropertyChanged("IssuedOnDate");
					this.OnIssuedOnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserCertificate", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserCertificates.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserCertificates.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserEducation")]
	public partial class UserEducation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _InstituteName;
		
		private string _DegreeName;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _LastDate;
		
		private int _UserId;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnInstituteNameChanging(string value);
    partial void OnInstituteNameChanged();
    partial void OnDegreeNameChanging(string value);
    partial void OnDegreeNameChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnLastDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastDateChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public UserEducation()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstituteName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string InstituteName
		{
			get
			{
				return this._InstituteName;
			}
			set
			{
				if ((this._InstituteName != value))
				{
					this.OnInstituteNameChanging(value);
					this.SendPropertyChanging();
					this._InstituteName = value;
					this.SendPropertyChanged("InstituteName");
					this.OnInstituteNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DegreeName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string DegreeName
		{
			get
			{
				return this._DegreeName;
			}
			set
			{
				if ((this._DegreeName != value))
				{
					this.OnDegreeNameChanging(value);
					this.SendPropertyChanging();
					this._DegreeName = value;
					this.SendPropertyChanged("DegreeName");
					this.OnDegreeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastDate
		{
			get
			{
				return this._LastDate;
			}
			set
			{
				if ((this._LastDate != value))
				{
					this.OnLastDateChanging(value);
					this.SendPropertyChanging();
					this._LastDate = value;
					this.SendPropertyChanged("LastDate");
					this.OnLastDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserEducation", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserEducations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserEducations.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserEmailConfiguration")]
	public partial class UserEmailConfiguration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private int _EmailConfigurationId;
		
		private int _EmailConfigurationOptionId;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntityRef<EmailConfiguration> _EmailConfiguration;
		
		private EntityRef<EmailConfigurationOption> _EmailConfigurationOption;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnEmailConfigurationIdChanging(int value);
    partial void OnEmailConfigurationIdChanged();
    partial void OnEmailConfigurationOptionIdChanging(int value);
    partial void OnEmailConfigurationOptionIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public UserEmailConfiguration()
		{
			this._EmailConfiguration = default(EntityRef<EmailConfiguration>);
			this._EmailConfigurationOption = default(EntityRef<EmailConfigurationOption>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailConfigurationId", DbType="Int NOT NULL")]
		public int EmailConfigurationId
		{
			get
			{
				return this._EmailConfigurationId;
			}
			set
			{
				if ((this._EmailConfigurationId != value))
				{
					if (this._EmailConfiguration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmailConfigurationIdChanging(value);
					this.SendPropertyChanging();
					this._EmailConfigurationId = value;
					this.SendPropertyChanged("EmailConfigurationId");
					this.OnEmailConfigurationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailConfigurationOptionId", DbType="Int NOT NULL")]
		public int EmailConfigurationOptionId
		{
			get
			{
				return this._EmailConfigurationOptionId;
			}
			set
			{
				if ((this._EmailConfigurationOptionId != value))
				{
					if (this._EmailConfigurationOption.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmailConfigurationOptionIdChanging(value);
					this.SendPropertyChanging();
					this._EmailConfigurationOptionId = value;
					this.SendPropertyChanged("EmailConfigurationOptionId");
					this.OnEmailConfigurationOptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmailConfiguration_UserEmailConfiguration", Storage="_EmailConfiguration", ThisKey="EmailConfigurationId", OtherKey="Id", IsForeignKey=true)]
		public EmailConfiguration EmailConfiguration
		{
			get
			{
				return this._EmailConfiguration.Entity;
			}
			set
			{
				EmailConfiguration previousValue = this._EmailConfiguration.Entity;
				if (((previousValue != value) 
							|| (this._EmailConfiguration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmailConfiguration.Entity = null;
						previousValue.UserEmailConfigurations.Remove(this);
					}
					this._EmailConfiguration.Entity = value;
					if ((value != null))
					{
						value.UserEmailConfigurations.Add(this);
						this._EmailConfigurationId = value.Id;
					}
					else
					{
						this._EmailConfigurationId = default(int);
					}
					this.SendPropertyChanged("EmailConfiguration");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmailConfigurationOption_UserEmailConfiguration", Storage="_EmailConfigurationOption", ThisKey="EmailConfigurationOptionId", OtherKey="Id", IsForeignKey=true)]
		public EmailConfigurationOption EmailConfigurationOption
		{
			get
			{
				return this._EmailConfigurationOption.Entity;
			}
			set
			{
				EmailConfigurationOption previousValue = this._EmailConfigurationOption.Entity;
				if (((previousValue != value) 
							|| (this._EmailConfigurationOption.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmailConfigurationOption.Entity = null;
						previousValue.UserEmailConfigurations.Remove(this);
					}
					this._EmailConfigurationOption.Entity = value;
					if ((value != null))
					{
						value.UserEmailConfigurations.Add(this);
						this._EmailConfigurationOptionId = value.Id;
					}
					else
					{
						this._EmailConfigurationOptionId = default(int);
					}
					this.SendPropertyChanged("EmailConfigurationOption");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserEmailConfiguration", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserEmailConfigurations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserEmailConfigurations.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserEmployement")]
	public partial class UserEmployement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _NameOfCompany;
		
		private string _JobTitle;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _LastDate;
		
		private System.Nullable<bool> _IsCurrentlyWorkingHere;
		
		private int _UserId;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameOfCompanyChanging(string value);
    partial void OnNameOfCompanyChanged();
    partial void OnJobTitleChanging(string value);
    partial void OnJobTitleChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnLastDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastDateChanged();
    partial void OnIsCurrentlyWorkingHereChanging(System.Nullable<bool> value);
    partial void OnIsCurrentlyWorkingHereChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public UserEmployement()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameOfCompany", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string NameOfCompany
		{
			get
			{
				return this._NameOfCompany;
			}
			set
			{
				if ((this._NameOfCompany != value))
				{
					this.OnNameOfCompanyChanging(value);
					this.SendPropertyChanging();
					this._NameOfCompany = value;
					this.SendPropertyChanged("NameOfCompany");
					this.OnNameOfCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobTitle", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string JobTitle
		{
			get
			{
				return this._JobTitle;
			}
			set
			{
				if ((this._JobTitle != value))
				{
					this.OnJobTitleChanging(value);
					this.SendPropertyChanging();
					this._JobTitle = value;
					this.SendPropertyChanged("JobTitle");
					this.OnJobTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastDate
		{
			get
			{
				return this._LastDate;
			}
			set
			{
				if ((this._LastDate != value))
				{
					this.OnLastDateChanging(value);
					this.SendPropertyChanging();
					this._LastDate = value;
					this.SendPropertyChanged("LastDate");
					this.OnLastDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCurrentlyWorkingHere", DbType="Bit")]
		public System.Nullable<bool> IsCurrentlyWorkingHere
		{
			get
			{
				return this._IsCurrentlyWorkingHere;
			}
			set
			{
				if ((this._IsCurrentlyWorkingHere != value))
				{
					this.OnIsCurrentlyWorkingHereChanging(value);
					this.SendPropertyChanging();
					this._IsCurrentlyWorkingHere = value;
					this.SendPropertyChanged("IsCurrentlyWorkingHere");
					this.OnIsCurrentlyWorkingHereChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserEmployement", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserEmployements.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserEmployements.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserJobAgreement")]
	public partial class UserJobAgreement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserIdClient;
		
		private int _UserIdAgent;
		
		private int _JobId;
		
		private int _JobStatusId;
		
		private double _AgreedAmount;
		
		private System.Nullable<int> _UserBidingId;
		
		private string _Comments;
		
		private System.Nullable<System.DateTime> _JobToBeDoneByDate;
		
		private bool _IsApprovedByAgent;
		
		private bool _IsApprovedByClient;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private System.DateTime _AgreementCreatedOnDate;
		
		private System.Nullable<int> _StartingAmount;
		
		private System.Nullable<int> _FinishingAmount;
		
		private System.Nullable<System.DateTime> _JobStartDate;
		
		private System.Nullable<int> _ChatId;
		
		private EntitySet<RejectedAgreement> _RejectedAgreements;
		
		private EntityRef<Chat> _Chat;
		
		private EntityRef<Job> _Job;
		
		private EntityRef<JobStatus> _JobStatus;
		
		private EntityRef<UserBid> _UserBid;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdClientChanging(int value);
    partial void OnUserIdClientChanged();
    partial void OnUserIdAgentChanging(int value);
    partial void OnUserIdAgentChanged();
    partial void OnJobIdChanging(int value);
    partial void OnJobIdChanged();
    partial void OnJobStatusIdChanging(int value);
    partial void OnJobStatusIdChanged();
    partial void OnAgreedAmountChanging(double value);
    partial void OnAgreedAmountChanged();
    partial void OnUserBidingIdChanging(System.Nullable<int> value);
    partial void OnUserBidingIdChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnJobToBeDoneByDateChanging(System.Nullable<System.DateTime> value);
    partial void OnJobToBeDoneByDateChanged();
    partial void OnIsApprovedByAgentChanging(bool value);
    partial void OnIsApprovedByAgentChanged();
    partial void OnIsApprovedByClientChanging(bool value);
    partial void OnIsApprovedByClientChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnAgreementCreatedOnDateChanging(System.DateTime value);
    partial void OnAgreementCreatedOnDateChanged();
    partial void OnStartingAmountChanging(System.Nullable<int> value);
    partial void OnStartingAmountChanged();
    partial void OnFinishingAmountChanging(System.Nullable<int> value);
    partial void OnFinishingAmountChanged();
    partial void OnJobStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnJobStartDateChanged();
    partial void OnChatIdChanging(System.Nullable<int> value);
    partial void OnChatIdChanged();
    #endregion
		
		public UserJobAgreement()
		{
			this._RejectedAgreements = new EntitySet<RejectedAgreement>(new Action<RejectedAgreement>(this.attach_RejectedAgreements), new Action<RejectedAgreement>(this.detach_RejectedAgreements));
			this._Chat = default(EntityRef<Chat>);
			this._Job = default(EntityRef<Job>);
			this._JobStatus = default(EntityRef<JobStatus>);
			this._UserBid = default(EntityRef<UserBid>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIdClient", DbType="Int NOT NULL")]
		public int UserIdClient
		{
			get
			{
				return this._UserIdClient;
			}
			set
			{
				if ((this._UserIdClient != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdClientChanging(value);
					this.SendPropertyChanging();
					this._UserIdClient = value;
					this.SendPropertyChanged("UserIdClient");
					this.OnUserIdClientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIdAgent", DbType="Int NOT NULL")]
		public int UserIdAgent
		{
			get
			{
				return this._UserIdAgent;
			}
			set
			{
				if ((this._UserIdAgent != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdAgentChanging(value);
					this.SendPropertyChanging();
					this._UserIdAgent = value;
					this.SendPropertyChanged("UserIdAgent");
					this.OnUserIdAgentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="Int NOT NULL")]
		public int JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobStatusId", DbType="Int NOT NULL")]
		public int JobStatusId
		{
			get
			{
				return this._JobStatusId;
			}
			set
			{
				if ((this._JobStatusId != value))
				{
					if (this._JobStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobStatusIdChanging(value);
					this.SendPropertyChanging();
					this._JobStatusId = value;
					this.SendPropertyChanged("JobStatusId");
					this.OnJobStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgreedAmount", DbType="Float NOT NULL")]
		public double AgreedAmount
		{
			get
			{
				return this._AgreedAmount;
			}
			set
			{
				if ((this._AgreedAmount != value))
				{
					this.OnAgreedAmountChanging(value);
					this.SendPropertyChanging();
					this._AgreedAmount = value;
					this.SendPropertyChanged("AgreedAmount");
					this.OnAgreedAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserBidingId", DbType="Int")]
		public System.Nullable<int> UserBidingId
		{
			get
			{
				return this._UserBidingId;
			}
			set
			{
				if ((this._UserBidingId != value))
				{
					if (this._UserBid.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserBidingIdChanging(value);
					this.SendPropertyChanging();
					this._UserBidingId = value;
					this.SendPropertyChanged("UserBidingId");
					this.OnUserBidingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="NVarChar(MAX)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobToBeDoneByDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> JobToBeDoneByDate
		{
			get
			{
				return this._JobToBeDoneByDate;
			}
			set
			{
				if ((this._JobToBeDoneByDate != value))
				{
					this.OnJobToBeDoneByDateChanging(value);
					this.SendPropertyChanging();
					this._JobToBeDoneByDate = value;
					this.SendPropertyChanged("JobToBeDoneByDate");
					this.OnJobToBeDoneByDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApprovedByAgent", DbType="Bit NOT NULL")]
		public bool IsApprovedByAgent
		{
			get
			{
				return this._IsApprovedByAgent;
			}
			set
			{
				if ((this._IsApprovedByAgent != value))
				{
					this.OnIsApprovedByAgentChanging(value);
					this.SendPropertyChanging();
					this._IsApprovedByAgent = value;
					this.SendPropertyChanged("IsApprovedByAgent");
					this.OnIsApprovedByAgentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApprovedByClient", DbType="Bit NOT NULL")]
		public bool IsApprovedByClient
		{
			get
			{
				return this._IsApprovedByClient;
			}
			set
			{
				if ((this._IsApprovedByClient != value))
				{
					this.OnIsApprovedByClientChanging(value);
					this.SendPropertyChanging();
					this._IsApprovedByClient = value;
					this.SendPropertyChanged("IsApprovedByClient");
					this.OnIsApprovedByClientChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgreementCreatedOnDate", DbType="DateTime NOT NULL")]
		public System.DateTime AgreementCreatedOnDate
		{
			get
			{
				return this._AgreementCreatedOnDate;
			}
			set
			{
				if ((this._AgreementCreatedOnDate != value))
				{
					this.OnAgreementCreatedOnDateChanging(value);
					this.SendPropertyChanging();
					this._AgreementCreatedOnDate = value;
					this.SendPropertyChanged("AgreementCreatedOnDate");
					this.OnAgreementCreatedOnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartingAmount", DbType="Int")]
		public System.Nullable<int> StartingAmount
		{
			get
			{
				return this._StartingAmount;
			}
			set
			{
				if ((this._StartingAmount != value))
				{
					this.OnStartingAmountChanging(value);
					this.SendPropertyChanging();
					this._StartingAmount = value;
					this.SendPropertyChanged("StartingAmount");
					this.OnStartingAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishingAmount", DbType="Int")]
		public System.Nullable<int> FinishingAmount
		{
			get
			{
				return this._FinishingAmount;
			}
			set
			{
				if ((this._FinishingAmount != value))
				{
					this.OnFinishingAmountChanging(value);
					this.SendPropertyChanging();
					this._FinishingAmount = value;
					this.SendPropertyChanged("FinishingAmount");
					this.OnFinishingAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> JobStartDate
		{
			get
			{
				return this._JobStartDate;
			}
			set
			{
				if ((this._JobStartDate != value))
				{
					this.OnJobStartDateChanging(value);
					this.SendPropertyChanging();
					this._JobStartDate = value;
					this.SendPropertyChanged("JobStartDate");
					this.OnJobStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChatId", DbType="Int")]
		public System.Nullable<int> ChatId
		{
			get
			{
				return this._ChatId;
			}
			set
			{
				if ((this._ChatId != value))
				{
					if (this._Chat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChatIdChanging(value);
					this.SendPropertyChanging();
					this._ChatId = value;
					this.SendPropertyChanged("ChatId");
					this.OnChatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserJobAgreement_RejectedAgreement", Storage="_RejectedAgreements", ThisKey="Id", OtherKey="AgreementId")]
		public EntitySet<RejectedAgreement> RejectedAgreements
		{
			get
			{
				return this._RejectedAgreements;
			}
			set
			{
				this._RejectedAgreements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Chat_UserJobAgreement", Storage="_Chat", ThisKey="ChatId", OtherKey="Id", IsForeignKey=true)]
		public Chat Chat
		{
			get
			{
				return this._Chat.Entity;
			}
			set
			{
				Chat previousValue = this._Chat.Entity;
				if (((previousValue != value) 
							|| (this._Chat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chat.Entity = null;
						previousValue.UserJobAgreements.Remove(this);
					}
					this._Chat.Entity = value;
					if ((value != null))
					{
						value.UserJobAgreements.Add(this);
						this._ChatId = value.Id;
					}
					else
					{
						this._ChatId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Chat");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_UserJobAgreement", Storage="_Job", ThisKey="JobId", OtherKey="Id", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.UserJobAgreements.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.UserJobAgreements.Add(this);
						this._JobId = value.Id;
					}
					else
					{
						this._JobId = default(int);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobStatus_UserJobAgreement", Storage="_JobStatus", ThisKey="JobStatusId", OtherKey="Id", IsForeignKey=true)]
		public JobStatus JobStatus
		{
			get
			{
				return this._JobStatus.Entity;
			}
			set
			{
				JobStatus previousValue = this._JobStatus.Entity;
				if (((previousValue != value) 
							|| (this._JobStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobStatus.Entity = null;
						previousValue.UserJobAgreements.Remove(this);
					}
					this._JobStatus.Entity = value;
					if ((value != null))
					{
						value.UserJobAgreements.Add(this);
						this._JobStatusId = value.Id;
					}
					else
					{
						this._JobStatusId = default(int);
					}
					this.SendPropertyChanged("JobStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserBid_UserJobAgreement", Storage="_UserBid", ThisKey="UserBidingId", OtherKey="Id", IsForeignKey=true)]
		public UserBid UserBid
		{
			get
			{
				return this._UserBid.Entity;
			}
			set
			{
				UserBid previousValue = this._UserBid.Entity;
				if (((previousValue != value) 
							|| (this._UserBid.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserBid.Entity = null;
						previousValue.UserJobAgreements.Remove(this);
					}
					this._UserBid.Entity = value;
					if ((value != null))
					{
						value.UserJobAgreements.Add(this);
						this._UserBidingId = value.Id;
					}
					else
					{
						this._UserBidingId = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserBid");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserJobAgreement", Storage="_User", ThisKey="UserIdClient", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserJobAgreements.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserJobAgreements.Add(this);
						this._UserIdClient = value.Id;
					}
					else
					{
						this._UserIdClient = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserJobAgreement1", Storage="_User1", ThisKey="UserIdAgent", OtherKey="Id", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.UserJobAgreements1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.UserJobAgreements1.Add(this);
						this._UserIdAgent = value.Id;
					}
					else
					{
						this._UserIdAgent = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RejectedAgreements(RejectedAgreement entity)
		{
			this.SendPropertyChanging();
			entity.UserJobAgreement = this;
		}
		
		private void detach_RejectedAgreements(RejectedAgreement entity)
		{
			this.SendPropertyChanging();
			entity.UserJobAgreement = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserJobRejections")]
	public partial class UserJobRejection : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserIdRejectedBy;
		
		private int _UserIdGotRejected;
		
		private int _UserBidId;
		
		private string _ResonForRejection;
		
		private System.DateTime _DateOfRejection;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntityRef<UserBid> _UserBid;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdRejectedByChanging(int value);
    partial void OnUserIdRejectedByChanged();
    partial void OnUserIdGotRejectedChanging(int value);
    partial void OnUserIdGotRejectedChanged();
    partial void OnUserBidIdChanging(int value);
    partial void OnUserBidIdChanged();
    partial void OnResonForRejectionChanging(string value);
    partial void OnResonForRejectionChanged();
    partial void OnDateOfRejectionChanging(System.DateTime value);
    partial void OnDateOfRejectionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public UserJobRejection()
		{
			this._UserBid = default(EntityRef<UserBid>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIdRejectedBy", DbType="Int NOT NULL")]
		public int UserIdRejectedBy
		{
			get
			{
				return this._UserIdRejectedBy;
			}
			set
			{
				if ((this._UserIdRejectedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdRejectedByChanging(value);
					this.SendPropertyChanging();
					this._UserIdRejectedBy = value;
					this.SendPropertyChanged("UserIdRejectedBy");
					this.OnUserIdRejectedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIdGotRejected", DbType="Int NOT NULL")]
		public int UserIdGotRejected
		{
			get
			{
				return this._UserIdGotRejected;
			}
			set
			{
				if ((this._UserIdGotRejected != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdGotRejectedChanging(value);
					this.SendPropertyChanging();
					this._UserIdGotRejected = value;
					this.SendPropertyChanged("UserIdGotRejected");
					this.OnUserIdGotRejectedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserBidId", DbType="Int NOT NULL")]
		public int UserBidId
		{
			get
			{
				return this._UserBidId;
			}
			set
			{
				if ((this._UserBidId != value))
				{
					if (this._UserBid.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserBidIdChanging(value);
					this.SendPropertyChanging();
					this._UserBidId = value;
					this.SendPropertyChanged("UserBidId");
					this.OnUserBidIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResonForRejection", DbType="NVarChar(MAX)")]
		public string ResonForRejection
		{
			get
			{
				return this._ResonForRejection;
			}
			set
			{
				if ((this._ResonForRejection != value))
				{
					this.OnResonForRejectionChanging(value);
					this.SendPropertyChanging();
					this._ResonForRejection = value;
					this.SendPropertyChanged("ResonForRejection");
					this.OnResonForRejectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfRejection", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfRejection
		{
			get
			{
				return this._DateOfRejection;
			}
			set
			{
				if ((this._DateOfRejection != value))
				{
					this.OnDateOfRejectionChanging(value);
					this.SendPropertyChanging();
					this._DateOfRejection = value;
					this.SendPropertyChanged("DateOfRejection");
					this.OnDateOfRejectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserBid_UserJobRejection", Storage="_UserBid", ThisKey="UserBidId", OtherKey="Id", IsForeignKey=true)]
		public UserBid UserBid
		{
			get
			{
				return this._UserBid.Entity;
			}
			set
			{
				UserBid previousValue = this._UserBid.Entity;
				if (((previousValue != value) 
							|| (this._UserBid.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserBid.Entity = null;
						previousValue.UserJobRejections.Remove(this);
					}
					this._UserBid.Entity = value;
					if ((value != null))
					{
						value.UserJobRejections.Add(this);
						this._UserBidId = value.Id;
					}
					else
					{
						this._UserBidId = default(int);
					}
					this.SendPropertyChanged("UserBid");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserJobRejection", Storage="_User", ThisKey="UserIdRejectedBy", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserJobRejections.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserJobRejections.Add(this);
						this._UserIdRejectedBy = value.Id;
					}
					else
					{
						this._UserIdRejectedBy = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserJobRejection1", Storage="_User1", ThisKey="UserIdGotRejected", OtherKey="Id", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.UserJobRejections1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.UserJobRejections1.Add(this);
						this._UserIdGotRejected = value.Id;
					}
					else
					{
						this._UserIdGotRejected = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserPackage")]
	public partial class UserPackage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private int _PackageId;
		
		private System.Nullable<int> _NumberOfFreeToken;
		
		private System.Nullable<bool> _HasUsedFreetoken;
		
		private System.DateTime _StartDate;
		
		private System.Nullable<System.DateTime> _ExpiryDate;
		
		private System.Nullable<bool> _IsExpired;
		
		private System.Nullable<System.DateTime> _LastUpgraded;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private System.Nullable<int> _TrasnsactionId;
		
		private System.Nullable<int> _TokenPurchased;
		
		private EntitySet<UserPackageToken> _UserPackageTokens;
		
		private EntityRef<Package> _Package;
		
		private EntityRef<UserTransaction> _UserTransaction;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnPackageIdChanging(int value);
    partial void OnPackageIdChanged();
    partial void OnNumberOfFreeTokenChanging(System.Nullable<int> value);
    partial void OnNumberOfFreeTokenChanged();
    partial void OnHasUsedFreetokenChanging(System.Nullable<bool> value);
    partial void OnHasUsedFreetokenChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnExpiryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiryDateChanged();
    partial void OnIsExpiredChanging(System.Nullable<bool> value);
    partial void OnIsExpiredChanged();
    partial void OnLastUpgradedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpgradedChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnTrasnsactionIdChanging(System.Nullable<int> value);
    partial void OnTrasnsactionIdChanged();
    partial void OnTokenPurchasedChanging(System.Nullable<int> value);
    partial void OnTokenPurchasedChanged();
    #endregion
		
		public UserPackage()
		{
			this._UserPackageTokens = new EntitySet<UserPackageToken>(new Action<UserPackageToken>(this.attach_UserPackageTokens), new Action<UserPackageToken>(this.detach_UserPackageTokens));
			this._Package = default(EntityRef<Package>);
			this._UserTransaction = default(EntityRef<UserTransaction>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageId", DbType="Int NOT NULL")]
		public int PackageId
		{
			get
			{
				return this._PackageId;
			}
			set
			{
				if ((this._PackageId != value))
				{
					if (this._Package.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageIdChanging(value);
					this.SendPropertyChanging();
					this._PackageId = value;
					this.SendPropertyChanged("PackageId");
					this.OnPackageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfFreeToken", DbType="Int")]
		public System.Nullable<int> NumberOfFreeToken
		{
			get
			{
				return this._NumberOfFreeToken;
			}
			set
			{
				if ((this._NumberOfFreeToken != value))
				{
					this.OnNumberOfFreeTokenChanging(value);
					this.SendPropertyChanging();
					this._NumberOfFreeToken = value;
					this.SendPropertyChanged("NumberOfFreeToken");
					this.OnNumberOfFreeTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasUsedFreetoken", DbType="Bit")]
		public System.Nullable<bool> HasUsedFreetoken
		{
			get
			{
				return this._HasUsedFreetoken;
			}
			set
			{
				if ((this._HasUsedFreetoken != value))
				{
					this.OnHasUsedFreetokenChanging(value);
					this.SendPropertyChanging();
					this._HasUsedFreetoken = value;
					this.SendPropertyChanged("HasUsedFreetoken");
					this.OnHasUsedFreetokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpiryDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpiryDate
		{
			get
			{
				return this._ExpiryDate;
			}
			set
			{
				if ((this._ExpiryDate != value))
				{
					this.OnExpiryDateChanging(value);
					this.SendPropertyChanging();
					this._ExpiryDate = value;
					this.SendPropertyChanged("ExpiryDate");
					this.OnExpiryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsExpired", DbType="Bit")]
		public System.Nullable<bool> IsExpired
		{
			get
			{
				return this._IsExpired;
			}
			set
			{
				if ((this._IsExpired != value))
				{
					this.OnIsExpiredChanging(value);
					this.SendPropertyChanging();
					this._IsExpired = value;
					this.SendPropertyChanged("IsExpired");
					this.OnIsExpiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpgraded", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastUpgraded
		{
			get
			{
				return this._LastUpgraded;
			}
			set
			{
				if ((this._LastUpgraded != value))
				{
					this.OnLastUpgradedChanging(value);
					this.SendPropertyChanging();
					this._LastUpgraded = value;
					this.SendPropertyChanged("LastUpgraded");
					this.OnLastUpgradedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrasnsactionId", DbType="Int")]
		public System.Nullable<int> TrasnsactionId
		{
			get
			{
				return this._TrasnsactionId;
			}
			set
			{
				if ((this._TrasnsactionId != value))
				{
					if (this._UserTransaction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrasnsactionIdChanging(value);
					this.SendPropertyChanging();
					this._TrasnsactionId = value;
					this.SendPropertyChanged("TrasnsactionId");
					this.OnTrasnsactionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TokenPurchased", DbType="Int")]
		public System.Nullable<int> TokenPurchased
		{
			get
			{
				return this._TokenPurchased;
			}
			set
			{
				if ((this._TokenPurchased != value))
				{
					this.OnTokenPurchasedChanging(value);
					this.SendPropertyChanging();
					this._TokenPurchased = value;
					this.SendPropertyChanged("TokenPurchased");
					this.OnTokenPurchasedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserPackage_UserPackageToken", Storage="_UserPackageTokens", ThisKey="Id", OtherKey="UserPackageId")]
		public EntitySet<UserPackageToken> UserPackageTokens
		{
			get
			{
				return this._UserPackageTokens;
			}
			set
			{
				this._UserPackageTokens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Package_UserPackage", Storage="_Package", ThisKey="PackageId", OtherKey="Id", IsForeignKey=true)]
		public Package Package
		{
			get
			{
				return this._Package.Entity;
			}
			set
			{
				Package previousValue = this._Package.Entity;
				if (((previousValue != value) 
							|| (this._Package.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Package.Entity = null;
						previousValue.UserPackages.Remove(this);
					}
					this._Package.Entity = value;
					if ((value != null))
					{
						value.UserPackages.Add(this);
						this._PackageId = value.Id;
					}
					else
					{
						this._PackageId = default(int);
					}
					this.SendPropertyChanged("Package");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTransaction_UserPackage", Storage="_UserTransaction", ThisKey="TrasnsactionId", OtherKey="Id", IsForeignKey=true)]
		public UserTransaction UserTransaction
		{
			get
			{
				return this._UserTransaction.Entity;
			}
			set
			{
				UserTransaction previousValue = this._UserTransaction.Entity;
				if (((previousValue != value) 
							|| (this._UserTransaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserTransaction.Entity = null;
						previousValue.UserPackages.Remove(this);
					}
					this._UserTransaction.Entity = value;
					if ((value != null))
					{
						value.UserPackages.Add(this);
						this._TrasnsactionId = value.Id;
					}
					else
					{
						this._TrasnsactionId = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserTransaction");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserPackage", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserPackages.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserPackages.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserPackageTokens(UserPackageToken entity)
		{
			this.SendPropertyChanging();
			entity.UserPackage = this;
		}
		
		private void detach_UserPackageTokens(UserPackageToken entity)
		{
			this.SendPropertyChanging();
			entity.UserPackage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserPackageToken")]
	public partial class UserPackageToken : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private int _UserPackageId;
		
		private int _TotalNumberOfToken;
		
		private int _NumberOfTokenUsed;
		
		private int _RemainingNumberOfToken;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private System.DateTime _AddedOn;
		
		private EntityRef<UserPackage> _UserPackage;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserPackageIdChanging(int value);
    partial void OnUserPackageIdChanged();
    partial void OnTotalNumberOfTokenChanging(int value);
    partial void OnTotalNumberOfTokenChanged();
    partial void OnNumberOfTokenUsedChanging(int value);
    partial void OnNumberOfTokenUsedChanged();
    partial void OnRemainingNumberOfTokenChanging(int value);
    partial void OnRemainingNumberOfTokenChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnAddedOnChanging(System.DateTime value);
    partial void OnAddedOnChanged();
    #endregion
		
		public UserPackageToken()
		{
			this._UserPackage = default(EntityRef<UserPackage>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserPackageId", DbType="Int NOT NULL")]
		public int UserPackageId
		{
			get
			{
				return this._UserPackageId;
			}
			set
			{
				if ((this._UserPackageId != value))
				{
					if (this._UserPackage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserPackageIdChanging(value);
					this.SendPropertyChanging();
					this._UserPackageId = value;
					this.SendPropertyChanged("UserPackageId");
					this.OnUserPackageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalNumberOfToken", DbType="Int NOT NULL")]
		public int TotalNumberOfToken
		{
			get
			{
				return this._TotalNumberOfToken;
			}
			set
			{
				if ((this._TotalNumberOfToken != value))
				{
					this.OnTotalNumberOfTokenChanging(value);
					this.SendPropertyChanging();
					this._TotalNumberOfToken = value;
					this.SendPropertyChanged("TotalNumberOfToken");
					this.OnTotalNumberOfTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfTokenUsed", DbType="Int NOT NULL")]
		public int NumberOfTokenUsed
		{
			get
			{
				return this._NumberOfTokenUsed;
			}
			set
			{
				if ((this._NumberOfTokenUsed != value))
				{
					this.OnNumberOfTokenUsedChanging(value);
					this.SendPropertyChanging();
					this._NumberOfTokenUsed = value;
					this.SendPropertyChanged("NumberOfTokenUsed");
					this.OnNumberOfTokenUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RemainingNumberOfToken", DbType="Int NOT NULL")]
		public int RemainingNumberOfToken
		{
			get
			{
				return this._RemainingNumberOfToken;
			}
			set
			{
				if ((this._RemainingNumberOfToken != value))
				{
					this.OnRemainingNumberOfTokenChanging(value);
					this.SendPropertyChanging();
					this._RemainingNumberOfToken = value;
					this.SendPropertyChanged("RemainingNumberOfToken");
					this.OnRemainingNumberOfTokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddedOn", DbType="DateTime NOT NULL")]
		public System.DateTime AddedOn
		{
			get
			{
				return this._AddedOn;
			}
			set
			{
				if ((this._AddedOn != value))
				{
					this.OnAddedOnChanging(value);
					this.SendPropertyChanging();
					this._AddedOn = value;
					this.SendPropertyChanged("AddedOn");
					this.OnAddedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserPackage_UserPackageToken", Storage="_UserPackage", ThisKey="UserPackageId", OtherKey="Id", IsForeignKey=true)]
		public UserPackage UserPackage
		{
			get
			{
				return this._UserPackage.Entity;
			}
			set
			{
				UserPackage previousValue = this._UserPackage.Entity;
				if (((previousValue != value) 
							|| (this._UserPackage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserPackage.Entity = null;
						previousValue.UserPackageTokens.Remove(this);
					}
					this._UserPackage.Entity = value;
					if ((value != null))
					{
						value.UserPackageTokens.Add(this);
						this._UserPackageId = value.Id;
					}
					else
					{
						this._UserPackageId = default(int);
					}
					this.SendPropertyChanged("UserPackage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserPackageToken", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserPackageTokens.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserPackageTokens.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserPermissions")]
	public partial class UserPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserTypeId;
		
		private int _UserId;
		
		private int _PermissionId;
		
		private EntityRef<Permission> _Permission;
		
		private EntityRef<UserType> _UserType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserTypeIdChanging(int value);
    partial void OnUserTypeIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnPermissionIdChanging(int value);
    partial void OnPermissionIdChanged();
    #endregion
		
		public UserPermission()
		{
			this._Permission = default(EntityRef<Permission>);
			this._UserType = default(EntityRef<UserType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTypeId", DbType="Int NOT NULL")]
		public int UserTypeId
		{
			get
			{
				return this._UserTypeId;
			}
			set
			{
				if ((this._UserTypeId != value))
				{
					if (this._UserType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserTypeIdChanging(value);
					this.SendPropertyChanging();
					this._UserTypeId = value;
					this.SendPropertyChanged("UserTypeId");
					this.OnUserTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionId", DbType="Int NOT NULL")]
		public int PermissionId
		{
			get
			{
				return this._PermissionId;
			}
			set
			{
				if ((this._PermissionId != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionIdChanging(value);
					this.SendPropertyChanging();
					this._PermissionId = value;
					this.SendPropertyChanged("PermissionId");
					this.OnPermissionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_UserPermission", Storage="_Permission", ThisKey="PermissionId", OtherKey="Id", IsForeignKey=true)]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.UserPermissions.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.UserPermissions.Add(this);
						this._PermissionId = value.Id;
					}
					else
					{
						this._PermissionId = default(int);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_UserPermission", Storage="_UserType", ThisKey="UserTypeId", OtherKey="Id", IsForeignKey=true)]
		public UserType UserType
		{
			get
			{
				return this._UserType.Entity;
			}
			set
			{
				UserType previousValue = this._UserType.Entity;
				if (((previousValue != value) 
							|| (this._UserType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserType.Entity = null;
						previousValue.UserPermissions.Remove(this);
					}
					this._UserType.Entity = value;
					if ((value != null))
					{
						value.UserPermissions.Add(this);
						this._UserTypeId = value.Id;
					}
					else
					{
						this._UserTypeId = default(int);
					}
					this.SendPropertyChanged("UserType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserPersonals")]
	public partial class UserPersonal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private string _PersonalFileURL;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnPersonalFileURLChanging(string value);
    partial void OnPersonalFileURLChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public UserPersonal()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonalFileURL", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string PersonalFileURL
		{
			get
			{
				return this._PersonalFileURL;
			}
			set
			{
				if ((this._PersonalFileURL != value))
				{
					this.OnPersonalFileURLChanging(value);
					this.SendPropertyChanging();
					this._PersonalFileURL = value;
					this.SendPropertyChanged("PersonalFileURL");
					this.OnPersonalFileURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserPersonal", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserPersonals.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserPersonals.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserPortfolio")]
	public partial class UserPortfolio : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _Description;
		
		private System.Nullable<int> _FileTypeId;
		
		private string _FileURL;
		
		private int _UserId;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntityRef<FileType> _FileType;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnFileTypeIdChanging(System.Nullable<int> value);
    partial void OnFileTypeIdChanged();
    partial void OnFileURLChanging(string value);
    partial void OnFileURLChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public UserPortfolio()
		{
			this._FileType = default(EntityRef<FileType>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileTypeId", DbType="Int")]
		public System.Nullable<int> FileTypeId
		{
			get
			{
				return this._FileTypeId;
			}
			set
			{
				if ((this._FileTypeId != value))
				{
					if (this._FileType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileTypeIdChanging(value);
					this.SendPropertyChanging();
					this._FileTypeId = value;
					this.SendPropertyChanged("FileTypeId");
					this.OnFileTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileURL", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string FileURL
		{
			get
			{
				return this._FileURL;
			}
			set
			{
				if ((this._FileURL != value))
				{
					this.OnFileURLChanging(value);
					this.SendPropertyChanging();
					this._FileURL = value;
					this.SendPropertyChanged("FileURL");
					this.OnFileURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileType_UserPortfolio", Storage="_FileType", ThisKey="FileTypeId", OtherKey="Id", IsForeignKey=true)]
		public FileType FileType
		{
			get
			{
				return this._FileType.Entity;
			}
			set
			{
				FileType previousValue = this._FileType.Entity;
				if (((previousValue != value) 
							|| (this._FileType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FileType.Entity = null;
						previousValue.UserPortfolios.Remove(this);
					}
					this._FileType.Entity = value;
					if ((value != null))
					{
						value.UserPortfolios.Add(this);
						this._FileTypeId = value.Id;
					}
					else
					{
						this._FileTypeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("FileType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserPortfolio", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserPortfolios.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserPortfolios.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfileTracking")]
	public partial class UserProfileTracking : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _UserIdViewBy;
		
		private int _UserIdViewTo;
		
		private System.DateTime _DateViewOn;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdViewByChanging(System.Nullable<int> value);
    partial void OnUserIdViewByChanged();
    partial void OnUserIdViewToChanging(int value);
    partial void OnUserIdViewToChanged();
    partial void OnDateViewOnChanging(System.DateTime value);
    partial void OnDateViewOnChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public UserProfileTracking()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIdViewBy", DbType="Int")]
		public System.Nullable<int> UserIdViewBy
		{
			get
			{
				return this._UserIdViewBy;
			}
			set
			{
				if ((this._UserIdViewBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdViewByChanging(value);
					this.SendPropertyChanging();
					this._UserIdViewBy = value;
					this.SendPropertyChanged("UserIdViewBy");
					this.OnUserIdViewByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIdViewTo", DbType="Int NOT NULL")]
		public int UserIdViewTo
		{
			get
			{
				return this._UserIdViewTo;
			}
			set
			{
				if ((this._UserIdViewTo != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdViewToChanging(value);
					this.SendPropertyChanging();
					this._UserIdViewTo = value;
					this.SendPropertyChanged("UserIdViewTo");
					this.OnUserIdViewToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateViewOn", DbType="DateTime NOT NULL")]
		public System.DateTime DateViewOn
		{
			get
			{
				return this._DateViewOn;
			}
			set
			{
				if ((this._DateViewOn != value))
				{
					this.OnDateViewOnChanging(value);
					this.SendPropertyChanging();
					this._DateViewOn = value;
					this.SendPropertyChanged("DateViewOn");
					this.OnDateViewOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserProfileTracking", Storage="_User", ThisKey="UserIdViewBy", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserProfileTrackings.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserProfileTrackings.Add(this);
						this._UserIdViewBy = value.Id;
					}
					else
					{
						this._UserIdViewBy = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserProfileTracking1", Storage="_User1", ThisKey="UserIdViewTo", OtherKey="Id", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.UserProfileTrackings1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.UserProfileTrackings1.Add(this);
						this._UserIdViewTo = value.Id;
					}
					else
					{
						this._UserIdViewTo = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProposal")]
	public partial class UserProposal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserIdProposeBy;
		
		private int _UserIdProposeTo;
		
		private string _CustomText;
		
		private bool _IsActive;
		
		private System.DateTime _ProposedOnDate;
		
		private bool _IsDeleted;
		
		private int _ProposalStatusId;
		
		private EntityRef<UserProposalStatus> _UserProposalStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdProposeByChanging(int value);
    partial void OnUserIdProposeByChanged();
    partial void OnUserIdProposeToChanging(int value);
    partial void OnUserIdProposeToChanged();
    partial void OnCustomTextChanging(string value);
    partial void OnCustomTextChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnProposedOnDateChanging(System.DateTime value);
    partial void OnProposedOnDateChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnProposalStatusIdChanging(int value);
    partial void OnProposalStatusIdChanged();
    #endregion
		
		public UserProposal()
		{
			this._UserProposalStatus = default(EntityRef<UserProposalStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIdProposeBy", DbType="Int NOT NULL")]
		public int UserIdProposeBy
		{
			get
			{
				return this._UserIdProposeBy;
			}
			set
			{
				if ((this._UserIdProposeBy != value))
				{
					this.OnUserIdProposeByChanging(value);
					this.SendPropertyChanging();
					this._UserIdProposeBy = value;
					this.SendPropertyChanged("UserIdProposeBy");
					this.OnUserIdProposeByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIdProposeTo", DbType="Int NOT NULL")]
		public int UserIdProposeTo
		{
			get
			{
				return this._UserIdProposeTo;
			}
			set
			{
				if ((this._UserIdProposeTo != value))
				{
					this.OnUserIdProposeToChanging(value);
					this.SendPropertyChanging();
					this._UserIdProposeTo = value;
					this.SendPropertyChanged("UserIdProposeTo");
					this.OnUserIdProposeToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomText", DbType="NVarChar(MAX)")]
		public string CustomText
		{
			get
			{
				return this._CustomText;
			}
			set
			{
				if ((this._CustomText != value))
				{
					this.OnCustomTextChanging(value);
					this.SendPropertyChanging();
					this._CustomText = value;
					this.SendPropertyChanged("CustomText");
					this.OnCustomTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProposedOnDate", DbType="DateTime NOT NULL")]
		public System.DateTime ProposedOnDate
		{
			get
			{
				return this._ProposedOnDate;
			}
			set
			{
				if ((this._ProposedOnDate != value))
				{
					this.OnProposedOnDateChanging(value);
					this.SendPropertyChanging();
					this._ProposedOnDate = value;
					this.SendPropertyChanged("ProposedOnDate");
					this.OnProposedOnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProposalStatusId", DbType="Int NOT NULL")]
		public int ProposalStatusId
		{
			get
			{
				return this._ProposalStatusId;
			}
			set
			{
				if ((this._ProposalStatusId != value))
				{
					if (this._UserProposalStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProposalStatusIdChanging(value);
					this.SendPropertyChanging();
					this._ProposalStatusId = value;
					this.SendPropertyChanged("ProposalStatusId");
					this.OnProposalStatusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProposalStatus_UserProposal", Storage="_UserProposalStatus", ThisKey="ProposalStatusId", OtherKey="Id", IsForeignKey=true)]
		public UserProposalStatus UserProposalStatus
		{
			get
			{
				return this._UserProposalStatus.Entity;
			}
			set
			{
				UserProposalStatus previousValue = this._UserProposalStatus.Entity;
				if (((previousValue != value) 
							|| (this._UserProposalStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProposalStatus.Entity = null;
						previousValue.UserProposals.Remove(this);
					}
					this._UserProposalStatus.Entity = value;
					if ((value != null))
					{
						value.UserProposals.Add(this);
						this._ProposalStatusId = value.Id;
					}
					else
					{
						this._ProposalStatusId = default(int);
					}
					this.SendPropertyChanged("UserProposalStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProposalStatus")]
	public partial class UserProposalStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _StatusName;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<UserProposal> _UserProposals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStatusNameChanging(string value);
    partial void OnStatusNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public UserProposalStatus()
		{
			this._UserProposals = new EntitySet<UserProposal>(new Action<UserProposal>(this.attach_UserProposals), new Action<UserProposal>(this.detach_UserProposals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string StatusName
		{
			get
			{
				return this._StatusName;
			}
			set
			{
				if ((this._StatusName != value))
				{
					this.OnStatusNameChanging(value);
					this.SendPropertyChanging();
					this._StatusName = value;
					this.SendPropertyChanged("StatusName");
					this.OnStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProposalStatus_UserProposal", Storage="_UserProposals", ThisKey="Id", OtherKey="ProposalStatusId")]
		public EntitySet<UserProposal> UserProposals
		{
			get
			{
				return this._UserProposals;
			}
			set
			{
				this._UserProposals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserProposals(UserProposal entity)
		{
			this.SendPropertyChanging();
			entity.UserProposalStatus = this;
		}
		
		private void detach_UserProposals(UserProposal entity)
		{
			this.SendPropertyChanging();
			entity.UserProposalStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProposalTemplate")]
	public partial class UserProposalTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _TemplateName;
		
		private string _ProposalText;
		
		private System.DateTime _CreatedOn;
		
		private int _UserId;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<UserBid> _UserBids;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTemplateNameChanging(string value);
    partial void OnTemplateNameChanged();
    partial void OnProposalTextChanging(string value);
    partial void OnProposalTextChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public UserProposalTemplate()
		{
			this._UserBids = new EntitySet<UserBid>(new Action<UserBid>(this.attach_UserBids), new Action<UserBid>(this.detach_UserBids));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string TemplateName
		{
			get
			{
				return this._TemplateName;
			}
			set
			{
				if ((this._TemplateName != value))
				{
					this.OnTemplateNameChanging(value);
					this.SendPropertyChanging();
					this._TemplateName = value;
					this.SendPropertyChanged("TemplateName");
					this.OnTemplateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProposalText", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ProposalText
		{
			get
			{
				return this._ProposalText;
			}
			set
			{
				if ((this._ProposalText != value))
				{
					this.OnProposalTextChanging(value);
					this.SendPropertyChanging();
					this._ProposalText = value;
					this.SendPropertyChanged("ProposalText");
					this.OnProposalTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProposalTemplate_UserBid", Storage="_UserBids", ThisKey="Id", OtherKey="ProposalTemplateId")]
		public EntitySet<UserBid> UserBids
		{
			get
			{
				return this._UserBids;
			}
			set
			{
				this._UserBids.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserBids(UserBid entity)
		{
			this.SendPropertyChanging();
			entity.UserProposalTemplate = this;
		}
		
		private void detach_UserBids(UserBid entity)
		{
			this.SendPropertyChanging();
			entity.UserProposalTemplate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsersDefaultPermission")]
	public partial class UsersDefaultPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserTypeId;
		
		private int _PermisionId;
		
		private EntityRef<Permission> _Permission;
		
		private EntityRef<UserType> _UserType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserTypeIdChanging(int value);
    partial void OnUserTypeIdChanged();
    partial void OnPermisionIdChanging(int value);
    partial void OnPermisionIdChanged();
    #endregion
		
		public UsersDefaultPermission()
		{
			this._Permission = default(EntityRef<Permission>);
			this._UserType = default(EntityRef<UserType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTypeId", DbType="Int NOT NULL")]
		public int UserTypeId
		{
			get
			{
				return this._UserTypeId;
			}
			set
			{
				if ((this._UserTypeId != value))
				{
					if (this._UserType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserTypeIdChanging(value);
					this.SendPropertyChanging();
					this._UserTypeId = value;
					this.SendPropertyChanged("UserTypeId");
					this.OnUserTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermisionId", DbType="Int NOT NULL")]
		public int PermisionId
		{
			get
			{
				return this._PermisionId;
			}
			set
			{
				if ((this._PermisionId != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermisionIdChanging(value);
					this.SendPropertyChanging();
					this._PermisionId = value;
					this.SendPropertyChanged("PermisionId");
					this.OnPermisionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_UsersDefaultPermission", Storage="_Permission", ThisKey="PermisionId", OtherKey="Id", IsForeignKey=true)]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.UsersDefaultPermissions.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.UsersDefaultPermissions.Add(this);
						this._PermisionId = value.Id;
					}
					else
					{
						this._PermisionId = default(int);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_UsersDefaultPermission", Storage="_UserType", ThisKey="UserTypeId", OtherKey="Id", IsForeignKey=true)]
		public UserType UserType
		{
			get
			{
				return this._UserType.Entity;
			}
			set
			{
				UserType previousValue = this._UserType.Entity;
				if (((previousValue != value) 
							|| (this._UserType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserType.Entity = null;
						previousValue.UsersDefaultPermissions.Remove(this);
					}
					this._UserType.Entity = value;
					if ((value != null))
					{
						value.UsersDefaultPermissions.Add(this);
						this._UserTypeId = value.Id;
					}
					else
					{
						this._UserTypeId = default(int);
					}
					this.SendPropertyChanged("UserType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserSpeciality")]
	public partial class UserSpeciality : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private int _CategoryId;
		
		private int _SubCategoryId;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<SubCategory> _SubCategory;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnSubCategoryIdChanging(int value);
    partial void OnSubCategoryIdChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public UserSpeciality()
		{
			this._Category = default(EntityRef<Category>);
			this._SubCategory = default(EntityRef<SubCategory>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int NOT NULL")]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubCategoryId", DbType="Int NOT NULL")]
		public int SubCategoryId
		{
			get
			{
				return this._SubCategoryId;
			}
			set
			{
				if ((this._SubCategoryId != value))
				{
					if (this._SubCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._SubCategoryId = value;
					this.SendPropertyChanged("SubCategoryId");
					this.OnSubCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_UserSpeciality", Storage="_Category", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.UserSpecialities.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.UserSpecialities.Add(this);
						this._CategoryId = value.Id;
					}
					else
					{
						this._CategoryId = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubCategory_UserSpeciality", Storage="_SubCategory", ThisKey="SubCategoryId", OtherKey="Id", IsForeignKey=true)]
		public SubCategory SubCategory
		{
			get
			{
				return this._SubCategory.Entity;
			}
			set
			{
				SubCategory previousValue = this._SubCategory.Entity;
				if (((previousValue != value) 
							|| (this._SubCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubCategory.Entity = null;
						previousValue.UserSpecialities.Remove(this);
					}
					this._SubCategory.Entity = value;
					if ((value != null))
					{
						value.UserSpecialities.Add(this);
						this._SubCategoryId = value.Id;
					}
					else
					{
						this._SubCategoryId = default(int);
					}
					this.SendPropertyChanged("SubCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserSpeciality", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserSpecialities.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserSpecialities.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserSpokenLanguage")]
	public partial class UserSpokenLanguage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private System.Nullable<int> _LanguageId;
		
		private System.Nullable<int> _SpecialityLevelId;
		
		private string _CustomValue;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntityRef<SpecialityLevel> _SpecialityLevel;
		
		private EntityRef<SpokenLanguage> _SpokenLanguage;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnLanguageIdChanging(System.Nullable<int> value);
    partial void OnLanguageIdChanged();
    partial void OnSpecialityLevelIdChanging(System.Nullable<int> value);
    partial void OnSpecialityLevelIdChanged();
    partial void OnCustomValueChanging(string value);
    partial void OnCustomValueChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public UserSpokenLanguage()
		{
			this._SpecialityLevel = default(EntityRef<SpecialityLevel>);
			this._SpokenLanguage = default(EntityRef<SpokenLanguage>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LanguageId", DbType="Int")]
		public System.Nullable<int> LanguageId
		{
			get
			{
				return this._LanguageId;
			}
			set
			{
				if ((this._LanguageId != value))
				{
					if (this._SpokenLanguage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageIdChanging(value);
					this.SendPropertyChanging();
					this._LanguageId = value;
					this.SendPropertyChanged("LanguageId");
					this.OnLanguageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialityLevelId", DbType="Int")]
		public System.Nullable<int> SpecialityLevelId
		{
			get
			{
				return this._SpecialityLevelId;
			}
			set
			{
				if ((this._SpecialityLevelId != value))
				{
					if (this._SpecialityLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecialityLevelIdChanging(value);
					this.SendPropertyChanging();
					this._SpecialityLevelId = value;
					this.SendPropertyChanged("SpecialityLevelId");
					this.OnSpecialityLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomValue", DbType="NVarChar(1600)")]
		public string CustomValue
		{
			get
			{
				return this._CustomValue;
			}
			set
			{
				if ((this._CustomValue != value))
				{
					this.OnCustomValueChanging(value);
					this.SendPropertyChanging();
					this._CustomValue = value;
					this.SendPropertyChanged("CustomValue");
					this.OnCustomValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SpecialityLevel_UserSpokenLanguage", Storage="_SpecialityLevel", ThisKey="SpecialityLevelId", OtherKey="Id", IsForeignKey=true)]
		public SpecialityLevel SpecialityLevel
		{
			get
			{
				return this._SpecialityLevel.Entity;
			}
			set
			{
				SpecialityLevel previousValue = this._SpecialityLevel.Entity;
				if (((previousValue != value) 
							|| (this._SpecialityLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SpecialityLevel.Entity = null;
						previousValue.UserSpokenLanguages.Remove(this);
					}
					this._SpecialityLevel.Entity = value;
					if ((value != null))
					{
						value.UserSpokenLanguages.Add(this);
						this._SpecialityLevelId = value.Id;
					}
					else
					{
						this._SpecialityLevelId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SpecialityLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SpokenLanguage_UserSpokenLanguage", Storage="_SpokenLanguage", ThisKey="LanguageId", OtherKey="Id", IsForeignKey=true)]
		public SpokenLanguage SpokenLanguage
		{
			get
			{
				return this._SpokenLanguage.Entity;
			}
			set
			{
				SpokenLanguage previousValue = this._SpokenLanguage.Entity;
				if (((previousValue != value) 
							|| (this._SpokenLanguage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SpokenLanguage.Entity = null;
						previousValue.UserSpokenLanguages.Remove(this);
					}
					this._SpokenLanguage.Entity = value;
					if ((value != null))
					{
						value.UserSpokenLanguages.Add(this);
						this._LanguageId = value.Id;
					}
					else
					{
						this._LanguageId = default(Nullable<int>);
					}
					this.SendPropertyChanged("SpokenLanguage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserSpokenLanguage", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserSpokenLanguages.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserSpokenLanguages.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserTokenUsage")]
	public partial class UserTokenUsage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private int _TokenUsed;
		
		private System.DateTime _DateUsed;
		
		private System.Nullable<int> _UsedOnBidId;
		
		private System.Nullable<int> _TransactionType;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntityRef<UserBid> _UserBid;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnTokenUsedChanging(int value);
    partial void OnTokenUsedChanged();
    partial void OnDateUsedChanging(System.DateTime value);
    partial void OnDateUsedChanged();
    partial void OnUsedOnBidIdChanging(System.Nullable<int> value);
    partial void OnUsedOnBidIdChanged();
    partial void OnTransactionTypeChanging(System.Nullable<int> value);
    partial void OnTransactionTypeChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public UserTokenUsage()
		{
			this._UserBid = default(EntityRef<UserBid>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TokenUsed", DbType="Int NOT NULL")]
		public int TokenUsed
		{
			get
			{
				return this._TokenUsed;
			}
			set
			{
				if ((this._TokenUsed != value))
				{
					this.OnTokenUsedChanging(value);
					this.SendPropertyChanging();
					this._TokenUsed = value;
					this.SendPropertyChanged("TokenUsed");
					this.OnTokenUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateUsed", DbType="DateTime NOT NULL")]
		public System.DateTime DateUsed
		{
			get
			{
				return this._DateUsed;
			}
			set
			{
				if ((this._DateUsed != value))
				{
					this.OnDateUsedChanging(value);
					this.SendPropertyChanging();
					this._DateUsed = value;
					this.SendPropertyChanged("DateUsed");
					this.OnDateUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsedOnBidId", DbType="Int")]
		public System.Nullable<int> UsedOnBidId
		{
			get
			{
				return this._UsedOnBidId;
			}
			set
			{
				if ((this._UsedOnBidId != value))
				{
					if (this._UserBid.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsedOnBidIdChanging(value);
					this.SendPropertyChanging();
					this._UsedOnBidId = value;
					this.SendPropertyChanged("UsedOnBidId");
					this.OnUsedOnBidIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionType", DbType="Int")]
		public System.Nullable<int> TransactionType
		{
			get
			{
				return this._TransactionType;
			}
			set
			{
				if ((this._TransactionType != value))
				{
					this.OnTransactionTypeChanging(value);
					this.SendPropertyChanging();
					this._TransactionType = value;
					this.SendPropertyChanged("TransactionType");
					this.OnTransactionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserBid_UserTokenUsage", Storage="_UserBid", ThisKey="UsedOnBidId", OtherKey="Id", IsForeignKey=true)]
		public UserBid UserBid
		{
			get
			{
				return this._UserBid.Entity;
			}
			set
			{
				UserBid previousValue = this._UserBid.Entity;
				if (((previousValue != value) 
							|| (this._UserBid.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserBid.Entity = null;
						previousValue.UserTokenUsages.Remove(this);
					}
					this._UserBid.Entity = value;
					if ((value != null))
					{
						value.UserTokenUsages.Add(this);
						this._UsedOnBidId = value.Id;
					}
					else
					{
						this._UsedOnBidId = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserBid");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserTokenUsage", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserTokenUsages.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserTokenUsages.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserTransaction")]
	public partial class UserTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private int _BankCardId;
		
		private System.DateTime _PaidOn;
		
		private double _AmountPaid;
		
		private int _TransactionStatus;
		
		private System.Nullable<int> _PackageId;
		
		private int _TransactionTypeId;
		
		private string _JSONIn;
		
		private string _JSONOut;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<UserPackage> _UserPackages;
		
		private EntityRef<Package> _Package;
		
		private EntityRef<TransactionType> _TransactionType;
		
		private EntityRef<UserBankCard> _UserBankCard;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnBankCardIdChanging(int value);
    partial void OnBankCardIdChanged();
    partial void OnPaidOnChanging(System.DateTime value);
    partial void OnPaidOnChanged();
    partial void OnAmountPaidChanging(double value);
    partial void OnAmountPaidChanged();
    partial void OnTransactionStatusChanging(int value);
    partial void OnTransactionStatusChanged();
    partial void OnPackageIdChanging(System.Nullable<int> value);
    partial void OnPackageIdChanged();
    partial void OnTransactionTypeIdChanging(int value);
    partial void OnTransactionTypeIdChanged();
    partial void OnJSONInChanging(string value);
    partial void OnJSONInChanged();
    partial void OnJSONOutChanging(string value);
    partial void OnJSONOutChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public UserTransaction()
		{
			this._UserPackages = new EntitySet<UserPackage>(new Action<UserPackage>(this.attach_UserPackages), new Action<UserPackage>(this.detach_UserPackages));
			this._Package = default(EntityRef<Package>);
			this._TransactionType = default(EntityRef<TransactionType>);
			this._UserBankCard = default(EntityRef<UserBankCard>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankCardId", DbType="Int NOT NULL")]
		public int BankCardId
		{
			get
			{
				return this._BankCardId;
			}
			set
			{
				if ((this._BankCardId != value))
				{
					if (this._UserBankCard.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBankCardIdChanging(value);
					this.SendPropertyChanging();
					this._BankCardId = value;
					this.SendPropertyChanged("BankCardId");
					this.OnBankCardIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaidOn", DbType="DateTime NOT NULL")]
		public System.DateTime PaidOn
		{
			get
			{
				return this._PaidOn;
			}
			set
			{
				if ((this._PaidOn != value))
				{
					this.OnPaidOnChanging(value);
					this.SendPropertyChanging();
					this._PaidOn = value;
					this.SendPropertyChanged("PaidOn");
					this.OnPaidOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountPaid", DbType="Float NOT NULL")]
		public double AmountPaid
		{
			get
			{
				return this._AmountPaid;
			}
			set
			{
				if ((this._AmountPaid != value))
				{
					this.OnAmountPaidChanging(value);
					this.SendPropertyChanging();
					this._AmountPaid = value;
					this.SendPropertyChanged("AmountPaid");
					this.OnAmountPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionStatus", DbType="Int NOT NULL")]
		public int TransactionStatus
		{
			get
			{
				return this._TransactionStatus;
			}
			set
			{
				if ((this._TransactionStatus != value))
				{
					this.OnTransactionStatusChanging(value);
					this.SendPropertyChanging();
					this._TransactionStatus = value;
					this.SendPropertyChanged("TransactionStatus");
					this.OnTransactionStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageId", DbType="Int")]
		public System.Nullable<int> PackageId
		{
			get
			{
				return this._PackageId;
			}
			set
			{
				if ((this._PackageId != value))
				{
					if (this._Package.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageIdChanging(value);
					this.SendPropertyChanging();
					this._PackageId = value;
					this.SendPropertyChanged("PackageId");
					this.OnPackageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionTypeId", DbType="Int NOT NULL")]
		public int TransactionTypeId
		{
			get
			{
				return this._TransactionTypeId;
			}
			set
			{
				if ((this._TransactionTypeId != value))
				{
					if (this._TransactionType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransactionTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TransactionTypeId = value;
					this.SendPropertyChanged("TransactionTypeId");
					this.OnTransactionTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JSONIn", DbType="NVarChar(MAX)")]
		public string JSONIn
		{
			get
			{
				return this._JSONIn;
			}
			set
			{
				if ((this._JSONIn != value))
				{
					this.OnJSONInChanging(value);
					this.SendPropertyChanging();
					this._JSONIn = value;
					this.SendPropertyChanged("JSONIn");
					this.OnJSONInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JSONOut", DbType="NVarChar(MAX)")]
		public string JSONOut
		{
			get
			{
				return this._JSONOut;
			}
			set
			{
				if ((this._JSONOut != value))
				{
					this.OnJSONOutChanging(value);
					this.SendPropertyChanging();
					this._JSONOut = value;
					this.SendPropertyChanged("JSONOut");
					this.OnJSONOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTransaction_UserPackage", Storage="_UserPackages", ThisKey="Id", OtherKey="TrasnsactionId")]
		public EntitySet<UserPackage> UserPackages
		{
			get
			{
				return this._UserPackages;
			}
			set
			{
				this._UserPackages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Package_UserTransaction", Storage="_Package", ThisKey="PackageId", OtherKey="Id", IsForeignKey=true)]
		public Package Package
		{
			get
			{
				return this._Package.Entity;
			}
			set
			{
				Package previousValue = this._Package.Entity;
				if (((previousValue != value) 
							|| (this._Package.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Package.Entity = null;
						previousValue.UserTransactions.Remove(this);
					}
					this._Package.Entity = value;
					if ((value != null))
					{
						value.UserTransactions.Add(this);
						this._PackageId = value.Id;
					}
					else
					{
						this._PackageId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Package");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TransactionType_UserTransaction", Storage="_TransactionType", ThisKey="TransactionTypeId", OtherKey="Id", IsForeignKey=true)]
		public TransactionType TransactionType
		{
			get
			{
				return this._TransactionType.Entity;
			}
			set
			{
				TransactionType previousValue = this._TransactionType.Entity;
				if (((previousValue != value) 
							|| (this._TransactionType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransactionType.Entity = null;
						previousValue.UserTransactions.Remove(this);
					}
					this._TransactionType.Entity = value;
					if ((value != null))
					{
						value.UserTransactions.Add(this);
						this._TransactionTypeId = value.Id;
					}
					else
					{
						this._TransactionTypeId = default(int);
					}
					this.SendPropertyChanged("TransactionType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserBankCard_UserTransaction", Storage="_UserBankCard", ThisKey="BankCardId", OtherKey="Id", IsForeignKey=true)]
		public UserBankCard UserBankCard
		{
			get
			{
				return this._UserBankCard.Entity;
			}
			set
			{
				UserBankCard previousValue = this._UserBankCard.Entity;
				if (((previousValue != value) 
							|| (this._UserBankCard.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserBankCard.Entity = null;
						previousValue.UserTransactions.Remove(this);
					}
					this._UserBankCard.Entity = value;
					if ((value != null))
					{
						value.UserTransactions.Add(this);
						this._BankCardId = value.Id;
					}
					else
					{
						this._BankCardId = default(int);
					}
					this.SendPropertyChanged("UserBankCard");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserTransaction", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserTransactions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserTransactions.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserPackages(UserPackage entity)
		{
			this.SendPropertyChanging();
			entity.UserTransaction = this;
		}
		
		private void detach_UserPackages(UserPackage entity)
		{
			this.SendPropertyChanging();
			entity.UserTransaction = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserType")]
	public partial class UserType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserTypeName;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntitySet<Notification> _Notifications;
		
		private EntitySet<UserPermission> _UserPermissions;
		
		private EntitySet<UsersDefaultPermission> _UsersDefaultPermissions;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserTypeNameChanging(string value);
    partial void OnUserTypeNameChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public UserType()
		{
			this._Notifications = new EntitySet<Notification>(new Action<Notification>(this.attach_Notifications), new Action<Notification>(this.detach_Notifications));
			this._UserPermissions = new EntitySet<UserPermission>(new Action<UserPermission>(this.attach_UserPermissions), new Action<UserPermission>(this.detach_UserPermissions));
			this._UsersDefaultPermissions = new EntitySet<UsersDefaultPermission>(new Action<UsersDefaultPermission>(this.attach_UsersDefaultPermissions), new Action<UsersDefaultPermission>(this.detach_UsersDefaultPermissions));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTypeName", DbType="NVarChar(60) NOT NULL", CanBeNull=false)]
		public string UserTypeName
		{
			get
			{
				return this._UserTypeName;
			}
			set
			{
				if ((this._UserTypeName != value))
				{
					this.OnUserTypeNameChanging(value);
					this.SendPropertyChanging();
					this._UserTypeName = value;
					this.SendPropertyChanged("UserTypeName");
					this.OnUserTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_Notification", Storage="_Notifications", ThisKey="Id", OtherKey="UserTypeId")]
		public EntitySet<Notification> Notifications
		{
			get
			{
				return this._Notifications;
			}
			set
			{
				this._Notifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_UserPermission", Storage="_UserPermissions", ThisKey="Id", OtherKey="UserTypeId")]
		public EntitySet<UserPermission> UserPermissions
		{
			get
			{
				return this._UserPermissions;
			}
			set
			{
				this._UserPermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_UsersDefaultPermission", Storage="_UsersDefaultPermissions", ThisKey="Id", OtherKey="UserTypeId")]
		public EntitySet<UsersDefaultPermission> UsersDefaultPermissions
		{
			get
			{
				return this._UsersDefaultPermissions;
			}
			set
			{
				this._UsersDefaultPermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_User", Storage="_Users", ThisKey="Id", OtherKey="UserTypeId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.UserType = this;
		}
		
		private void detach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.UserType = null;
		}
		
		private void attach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.UserType = this;
		}
		
		private void detach_UserPermissions(UserPermission entity)
		{
			this.SendPropertyChanging();
			entity.UserType = null;
		}
		
		private void attach_UsersDefaultPermissions(UsersDefaultPermission entity)
		{
			this.SendPropertyChanging();
			entity.UserType = this;
		}
		
		private void detach_UsersDefaultPermissions(UsersDefaultPermission entity)
		{
			this.SendPropertyChanging();
			entity.UserType = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserType = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HangFire.AggregatedCounter")]
	public partial class AggregatedCounter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Key;
		
		private long _Value;
		
		private System.Nullable<System.DateTime> _ExpireAt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnValueChanging(long value);
    partial void OnValueChanged();
    partial void OnExpireAtChanging(System.Nullable<System.DateTime> value);
    partial void OnExpireAtChanged();
    #endregion
		
		public AggregatedCounter()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="BigInt NOT NULL")]
		public long Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpireAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpireAt
		{
			get
			{
				return this._ExpireAt;
			}
			set
			{
				if ((this._ExpireAt != value))
				{
					this.OnExpireAtChanging(value);
					this.SendPropertyChanging();
					this._ExpireAt = value;
					this.SendPropertyChanged("ExpireAt");
					this.OnExpireAtChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HangFire.Counter")]
	public partial class Counter
	{
		
		private string _Key;
		
		private int _Value;
		
		private System.Nullable<System.DateTime> _ExpireAt;
		
		public Counter()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this._Key = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Int NOT NULL")]
		public int Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpireAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpireAt
		{
			get
			{
				return this._ExpireAt;
			}
			set
			{
				if ((this._ExpireAt != value))
				{
					this._ExpireAt = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HangFire.Hash")]
	public partial class Hash : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Key;
		
		private string _Field;
		
		private string _Value;
		
		private System.Nullable<System.DateTime> _ExpireAt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnFieldChanging(string value);
    partial void OnFieldChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnExpireAtChanging(System.Nullable<System.DateTime> value);
    partial void OnExpireAtChanged();
    #endregion
		
		public Hash()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Field", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Field
		{
			get
			{
				return this._Field;
			}
			set
			{
				if ((this._Field != value))
				{
					this.OnFieldChanging(value);
					this.SendPropertyChanging();
					this._Field = value;
					this.SendPropertyChanged("Field");
					this.OnFieldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpireAt", DbType="DateTime2")]
		public System.Nullable<System.DateTime> ExpireAt
		{
			get
			{
				return this._ExpireAt;
			}
			set
			{
				if ((this._ExpireAt != value))
				{
					this.OnExpireAtChanging(value);
					this.SendPropertyChanging();
					this._ExpireAt = value;
					this.SendPropertyChanged("ExpireAt");
					this.OnExpireAtChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HangFire.Job")]
	public partial class Job1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<long> _StateId;
		
		private string _StateName;
		
		private string _InvocationData;
		
		private string _Arguments;
		
		private System.DateTime _CreatedAt;
		
		private System.Nullable<System.DateTime> _ExpireAt;
		
		private EntitySet<State> _States;
		
		private EntitySet<JobParameter> _JobParameters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnStateIdChanging(System.Nullable<long> value);
    partial void OnStateIdChanged();
    partial void OnStateNameChanging(string value);
    partial void OnStateNameChanged();
    partial void OnInvocationDataChanging(string value);
    partial void OnInvocationDataChanged();
    partial void OnArgumentsChanging(string value);
    partial void OnArgumentsChanged();
    partial void OnCreatedAtChanging(System.DateTime value);
    partial void OnCreatedAtChanged();
    partial void OnExpireAtChanging(System.Nullable<System.DateTime> value);
    partial void OnExpireAtChanged();
    #endregion
		
		public Job1()
		{
			this._States = new EntitySet<State>(new Action<State>(this.attach_States), new Action<State>(this.detach_States));
			this._JobParameters = new EntitySet<JobParameter>(new Action<JobParameter>(this.attach_JobParameters), new Action<JobParameter>(this.detach_JobParameters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", DbType="BigInt")]
		public System.Nullable<long> StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateName", DbType="NVarChar(20)")]
		public string StateName
		{
			get
			{
				return this._StateName;
			}
			set
			{
				if ((this._StateName != value))
				{
					this.OnStateNameChanging(value);
					this.SendPropertyChanging();
					this._StateName = value;
					this.SendPropertyChanged("StateName");
					this.OnStateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvocationData", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string InvocationData
		{
			get
			{
				return this._InvocationData;
			}
			set
			{
				if ((this._InvocationData != value))
				{
					this.OnInvocationDataChanging(value);
					this.SendPropertyChanging();
					this._InvocationData = value;
					this.SendPropertyChanged("InvocationData");
					this.OnInvocationDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Arguments", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Arguments
		{
			get
			{
				return this._Arguments;
			}
			set
			{
				if ((this._Arguments != value))
				{
					this.OnArgumentsChanging(value);
					this.SendPropertyChanging();
					this._Arguments = value;
					this.SendPropertyChanged("Arguments");
					this.OnArgumentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedAt", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpireAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpireAt
		{
			get
			{
				return this._ExpireAt;
			}
			set
			{
				if ((this._ExpireAt != value))
				{
					this.OnExpireAtChanging(value);
					this.SendPropertyChanging();
					this._ExpireAt = value;
					this.SendPropertyChanged("ExpireAt");
					this.OnExpireAtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job1_State", Storage="_States", ThisKey="Id", OtherKey="JobId")]
		public EntitySet<State> States
		{
			get
			{
				return this._States;
			}
			set
			{
				this._States.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job1_JobParameter", Storage="_JobParameters", ThisKey="Id", OtherKey="JobId")]
		public EntitySet<JobParameter> JobParameters
		{
			get
			{
				return this._JobParameters;
			}
			set
			{
				this._JobParameters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_States(State entity)
		{
			this.SendPropertyChanging();
			entity.Job1 = this;
		}
		
		private void detach_States(State entity)
		{
			this.SendPropertyChanging();
			entity.Job1 = null;
		}
		
		private void attach_JobParameters(JobParameter entity)
		{
			this.SendPropertyChanging();
			entity.Job1 = this;
		}
		
		private void detach_JobParameters(JobParameter entity)
		{
			this.SendPropertyChanging();
			entity.Job1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HangFire.JobParameter")]
	public partial class JobParameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _JobId;
		
		private string _Name;
		
		private string _Value;
		
		private EntityRef<Job1> _Job1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnJobIdChanging(long value);
    partial void OnJobIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public JobParameter()
		{
			this._Job1 = default(EntityRef<Job1>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					if (this._Job1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(40) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job1_JobParameter", Storage="_Job1", ThisKey="JobId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Job1 Job1
		{
			get
			{
				return this._Job1.Entity;
			}
			set
			{
				Job1 previousValue = this._Job1.Entity;
				if (((previousValue != value) 
							|| (this._Job1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job1.Entity = null;
						previousValue.JobParameters.Remove(this);
					}
					this._Job1.Entity = value;
					if ((value != null))
					{
						value.JobParameters.Add(this);
						this._JobId = value.Id;
					}
					else
					{
						this._JobId = default(long);
					}
					this.SendPropertyChanged("Job1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HangFire.JobQueue")]
	public partial class JobQueue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _JobId;
		
		private string _Queue;
		
		private System.Nullable<System.DateTime> _FetchedAt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnJobIdChanging(long value);
    partial void OnJobIdChanged();
    partial void OnQueueChanging(string value);
    partial void OnQueueChanged();
    partial void OnFetchedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnFetchedAtChanged();
    #endregion
		
		public JobQueue()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobId", DbType="BigInt NOT NULL")]
		public long JobId
		{
			get
			{
				return this._JobId;
			}
			set
			{
				if ((this._JobId != value))
				{
					this.OnJobIdChanging(value);
					this.SendPropertyChanging();
					this._JobId = value;
					this.SendPropertyChanged("JobId");
					this.OnJobIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Queue", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Queue
		{
			get
			{
				return this._Queue;
			}
			set
			{
				if ((this._Queue != value))
				{
					this.OnQueueChanging(value);
					this.SendPropertyChanging();
					this._Queue = value;
					this.SendPropertyChanged("Queue");
					this.OnQueueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FetchedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> FetchedAt
		{
			get
			{
				return this._FetchedAt;
			}
			set
			{
				if ((this._FetchedAt != value))
				{
					this.OnFetchedAtChanging(value);
					this.SendPropertyChanging();
					this._FetchedAt = value;
					this.SendPropertyChanged("FetchedAt");
					this.OnFetchedAtChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HangFire.List")]
	public partial class List : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Key;
		
		private string _Value;
		
		private System.Nullable<System.DateTime> _ExpireAt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnExpireAtChanging(System.Nullable<System.DateTime> value);
    partial void OnExpireAtChanged();
    #endregion
		
		public List()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpireAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpireAt
		{
			get
			{
				return this._ExpireAt;
			}
			set
			{
				if ((this._ExpireAt != value))
				{
					this.OnExpireAtChanging(value);
					this.SendPropertyChanging();
					this._ExpireAt = value;
					this.SendPropertyChanged("ExpireAt");
					this.OnExpireAtChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HangFire.[Schema]")]
	public partial class Schema : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Version;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    #endregion
		
		public Schema()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HangFire.Server")]
	public partial class Server : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Data;
		
		private System.DateTime _LastHeartbeat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    partial void OnLastHeartbeatChanging(System.DateTime value);
    partial void OnLastHeartbeatChanged();
    #endregion
		
		public Server()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(200) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="NVarChar(MAX)")]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastHeartbeat", DbType="DateTime NOT NULL")]
		public System.DateTime LastHeartbeat
		{
			get
			{
				return this._LastHeartbeat;
			}
			set
			{
				if ((this._LastHeartbeat != value))
				{
					this.OnLastHeartbeatChanging(value);
					this.SendPropertyChanging();
					this._LastHeartbeat = value;
					this.SendPropertyChanged("LastHeartbeat");
					this.OnLastHeartbeatChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="HangFire.[Set]")]
	public partial class Set : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Key;
		
		private double _Score;
		
		private string _Value;
		
		private System.Nullable<System.DateTime> _ExpireAt;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnScoreChanging(double value);
    partial void OnScoreChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnExpireAtChanging(System.Nullable<System.DateTime> value);
    partial void OnExpireAtChanged();
    #endregion
		
		public Set()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Float NOT NULL")]
		public double Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(256) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpireAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpireAt
		{
			get
			{
				return this._ExpireAt;
			}
			set
			{
				if ((this._ExpireAt != value))
				{
					this.OnExpireAtChanging(value);
					this.SendPropertyChanging();
					this._ExpireAt = value;
					this.SendPropertyChanged("ExpireAt");
					this.OnExpireAtChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PestControlPriceList")]
	public partial class PestControlPriceList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private string _PropertyType;
		
		private decimal _Appartment;
		
		private decimal _Villa;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnPropertyTypeChanging(string value);
    partial void OnPropertyTypeChanged();
    partial void OnAppartmentChanging(decimal value);
    partial void OnAppartmentChanged();
    partial void OnVillaChanging(decimal value);
    partial void OnVillaChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public PestControlPriceList()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyType", DbType="VarChar(60) NOT NULL", CanBeNull=false)]
		public string PropertyType
		{
			get
			{
				return this._PropertyType;
			}
			set
			{
				if ((this._PropertyType != value))
				{
					this.OnPropertyTypeChanging(value);
					this.SendPropertyChanging();
					this._PropertyType = value;
					this.SendPropertyChanged("PropertyType");
					this.OnPropertyTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appartment", DbType="Decimal(18,0) NOT NULL")]
		public decimal Appartment
		{
			get
			{
				return this._Appartment;
			}
			set
			{
				if ((this._Appartment != value))
				{
					this.OnAppartmentChanging(value);
					this.SendPropertyChanging();
					this._Appartment = value;
					this.SendPropertyChanged("Appartment");
					this.OnAppartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Villa", DbType="Decimal(18,0) NOT NULL")]
		public decimal Villa
		{
			get
			{
				return this._Villa;
			}
			set
			{
				if ((this._Villa != value))
				{
					this.OnVillaChanging(value);
					this.SendPropertyChanging();
					this._Villa = value;
					this.SendPropertyChanged("Villa");
					this.OnVillaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PestControlPriceList", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PestControlPriceLists.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PestControlPriceLists.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserTypeId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _CompanyName;
		
		private string _HeadLine;
		
		private string _About;
		
		private string _Country;
		
		private string _City;
		
		private string _AreaLandMark;
		
		private string _Email;
		
		private string _PhoneNumber;
		
		private string _OfficeNumber;
		
		private string _Nationality;
		
		private string _ProfileImageURL;
		
		private System.DateTime _RegisteredOn;
		
		private System.DateTime _LastUpdated;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private bool _IsVerified;
		
		private System.Nullable<double> _AverageRating;
		
		private string _Password;
		
		private string _ExternalId;
		
		private string _SignedInBy;
		
		private System.Nullable<System.DateTime> _LastSignOn;
		
		private bool _IsEmailVarified;
		
		private string _LicenceType;
		
		private string _LicenceNumber;
		
		private string _WebsiteURL;
		
		private string _LicencePhotoCopyURL;
		
		private System.Nullable<int> _CityId;
		
		private System.Nullable<int> _CountryId;
		
		private string _Tags;
		
		private string _MapCordinates;
		
		private string _Address2;
		
		private System.Nullable<int> _ProfilePercent;
		
		private string _Address1;
		
		private EntitySet<AgentExpressService> _AgentExpressServices;
		
		private EntitySet<Category> _Categories;
		
		private EntitySet<Chat> _Chats;
		
		private EntitySet<Chat> _Chats1;
		
		private EntitySet<ChatRoom> _ChatRooms;
		
		private EntitySet<ChatRoom> _ChatRooms1;
		
		private EntitySet<EmailConfiguration> _EmailConfigurations;
		
		private EntitySet<EmailConfiguration> _EmailConfigurations1;
		
		private EntitySet<ExpressJobBid> _ExpressJobBids;
		
		private EntitySet<ExpressJob> _ExpressJobs;
		
		private EntitySet<JobAttachment> _JobAttachments;
		
		private EntitySet<JobDetail> _JobDetails;
		
		private EntitySet<Job> _Jobs;
		
		private EntitySet<Notification> _Notifications;
		
		private EntitySet<Package> _Packages;
		
		private EntitySet<Question> _Questions;
		
		private EntitySet<QuestionReply> _QuestionReplies;
		
		private EntitySet<RejectedAgreement> _RejectedAgreements;
		
		private EntitySet<ReviewAndRating> _ReviewAndRatings;
		
		private EntitySet<ReviewAndRating> _ReviewAndRatings1;
		
		private EntitySet<UserBankCard> _UserBankCards;
		
		private EntitySet<UserBid> _UserBids;
		
		private EntitySet<UserCertificate> _UserCertificates;
		
		private EntitySet<UserEducation> _UserEducations;
		
		private EntitySet<UserEmailConfiguration> _UserEmailConfigurations;
		
		private EntitySet<UserEmployement> _UserEmployements;
		
		private EntitySet<UserJobAgreement> _UserJobAgreements;
		
		private EntitySet<UserJobAgreement> _UserJobAgreements1;
		
		private EntitySet<UserJobRejection> _UserJobRejections;
		
		private EntitySet<UserJobRejection> _UserJobRejections1;
		
		private EntitySet<UserPackage> _UserPackages;
		
		private EntitySet<UserPackageToken> _UserPackageTokens;
		
		private EntitySet<UserPersonal> _UserPersonals;
		
		private EntitySet<UserPortfolio> _UserPortfolios;
		
		private EntitySet<UserProfileTracking> _UserProfileTrackings;
		
		private EntitySet<UserProfileTracking> _UserProfileTrackings1;
		
		private EntitySet<UserSpeciality> _UserSpecialities;
		
		private EntitySet<UserSpokenLanguage> _UserSpokenLanguages;
		
		private EntitySet<UserTokenUsage> _UserTokenUsages;
		
		private EntitySet<UserTransaction> _UserTransactions;
		
		private EntitySet<PestControlPriceList> _PestControlPriceLists;
		
		private EntitySet<LaundryPriceList> _LaundryPriceLists;
		
		private EntityRef<UserType> _UserType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserTypeIdChanging(int value);
    partial void OnUserTypeIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnCompanyNameChanging(string value);
    partial void OnCompanyNameChanged();
    partial void OnHeadLineChanging(string value);
    partial void OnHeadLineChanged();
    partial void OnAboutChanging(string value);
    partial void OnAboutChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnAreaLandMarkChanging(string value);
    partial void OnAreaLandMarkChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnOfficeNumberChanging(string value);
    partial void OnOfficeNumberChanged();
    partial void OnNationalityChanging(string value);
    partial void OnNationalityChanged();
    partial void OnProfileImageURLChanging(string value);
    partial void OnProfileImageURLChanged();
    partial void OnRegisteredOnChanging(System.DateTime value);
    partial void OnRegisteredOnChanged();
    partial void OnLastUpdatedChanging(System.DateTime value);
    partial void OnLastUpdatedChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnIsVerifiedChanging(bool value);
    partial void OnIsVerifiedChanged();
    partial void OnAverageRatingChanging(System.Nullable<double> value);
    partial void OnAverageRatingChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnExternalIdChanging(string value);
    partial void OnExternalIdChanged();
    partial void OnSignedInByChanging(string value);
    partial void OnSignedInByChanged();
    partial void OnLastSignOnChanging(System.Nullable<System.DateTime> value);
    partial void OnLastSignOnChanged();
    partial void OnIsEmailVarifiedChanging(bool value);
    partial void OnIsEmailVarifiedChanged();
    partial void OnLicenceTypeChanging(string value);
    partial void OnLicenceTypeChanged();
    partial void OnLicenceNumberChanging(string value);
    partial void OnLicenceNumberChanged();
    partial void OnWebsiteURLChanging(string value);
    partial void OnWebsiteURLChanged();
    partial void OnLicencePhotoCopyURLChanging(string value);
    partial void OnLicencePhotoCopyURLChanged();
    partial void OnCityIdChanging(System.Nullable<int> value);
    partial void OnCityIdChanged();
    partial void OnCountryIdChanging(System.Nullable<int> value);
    partial void OnCountryIdChanged();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    partial void OnMapCordinatesChanging(string value);
    partial void OnMapCordinatesChanged();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnProfilePercentChanging(System.Nullable<int> value);
    partial void OnProfilePercentChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    #endregion
		
		public User()
		{
			this._AgentExpressServices = new EntitySet<AgentExpressService>(new Action<AgentExpressService>(this.attach_AgentExpressServices), new Action<AgentExpressService>(this.detach_AgentExpressServices));
			this._Categories = new EntitySet<Category>(new Action<Category>(this.attach_Categories), new Action<Category>(this.detach_Categories));
			this._Chats = new EntitySet<Chat>(new Action<Chat>(this.attach_Chats), new Action<Chat>(this.detach_Chats));
			this._Chats1 = new EntitySet<Chat>(new Action<Chat>(this.attach_Chats1), new Action<Chat>(this.detach_Chats1));
			this._ChatRooms = new EntitySet<ChatRoom>(new Action<ChatRoom>(this.attach_ChatRooms), new Action<ChatRoom>(this.detach_ChatRooms));
			this._ChatRooms1 = new EntitySet<ChatRoom>(new Action<ChatRoom>(this.attach_ChatRooms1), new Action<ChatRoom>(this.detach_ChatRooms1));
			this._EmailConfigurations = new EntitySet<EmailConfiguration>(new Action<EmailConfiguration>(this.attach_EmailConfigurations), new Action<EmailConfiguration>(this.detach_EmailConfigurations));
			this._EmailConfigurations1 = new EntitySet<EmailConfiguration>(new Action<EmailConfiguration>(this.attach_EmailConfigurations1), new Action<EmailConfiguration>(this.detach_EmailConfigurations1));
			this._ExpressJobBids = new EntitySet<ExpressJobBid>(new Action<ExpressJobBid>(this.attach_ExpressJobBids), new Action<ExpressJobBid>(this.detach_ExpressJobBids));
			this._ExpressJobs = new EntitySet<ExpressJob>(new Action<ExpressJob>(this.attach_ExpressJobs), new Action<ExpressJob>(this.detach_ExpressJobs));
			this._JobAttachments = new EntitySet<JobAttachment>(new Action<JobAttachment>(this.attach_JobAttachments), new Action<JobAttachment>(this.detach_JobAttachments));
			this._JobDetails = new EntitySet<JobDetail>(new Action<JobDetail>(this.attach_JobDetails), new Action<JobDetail>(this.detach_JobDetails));
			this._Jobs = new EntitySet<Job>(new Action<Job>(this.attach_Jobs), new Action<Job>(this.detach_Jobs));
			this._Notifications = new EntitySet<Notification>(new Action<Notification>(this.attach_Notifications), new Action<Notification>(this.detach_Notifications));
			this._Packages = new EntitySet<Package>(new Action<Package>(this.attach_Packages), new Action<Package>(this.detach_Packages));
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			this._QuestionReplies = new EntitySet<QuestionReply>(new Action<QuestionReply>(this.attach_QuestionReplies), new Action<QuestionReply>(this.detach_QuestionReplies));
			this._RejectedAgreements = new EntitySet<RejectedAgreement>(new Action<RejectedAgreement>(this.attach_RejectedAgreements), new Action<RejectedAgreement>(this.detach_RejectedAgreements));
			this._ReviewAndRatings = new EntitySet<ReviewAndRating>(new Action<ReviewAndRating>(this.attach_ReviewAndRatings), new Action<ReviewAndRating>(this.detach_ReviewAndRatings));
			this._ReviewAndRatings1 = new EntitySet<ReviewAndRating>(new Action<ReviewAndRating>(this.attach_ReviewAndRatings1), new Action<ReviewAndRating>(this.detach_ReviewAndRatings1));
			this._UserBankCards = new EntitySet<UserBankCard>(new Action<UserBankCard>(this.attach_UserBankCards), new Action<UserBankCard>(this.detach_UserBankCards));
			this._UserBids = new EntitySet<UserBid>(new Action<UserBid>(this.attach_UserBids), new Action<UserBid>(this.detach_UserBids));
			this._UserCertificates = new EntitySet<UserCertificate>(new Action<UserCertificate>(this.attach_UserCertificates), new Action<UserCertificate>(this.detach_UserCertificates));
			this._UserEducations = new EntitySet<UserEducation>(new Action<UserEducation>(this.attach_UserEducations), new Action<UserEducation>(this.detach_UserEducations));
			this._UserEmailConfigurations = new EntitySet<UserEmailConfiguration>(new Action<UserEmailConfiguration>(this.attach_UserEmailConfigurations), new Action<UserEmailConfiguration>(this.detach_UserEmailConfigurations));
			this._UserEmployements = new EntitySet<UserEmployement>(new Action<UserEmployement>(this.attach_UserEmployements), new Action<UserEmployement>(this.detach_UserEmployements));
			this._UserJobAgreements = new EntitySet<UserJobAgreement>(new Action<UserJobAgreement>(this.attach_UserJobAgreements), new Action<UserJobAgreement>(this.detach_UserJobAgreements));
			this._UserJobAgreements1 = new EntitySet<UserJobAgreement>(new Action<UserJobAgreement>(this.attach_UserJobAgreements1), new Action<UserJobAgreement>(this.detach_UserJobAgreements1));
			this._UserJobRejections = new EntitySet<UserJobRejection>(new Action<UserJobRejection>(this.attach_UserJobRejections), new Action<UserJobRejection>(this.detach_UserJobRejections));
			this._UserJobRejections1 = new EntitySet<UserJobRejection>(new Action<UserJobRejection>(this.attach_UserJobRejections1), new Action<UserJobRejection>(this.detach_UserJobRejections1));
			this._UserPackages = new EntitySet<UserPackage>(new Action<UserPackage>(this.attach_UserPackages), new Action<UserPackage>(this.detach_UserPackages));
			this._UserPackageTokens = new EntitySet<UserPackageToken>(new Action<UserPackageToken>(this.attach_UserPackageTokens), new Action<UserPackageToken>(this.detach_UserPackageTokens));
			this._UserPersonals = new EntitySet<UserPersonal>(new Action<UserPersonal>(this.attach_UserPersonals), new Action<UserPersonal>(this.detach_UserPersonals));
			this._UserPortfolios = new EntitySet<UserPortfolio>(new Action<UserPortfolio>(this.attach_UserPortfolios), new Action<UserPortfolio>(this.detach_UserPortfolios));
			this._UserProfileTrackings = new EntitySet<UserProfileTracking>(new Action<UserProfileTracking>(this.attach_UserProfileTrackings), new Action<UserProfileTracking>(this.detach_UserProfileTrackings));
			this._UserProfileTrackings1 = new EntitySet<UserProfileTracking>(new Action<UserProfileTracking>(this.attach_UserProfileTrackings1), new Action<UserProfileTracking>(this.detach_UserProfileTrackings1));
			this._UserSpecialities = new EntitySet<UserSpeciality>(new Action<UserSpeciality>(this.attach_UserSpecialities), new Action<UserSpeciality>(this.detach_UserSpecialities));
			this._UserSpokenLanguages = new EntitySet<UserSpokenLanguage>(new Action<UserSpokenLanguage>(this.attach_UserSpokenLanguages), new Action<UserSpokenLanguage>(this.detach_UserSpokenLanguages));
			this._UserTokenUsages = new EntitySet<UserTokenUsage>(new Action<UserTokenUsage>(this.attach_UserTokenUsages), new Action<UserTokenUsage>(this.detach_UserTokenUsages));
			this._UserTransactions = new EntitySet<UserTransaction>(new Action<UserTransaction>(this.attach_UserTransactions), new Action<UserTransaction>(this.detach_UserTransactions));
			this._PestControlPriceLists = new EntitySet<PestControlPriceList>(new Action<PestControlPriceList>(this.attach_PestControlPriceLists), new Action<PestControlPriceList>(this.detach_PestControlPriceLists));
			this._LaundryPriceLists = new EntitySet<LaundryPriceList>(new Action<LaundryPriceList>(this.attach_LaundryPriceLists), new Action<LaundryPriceList>(this.detach_LaundryPriceLists));
			this._UserType = default(EntityRef<UserType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTypeId", DbType="Int NOT NULL")]
		public int UserTypeId
		{
			get
			{
				return this._UserTypeId;
			}
			set
			{
				if ((this._UserTypeId != value))
				{
					if (this._UserType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserTypeIdChanging(value);
					this.SendPropertyChanging();
					this._UserTypeId = value;
					this.SendPropertyChanged("UserTypeId");
					this.OnUserTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(1200)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(1200)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="NVarChar(1200)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this.OnCompanyNameChanging(value);
					this.SendPropertyChanging();
					this._CompanyName = value;
					this.SendPropertyChanged("CompanyName");
					this.OnCompanyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HeadLine", DbType="NVarChar(MAX)")]
		public string HeadLine
		{
			get
			{
				return this._HeadLine;
			}
			set
			{
				if ((this._HeadLine != value))
				{
					this.OnHeadLineChanging(value);
					this.SendPropertyChanging();
					this._HeadLine = value;
					this.SendPropertyChanged("HeadLine");
					this.OnHeadLineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_About", DbType="NVarChar(MAX)")]
		public string About
		{
			get
			{
				return this._About;
			}
			set
			{
				if ((this._About != value))
				{
					this.OnAboutChanging(value);
					this.SendPropertyChanging();
					this._About = value;
					this.SendPropertyChanged("About");
					this.OnAboutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(1200)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(1200)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AreaLandMark", DbType="NVarChar(MAX)")]
		public string AreaLandMark
		{
			get
			{
				return this._AreaLandMark;
			}
			set
			{
				if ((this._AreaLandMark != value))
				{
					this.OnAreaLandMarkChanging(value);
					this.SendPropertyChanging();
					this._AreaLandMark = value;
					this.SendPropertyChanged("AreaLandMark");
					this.OnAreaLandMarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(1200) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(1200)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficeNumber", DbType="NVarChar(1200)")]
		public string OfficeNumber
		{
			get
			{
				return this._OfficeNumber;
			}
			set
			{
				if ((this._OfficeNumber != value))
				{
					this.OnOfficeNumberChanging(value);
					this.SendPropertyChanging();
					this._OfficeNumber = value;
					this.SendPropertyChanged("OfficeNumber");
					this.OnOfficeNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nationality", DbType="NVarChar(1200)")]
		public string Nationality
		{
			get
			{
				return this._Nationality;
			}
			set
			{
				if ((this._Nationality != value))
				{
					this.OnNationalityChanging(value);
					this.SendPropertyChanging();
					this._Nationality = value;
					this.SendPropertyChanged("Nationality");
					this.OnNationalityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfileImageURL", DbType="NVarChar(1200)")]
		public string ProfileImageURL
		{
			get
			{
				return this._ProfileImageURL;
			}
			set
			{
				if ((this._ProfileImageURL != value))
				{
					this.OnProfileImageURLChanging(value);
					this.SendPropertyChanging();
					this._ProfileImageURL = value;
					this.SendPropertyChanged("ProfileImageURL");
					this.OnProfileImageURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegisteredOn", DbType="DateTime NOT NULL")]
		public System.DateTime RegisteredOn
		{
			get
			{
				return this._RegisteredOn;
			}
			set
			{
				if ((this._RegisteredOn != value))
				{
					this.OnRegisteredOnChanging(value);
					this.SendPropertyChanging();
					this._RegisteredOn = value;
					this.SendPropertyChanged("RegisteredOn");
					this.OnRegisteredOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdated", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdated
		{
			get
			{
				return this._LastUpdated;
			}
			set
			{
				if ((this._LastUpdated != value))
				{
					this.OnLastUpdatedChanging(value);
					this.SendPropertyChanging();
					this._LastUpdated = value;
					this.SendPropertyChanged("LastUpdated");
					this.OnLastUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVerified", DbType="Bit NOT NULL")]
		public bool IsVerified
		{
			get
			{
				return this._IsVerified;
			}
			set
			{
				if ((this._IsVerified != value))
				{
					this.OnIsVerifiedChanging(value);
					this.SendPropertyChanging();
					this._IsVerified = value;
					this.SendPropertyChanged("IsVerified");
					this.OnIsVerifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AverageRating", DbType="Float")]
		public System.Nullable<double> AverageRating
		{
			get
			{
				return this._AverageRating;
			}
			set
			{
				if ((this._AverageRating != value))
				{
					this.OnAverageRatingChanging(value);
					this.SendPropertyChanging();
					this._AverageRating = value;
					this.SendPropertyChanged("AverageRating");
					this.OnAverageRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(1500)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExternalId", DbType="NVarChar(MAX)")]
		public string ExternalId
		{
			get
			{
				return this._ExternalId;
			}
			set
			{
				if ((this._ExternalId != value))
				{
					this.OnExternalIdChanging(value);
					this.SendPropertyChanging();
					this._ExternalId = value;
					this.SendPropertyChanged("ExternalId");
					this.OnExternalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignedInBy", DbType="NVarChar(1600)")]
		public string SignedInBy
		{
			get
			{
				return this._SignedInBy;
			}
			set
			{
				if ((this._SignedInBy != value))
				{
					this.OnSignedInByChanging(value);
					this.SendPropertyChanging();
					this._SignedInBy = value;
					this.SendPropertyChanged("SignedInBy");
					this.OnSignedInByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastSignOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastSignOn
		{
			get
			{
				return this._LastSignOn;
			}
			set
			{
				if ((this._LastSignOn != value))
				{
					this.OnLastSignOnChanging(value);
					this.SendPropertyChanging();
					this._LastSignOn = value;
					this.SendPropertyChanged("LastSignOn");
					this.OnLastSignOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEmailVarified", DbType="Bit NOT NULL")]
		public bool IsEmailVarified
		{
			get
			{
				return this._IsEmailVarified;
			}
			set
			{
				if ((this._IsEmailVarified != value))
				{
					this.OnIsEmailVarifiedChanging(value);
					this.SendPropertyChanging();
					this._IsEmailVarified = value;
					this.SendPropertyChanged("IsEmailVarified");
					this.OnIsEmailVarifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenceType", DbType="NVarChar(1600)")]
		public string LicenceType
		{
			get
			{
				return this._LicenceType;
			}
			set
			{
				if ((this._LicenceType != value))
				{
					this.OnLicenceTypeChanging(value);
					this.SendPropertyChanging();
					this._LicenceType = value;
					this.SendPropertyChanged("LicenceType");
					this.OnLicenceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicenceNumber", DbType="NVarChar(1600)")]
		public string LicenceNumber
		{
			get
			{
				return this._LicenceNumber;
			}
			set
			{
				if ((this._LicenceNumber != value))
				{
					this.OnLicenceNumberChanging(value);
					this.SendPropertyChanging();
					this._LicenceNumber = value;
					this.SendPropertyChanged("LicenceNumber");
					this.OnLicenceNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebsiteURL", DbType="NVarChar(1600)")]
		public string WebsiteURL
		{
			get
			{
				return this._WebsiteURL;
			}
			set
			{
				if ((this._WebsiteURL != value))
				{
					this.OnWebsiteURLChanging(value);
					this.SendPropertyChanging();
					this._WebsiteURL = value;
					this.SendPropertyChanged("WebsiteURL");
					this.OnWebsiteURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LicencePhotoCopyURL", DbType="NVarChar(1600)")]
		public string LicencePhotoCopyURL
		{
			get
			{
				return this._LicencePhotoCopyURL;
			}
			set
			{
				if ((this._LicencePhotoCopyURL != value))
				{
					this.OnLicencePhotoCopyURLChanging(value);
					this.SendPropertyChanging();
					this._LicencePhotoCopyURL = value;
					this.SendPropertyChanged("LicencePhotoCopyURL");
					this.OnLicencePhotoCopyURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int")]
		public System.Nullable<int> CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int")]
		public System.Nullable<int> CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tags", DbType="NVarChar(MAX)")]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this.OnTagsChanging(value);
					this.SendPropertyChanging();
					this._Tags = value;
					this.SendPropertyChanged("Tags");
					this.OnTagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapCordinates", DbType="NVarChar(1600)")]
		public string MapCordinates
		{
			get
			{
				return this._MapCordinates;
			}
			set
			{
				if ((this._MapCordinates != value))
				{
					this.OnMapCordinatesChanging(value);
					this.SendPropertyChanging();
					this._MapCordinates = value;
					this.SendPropertyChanged("MapCordinates");
					this.OnMapCordinatesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="NVarChar(1600)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfilePercent", DbType="Int")]
		public System.Nullable<int> ProfilePercent
		{
			get
			{
				return this._ProfilePercent;
			}
			set
			{
				if ((this._ProfilePercent != value))
				{
					this.OnProfilePercentChanging(value);
					this.SendPropertyChanging();
					this._ProfilePercent = value;
					this.SendPropertyChanged("ProfilePercent");
					this.OnProfilePercentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="NVarChar(1600)")]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AgentExpressService", Storage="_AgentExpressServices", ThisKey="Id", OtherKey="AgentId")]
		public EntitySet<AgentExpressService> AgentExpressServices
		{
			get
			{
				return this._AgentExpressServices;
			}
			set
			{
				this._AgentExpressServices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Category", Storage="_Categories", ThisKey="Id", OtherKey="UserIdAddedBy")]
		public EntitySet<Category> Categories
		{
			get
			{
				return this._Categories;
			}
			set
			{
				this._Categories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Chat", Storage="_Chats", ThisKey="Id", OtherKey="UserIdSender")]
		public EntitySet<Chat> Chats
		{
			get
			{
				return this._Chats;
			}
			set
			{
				this._Chats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Chat1", Storage="_Chats1", ThisKey="Id", OtherKey="UserIdReceiver")]
		public EntitySet<Chat> Chats1
		{
			get
			{
				return this._Chats1;
			}
			set
			{
				this._Chats1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ChatRoom", Storage="_ChatRooms", ThisKey="Id", OtherKey="UserId1")]
		public EntitySet<ChatRoom> ChatRooms
		{
			get
			{
				return this._ChatRooms;
			}
			set
			{
				this._ChatRooms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ChatRoom1", Storage="_ChatRooms1", ThisKey="Id", OtherKey="UserId2")]
		public EntitySet<ChatRoom> ChatRooms1
		{
			get
			{
				return this._ChatRooms1;
			}
			set
			{
				this._ChatRooms1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EmailConfiguration", Storage="_EmailConfigurations", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<EmailConfiguration> EmailConfigurations
		{
			get
			{
				return this._EmailConfigurations;
			}
			set
			{
				this._EmailConfigurations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EmailConfiguration1", Storage="_EmailConfigurations1", ThisKey="Id", OtherKey="UserIdLastConfigured")]
		public EntitySet<EmailConfiguration> EmailConfigurations1
		{
			get
			{
				return this._EmailConfigurations1;
			}
			set
			{
				this._EmailConfigurations1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ExpressJobBid", Storage="_ExpressJobBids", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<ExpressJobBid> ExpressJobBids
		{
			get
			{
				return this._ExpressJobBids;
			}
			set
			{
				this._ExpressJobBids.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ExpressJob", Storage="_ExpressJobs", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<ExpressJob> ExpressJobs
		{
			get
			{
				return this._ExpressJobs;
			}
			set
			{
				this._ExpressJobs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_JobAttachment", Storage="_JobAttachments", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<JobAttachment> JobAttachments
		{
			get
			{
				return this._JobAttachments;
			}
			set
			{
				this._JobAttachments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_JobDetail", Storage="_JobDetails", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<JobDetail> JobDetails
		{
			get
			{
				return this._JobDetails;
			}
			set
			{
				this._JobDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Job", Storage="_Jobs", ThisKey="Id", OtherKey="CreatedByUserId")]
		public EntitySet<Job> Jobs
		{
			get
			{
				return this._Jobs;
			}
			set
			{
				this._Jobs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Notification", Storage="_Notifications", ThisKey="Id", OtherKey="UserIdToNotify")]
		public EntitySet<Notification> Notifications
		{
			get
			{
				return this._Notifications;
			}
			set
			{
				this._Notifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Package", Storage="_Packages", ThisKey="Id", OtherKey="CreatedByUserId")]
		public EntitySet<Package> Packages
		{
			get
			{
				return this._Packages;
			}
			set
			{
				this._Packages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Question", Storage="_Questions", ThisKey="Id", OtherKey="UserIdAskedBy")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_QuestionReply", Storage="_QuestionReplies", ThisKey="Id", OtherKey="UserIdReplyBy")]
		public EntitySet<QuestionReply> QuestionReplies
		{
			get
			{
				return this._QuestionReplies;
			}
			set
			{
				this._QuestionReplies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_RejectedAgreement", Storage="_RejectedAgreements", ThisKey="Id", OtherKey="UserIdRejectBy")]
		public EntitySet<RejectedAgreement> RejectedAgreements
		{
			get
			{
				return this._RejectedAgreements;
			}
			set
			{
				this._RejectedAgreements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ReviewAndRating", Storage="_ReviewAndRatings", ThisKey="Id", OtherKey="UserIdReviewBy")]
		public EntitySet<ReviewAndRating> ReviewAndRatings
		{
			get
			{
				return this._ReviewAndRatings;
			}
			set
			{
				this._ReviewAndRatings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ReviewAndRating1", Storage="_ReviewAndRatings1", ThisKey="Id", OtherKey="UserIdReviewTo")]
		public EntitySet<ReviewAndRating> ReviewAndRatings1
		{
			get
			{
				return this._ReviewAndRatings1;
			}
			set
			{
				this._ReviewAndRatings1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserBankCard", Storage="_UserBankCards", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserBankCard> UserBankCards
		{
			get
			{
				return this._UserBankCards;
			}
			set
			{
				this._UserBankCards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserBid", Storage="_UserBids", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserBid> UserBids
		{
			get
			{
				return this._UserBids;
			}
			set
			{
				this._UserBids.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserCertificate", Storage="_UserCertificates", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserCertificate> UserCertificates
		{
			get
			{
				return this._UserCertificates;
			}
			set
			{
				this._UserCertificates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserEducation", Storage="_UserEducations", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserEducation> UserEducations
		{
			get
			{
				return this._UserEducations;
			}
			set
			{
				this._UserEducations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserEmailConfiguration", Storage="_UserEmailConfigurations", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserEmailConfiguration> UserEmailConfigurations
		{
			get
			{
				return this._UserEmailConfigurations;
			}
			set
			{
				this._UserEmailConfigurations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserEmployement", Storage="_UserEmployements", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserEmployement> UserEmployements
		{
			get
			{
				return this._UserEmployements;
			}
			set
			{
				this._UserEmployements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserJobAgreement", Storage="_UserJobAgreements", ThisKey="Id", OtherKey="UserIdClient")]
		public EntitySet<UserJobAgreement> UserJobAgreements
		{
			get
			{
				return this._UserJobAgreements;
			}
			set
			{
				this._UserJobAgreements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserJobAgreement1", Storage="_UserJobAgreements1", ThisKey="Id", OtherKey="UserIdAgent")]
		public EntitySet<UserJobAgreement> UserJobAgreements1
		{
			get
			{
				return this._UserJobAgreements1;
			}
			set
			{
				this._UserJobAgreements1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserJobRejection", Storage="_UserJobRejections", ThisKey="Id", OtherKey="UserIdRejectedBy")]
		public EntitySet<UserJobRejection> UserJobRejections
		{
			get
			{
				return this._UserJobRejections;
			}
			set
			{
				this._UserJobRejections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserJobRejection1", Storage="_UserJobRejections1", ThisKey="Id", OtherKey="UserIdGotRejected")]
		public EntitySet<UserJobRejection> UserJobRejections1
		{
			get
			{
				return this._UserJobRejections1;
			}
			set
			{
				this._UserJobRejections1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserPackage", Storage="_UserPackages", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserPackage> UserPackages
		{
			get
			{
				return this._UserPackages;
			}
			set
			{
				this._UserPackages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserPackageToken", Storage="_UserPackageTokens", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserPackageToken> UserPackageTokens
		{
			get
			{
				return this._UserPackageTokens;
			}
			set
			{
				this._UserPackageTokens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserPersonal", Storage="_UserPersonals", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserPersonal> UserPersonals
		{
			get
			{
				return this._UserPersonals;
			}
			set
			{
				this._UserPersonals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserPortfolio", Storage="_UserPortfolios", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserPortfolio> UserPortfolios
		{
			get
			{
				return this._UserPortfolios;
			}
			set
			{
				this._UserPortfolios.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserProfileTracking", Storage="_UserProfileTrackings", ThisKey="Id", OtherKey="UserIdViewBy")]
		public EntitySet<UserProfileTracking> UserProfileTrackings
		{
			get
			{
				return this._UserProfileTrackings;
			}
			set
			{
				this._UserProfileTrackings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserProfileTracking1", Storage="_UserProfileTrackings1", ThisKey="Id", OtherKey="UserIdViewTo")]
		public EntitySet<UserProfileTracking> UserProfileTrackings1
		{
			get
			{
				return this._UserProfileTrackings1;
			}
			set
			{
				this._UserProfileTrackings1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserSpeciality", Storage="_UserSpecialities", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserSpeciality> UserSpecialities
		{
			get
			{
				return this._UserSpecialities;
			}
			set
			{
				this._UserSpecialities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserSpokenLanguage", Storage="_UserSpokenLanguages", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserSpokenLanguage> UserSpokenLanguages
		{
			get
			{
				return this._UserSpokenLanguages;
			}
			set
			{
				this._UserSpokenLanguages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserTokenUsage", Storage="_UserTokenUsages", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserTokenUsage> UserTokenUsages
		{
			get
			{
				return this._UserTokenUsages;
			}
			set
			{
				this._UserTokenUsages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserTransaction", Storage="_UserTransactions", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserTransaction> UserTransactions
		{
			get
			{
				return this._UserTransactions;
			}
			set
			{
				this._UserTransactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PestControlPriceList", Storage="_PestControlPriceLists", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<PestControlPriceList> PestControlPriceLists
		{
			get
			{
				return this._PestControlPriceLists;
			}
			set
			{
				this._PestControlPriceLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LaundryPriceList", Storage="_LaundryPriceLists", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<LaundryPriceList> LaundryPriceLists
		{
			get
			{
				return this._LaundryPriceLists;
			}
			set
			{
				this._LaundryPriceLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_User", Storage="_UserType", ThisKey="UserTypeId", OtherKey="Id", IsForeignKey=true)]
		public UserType UserType
		{
			get
			{
				return this._UserType.Entity;
			}
			set
			{
				UserType previousValue = this._UserType.Entity;
				if (((previousValue != value) 
							|| (this._UserType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserType.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._UserType.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._UserTypeId = value.Id;
					}
					else
					{
						this._UserTypeId = default(int);
					}
					this.SendPropertyChanged("UserType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AgentExpressServices(AgentExpressService entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_AgentExpressServices(AgentExpressService entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Categories(Category entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Chats(Chat entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Chats(Chat entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Chats1(Chat entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Chats1(Chat entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_ChatRooms(ChatRoom entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ChatRooms(ChatRoom entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ChatRooms1(ChatRoom entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_ChatRooms1(ChatRoom entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_EmailConfigurations(EmailConfiguration entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_EmailConfigurations(EmailConfiguration entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_EmailConfigurations1(EmailConfiguration entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_EmailConfigurations1(EmailConfiguration entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_ExpressJobBids(ExpressJobBid entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ExpressJobBids(ExpressJobBid entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ExpressJobs(ExpressJob entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ExpressJobs(ExpressJob entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_JobAttachments(JobAttachment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_JobAttachments(JobAttachment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_JobDetails(JobDetail entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_JobDetails(JobDetail entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Notifications(Notification entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Packages(Package entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Packages(Package entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_QuestionReplies(QuestionReply entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_QuestionReplies(QuestionReply entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_RejectedAgreements(RejectedAgreement entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_RejectedAgreements(RejectedAgreement entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ReviewAndRatings(ReviewAndRating entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ReviewAndRatings(ReviewAndRating entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ReviewAndRatings1(ReviewAndRating entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_ReviewAndRatings1(ReviewAndRating entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_UserBankCards(UserBankCard entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserBankCards(UserBankCard entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserBids(UserBid entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserBids(UserBid entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserCertificates(UserCertificate entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserCertificates(UserCertificate entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserEducations(UserEducation entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserEducations(UserEducation entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserEmailConfigurations(UserEmailConfiguration entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserEmailConfigurations(UserEmailConfiguration entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserEmployements(UserEmployement entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserEmployements(UserEmployement entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserJobAgreements(UserJobAgreement entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserJobAgreements(UserJobAgreement entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserJobAgreements1(UserJobAgreement entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_UserJobAgreements1(UserJobAgreement entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_UserJobRejections(UserJobRejection entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserJobRejections(UserJobRejection entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserJobRejections1(UserJobRejection entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_UserJobRejections1(UserJobRejection entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_UserPackages(UserPackage entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserPackages(UserPackage entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserPackageTokens(UserPackageToken entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserPackageTokens(UserPackageToken entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserPersonals(UserPersonal entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserPersonals(UserPersonal entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserPortfolios(UserPortfolio entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserPortfolios(UserPortfolio entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserProfileTrackings(UserProfileTracking entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserProfileTrackings(UserProfileTracking entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserProfileTrackings1(UserProfileTracking entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_UserProfileTrackings1(UserProfileTracking entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_UserSpecialities(UserSpeciality entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserSpecialities(UserSpeciality entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserSpokenLanguages(UserSpokenLanguage entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserSpokenLanguages(UserSpokenLanguage entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserTokenUsages(UserTokenUsage entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserTokenUsages(UserTokenUsage entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserTransactions(UserTransaction entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserTransactions(UserTransaction entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_PestControlPriceLists(PestControlPriceList entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PestControlPriceLists(PestControlPriceList entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_LaundryPriceLists(LaundryPriceList entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_LaundryPriceLists(LaundryPriceList entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LaundryPriceList")]
	public partial class LaundryPriceList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private string _ItemName;
		
		private decimal _DryClean;
		
		private System.Nullable<decimal> _Press;
		
		private System.Nullable<int> _ItemType;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnItemNameChanging(string value);
    partial void OnItemNameChanged();
    partial void OnDryCleanChanging(decimal value);
    partial void OnDryCleanChanged();
    partial void OnPressChanging(System.Nullable<decimal> value);
    partial void OnPressChanged();
    partial void OnItemTypeChanging(System.Nullable<int> value);
    partial void OnItemTypeChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public LaundryPriceList()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemName", DbType="NVarChar(1600) NOT NULL", CanBeNull=false)]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this.OnItemNameChanging(value);
					this.SendPropertyChanging();
					this._ItemName = value;
					this.SendPropertyChanged("ItemName");
					this.OnItemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DryClean", DbType="Decimal(18,0) NOT NULL")]
		public decimal DryClean
		{
			get
			{
				return this._DryClean;
			}
			set
			{
				if ((this._DryClean != value))
				{
					this.OnDryCleanChanging(value);
					this.SendPropertyChanging();
					this._DryClean = value;
					this.SendPropertyChanged("DryClean");
					this.OnDryCleanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Press", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Press
		{
			get
			{
				return this._Press;
			}
			set
			{
				if ((this._Press != value))
				{
					this.OnPressChanging(value);
					this.SendPropertyChanging();
					this._Press = value;
					this.SendPropertyChanged("Press");
					this.OnPressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemType", DbType="Int")]
		public System.Nullable<int> ItemType
		{
			get
			{
				return this._ItemType;
			}
			set
			{
				if ((this._ItemType != value))
				{
					this.OnItemTypeChanging(value);
					this.SendPropertyChanging();
					this._ItemType = value;
					this.SendPropertyChanged("ItemType");
					this.OnItemTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LaundryPriceList", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.LaundryPriceLists.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.LaundryPriceLists.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
